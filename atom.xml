<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nancelglap</title>
  <subtitle>不想正经</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nancelglap.github.io/"/>
  <updated>2017-10-11T05:22:19.000Z</updated>
  <id>https://nancelglap.github.io/</id>
  
  <author>
    <name>Nancelglap</name>
    <email>1037218107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql数据备份和还原</title>
    <link href="https://nancelglap.github.io/2017/10/11/mysql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/"/>
    <id>https://nancelglap.github.io/2017/10/11/mysql数据备份和还原/</id>
    <published>2017-10-11T05:20:11.000Z</published>
    <updated>2017-10-11T05:22:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>数据备份</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mysqldump -u root database table1 table2 ... &gt; ~<span class="regexp">/Documents/admin</span>_menu.sql</div></pre></td></tr></table></figure>
<blockquote>
<p>数据还原</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mysql -u root -p &lt; ~<span class="regexp">/Documents/quanzi</span>.sql</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/
    
    </summary>
    
      <category term="mysql" scheme="https://nancelglap.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫</title>
    <link href="https://nancelglap.github.io/2017/09/29/python-%E7%88%AC%E8%99%AB/"/>
    <id>https://nancelglap.github.io/2017/09/29/python-爬虫/</id>
    <published>2017-09-29T02:40:45.000Z</published>
    <updated>2017-09-29T02:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 爬虫相关内容</p>
</blockquote>
<a id="more"></a>
<h3 id="用-urllib-库爬html页面"><a href="#用-urllib-库爬html页面" class="headerlink" title="用 urllib 库爬html页面"></a>用 urllib 库爬html页面</h3><hr>
<ul>
<li><code>urllib.request.urlencode(dict)</code> 将字典转换为 <code>key1=value1&amp;key2=value2</code> 的字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"> </div><div class="line">data=&#123;&#125;</div><div class="line">data[<span class="string">'wd'</span>]=<span class="string">'Nancelglap'</span></div><div class="line"> </div><div class="line">url_values=urllib.parse.urlencode(data)</div><div class="line">url=<span class="string">"http://www.baidu.com/s?"</span></div><div class="line">full_url=url+url_values</div><div class="line"> </div><div class="line">data=urllib.request.urlopen(full_url).read()</div><div class="line">data=data.decode(<span class="string">'UTF-8'</span>)</div><div class="line">print(data)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 爬虫相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="spider" scheme="https://nancelglap.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>python 连接mysql</title>
    <link href="https://nancelglap.github.io/2017/09/26/python-%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>https://nancelglap.github.io/2017/09/26/python-连接mysql/</id>
    <published>2017-09-26T12:52:41.000Z</published>
    <updated>2017-09-26T14:13:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装MySQL驱动"><a href="#安装MySQL驱动" class="headerlink" title="安装MySQL驱动"></a>安装MySQL驱动</h3><hr>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install mysql-connector==<span class="number">2.1</span><span class="number">.4</span></div></pre></td></tr></table></figure>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><hr>
<ul>
<li>先 <code>connect</code>，后创建 <code>cursor</code>，再用 <code>cursor.execute(sql)</code> 执行增删改查</li>
<li>只要创建了 <code>conn</code> 和 <code>cursor</code> 就要调用 <code>conn.close()</code>, <code>cursor.close()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mysql.connector</div><div class="line"></div><div class="line">conn = mysq.connector.connect(user=<span class="string">'root'</span>, password=<span class="string">'password'</span>, database=<span class="string">'test'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 创建表</span></div><div class="line">cursor.execute(<span class="string">'CREATE TABLE user (id varchar(20) primary key, name varchar(20))'</span>)</div><div class="line"><span class="comment"># 插入记录</span></div><div class="line">cursor.execute(<span class="string">'INSERT INTO user (id, name) values (%s, %s)'</span>, [<span class="string">'1'</span>, <span class="string">'Nancelglap'</span>])</div><div class="line"><span class="comment"># 影响的行数</span></div><div class="line">row = cursor.rowcount</div><div class="line"></div><div class="line"><span class="comment"># 提交事务:</span></div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line"></div><div class="line"><span class="comment"># 运行查询:</span></div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT * FROM user WHERE id = %s'</span>, (<span class="string">'1'</span>,))</div><div class="line"></div><div class="line"><span class="comment"># 拿到的是一个list，里面的元素是tuple</span></div><div class="line">values = cursor.fetchall()</div><div class="line"></div><div class="line"><span class="comment"># 关闭 Cursor 和 Connection</span></div><div class="line">cursor.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装MySQL驱动&quot;&gt;&lt;a href=&quot;#安装MySQL驱动&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL驱动&quot;&gt;&lt;/a&gt;安装MySQL驱动&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 内建模块</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-内建模块/</id>
    <published>2017-09-24T12:12:52.000Z</published>
    <updated>2017-09-26T07:49:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 内建模块使用</p>
</blockquote>
<a id="more"></a>
<h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><hr>
<blockquote>
<p>获取当前日期和时间</p>
<ul>
<li><code>atetime</code>是模块，<code>datetime</code>模块还包含一个<code>datetime类</code></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now() <span class="comment"># 获取当前datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(now)</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">07.198690</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(now))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>获取指定日期和时间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(dt)</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime 转换为 timestamp</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.timestamp() <span class="comment"># 把datetime转换为timestamp</span></div><div class="line"><span class="number">1429417200.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>timestamp 转换为 datetime </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">1429417200.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t))</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime加减</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(hours=<span class="number">10</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now - timedelta(days=<span class="number">1</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div></pre></td></tr></table></figure>
<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><hr>
<ul>
<li>可以用取属性的方法获得<code>tuple</code></li>
<li>它具备<code>tuple</code>的不变性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><hr>
<ul>
<li>实现插入和删除操作的<code>双向列表</code>，适合用于队列和栈</li>
<li>实现<code>append()</code>和<code>pop()</code>，还支持<code>appendleft()</code>和<code>popleft()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q</div><div class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</div></pre></td></tr></table></figure>
<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><hr>
<ul>
<li>使用<code>dict</code>时，如果希望引用的<code>key</code>不存在时，返回一个默认值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">'N/A'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] <span class="comment"># key1存在</span></div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key2'</span>] <span class="comment"># key2不存在，返回默认值</span></div><div class="line"><span class="string">'N/A'</span></div></pre></td></tr></table></figure>
<h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><hr>
<blockquote>
<p>Get</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line"><span class="keyword">with</span> request.urlopen(<span class="string">'https://api.douban.com/v2/book/2129650'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, data.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 以下为输出的数据</span></div><div class="line">Status: <span class="number">200</span> OK</div><div class="line">Server: nginx</div><div class="line">Date: Tue, <span class="number">26</span> May <span class="number">2015</span> <span class="number">10</span>:<span class="number">02</span>:<span class="number">27</span> GMT</div><div class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></div><div class="line">Content-Length: <span class="number">2049</span></div><div class="line">Connection: close</div><div class="line">Expires: Sun, <span class="number">1</span> Jan <span class="number">2006</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> GMT</div><div class="line">Pragma: no-cache</div><div class="line">Cache-Control: must-revalidate, no-cache, private</div><div class="line">X-DAE-Node: pidl1</div><div class="line">Data: &#123;<span class="string">"rating"</span>:&#123;<span class="string">"max"</span>:<span class="number">10</span>,<span class="string">"numRaters"</span>:<span class="number">16</span>,<span class="string">"average"</span>:<span class="string">"7.4"</span>,<span class="string">"min"</span>:<span class="number">0</span>&#125;,<span class="string">"subtitle"</span>:<span class="string">""</span>,<span class="string">"author"</span>:[<span class="string">"廖雪峰编著"</span>],<span class="string">"pubdate"</span>:<span class="string">"2007-6"</span>,<span class="string">"tags"</span>:[&#123;<span class="string">"count"</span>:<span class="number">20</span>,<span class="string">"name"</span>:<span class="string">"spring"</span>,<span class="string">"title"</span>:<span class="string">"spring"</span>&#125;...&#125;</div></pre></td></tr></table></figure>
<ul>
<li>往<code>Request</code>对象添加HTTP头部信息，将请求伪装成浏览器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line">req = request.Request(<span class="string">'http://www.douban.com/'</span>)</div><div class="line">req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span>)</div><div class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, f.read().decode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>Post</p>
</blockquote>
<ul>
<li>如果要发送<code>POST</code>请求，把参数<code>data</code>以bytes形式传入</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'模拟登陆微博'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 内建模块使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 正则表达式</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-正则表达式/</id>
    <published>2017-09-24T11:48:49.000Z</published>
    <updated>2017-09-24T12:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 正则表达式相关</p>
</blockquote>
<a id="more"></a>
<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><hr>
<ul>
<li><code>d{3}</code>表示匹配3个数字，例如<code>&#39;010&#39;</code></li>
<li><code>\d{3,8}</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code></li>
<li><code>*</code>表示任意个字符（包括0个），</li>
<li><code>+</code>表示至少一个字符</li>
<li><code>?</code>表示0个或1个字符</li>
<li><code>{n}</code>表示n个字符</li>
<li><code>{n,m}</code>表示n-m个字符</li>
<li><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头</li>
<li><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束</li>
</ul>
<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><hr>
<ul>
<li>用<code>r</code>参数可以不考虑转义问题</li>
<li><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match对象</code>，否则返回<code>None</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><hr>
<ul>
<li>按多个字符切割字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><hr>
<ul>
<li><code>m.group(index)</code></li>
<li>0永远为原字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div></pre></td></tr></table></figure>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><hr>
<ul>
<li>默认匹配尽可能多的字符串</li>
<li>以下例子<code>0*</code>只能匹配空字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure>
<ul>
<li>加一个<code>?</code>让<code>\d+</code>采用费贪婪匹配:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</div></pre></td></tr></table></figure>
<h3 id="预编译正则表达式"><a href="#预编译正则表达式" class="headerlink" title="预编译正则表达式"></a>预编译正则表达式</h3><hr>
<ul>
<li>如果要正则表达式要使用很多次，可以先编译</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-808'</span>).groups</div><div class="line">(<span class="string">'010'</span>, <span class="string">'808'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 正则表达式相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="Regular Expression" scheme="https://nancelglap.github.io/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>python 多进程和多线程</title>
    <link href="https://nancelglap.github.io/2017/09/21/python-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://nancelglap.github.io/2017/09/21/python-多进程和多线程/</id>
    <published>2017-09-21T02:16:08.000Z</published>
    <updated>2017-10-10T08:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 多进程和多线程编程</p>
</blockquote>
<a id="more"></a>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块 <code>Pcoess</code> 类代表一个进程对象</li>
<li><code>start()</code> 方法启动</li>
<li><code>join()</code> 方法等待子进程结束后再继续往下运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 子进程要执行的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># 代码运行时已经是子进程的pid</span></div><div class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 代码运行时是父进程的pid</span></div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</div><div class="line">    print(<span class="string">'Child process will start.'</span>)</div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'Child process end.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>进程池</code>：如果要启动大量子进程，用进程池批量创建子进程</li>
<li>一个<code>p.apply_async()</code>只能处理一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</div><div class="line">    start = time.time()</div><div class="line">    time.sleep(random.random() * <span class="number">3</span>)</div><div class="line">    end = time.time()</div><div class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Pool()      <span class="comment"># 默认大小为电脑CPU的核数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        p.apply_async(long_time_task, args=(i,))</div><div class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</div><div class="line">    p.close()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'All subprocesses done.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>subprocesses</code> 模块启动一个子进程，控制输入和输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在python代码运行 ls -a，和命令行直接运行的效果一样</span></div><div class="line"><span class="keyword">import</span> subprocesses</div><div class="line"></div><div class="line">r = subprocesses.call([<span class="string">'ls'</span>, <span class="string">'-a'</span>])</div><div class="line">print(<span class="string">'Exit code:'</span>, r)</div></pre></td></tr></table></figure>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块提供<code>Queue</code>、<code>Pipes</code>等方式交换数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="comment"># 写数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</div><div class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</div><div class="line">        q.put(value)</div><div class="line">        time.sleep(random.random())</div><div class="line"></div><div class="line"><span class="comment"># 读数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        value = q.get(<span class="keyword">True</span>)</div><div class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></div><div class="line">    q = Queue()</div><div class="line">    pw = Process(target=write, args=(q,))</div><div class="line">    pr = Process(target=read, args=(q,))</div><div class="line">    <span class="comment"># 启动子进程pw，写入:</span></div><div class="line">    pw.start()</div><div class="line">    <span class="comment"># 启动子进程pr，读取:</span></div><div class="line">    pr.start()</div><div class="line">    <span class="comment"># 等待pw结束:</span></div><div class="line">    pw.join()</div><div class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></div><div class="line">    pr.terminate()</div></pre></td></tr></table></figure>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><hr>
<ul>
<li>使用 <code>threading</code> 模块，启动一个线程就是创建一个<code>Thread</code>实例，然后调用<code>start()</code>开始执行</li>
<li><code>threading.current_thread()</code> 返回当前线程的实例</li>
<li>主线程实例的名字叫<code>MainThread</code>，子线程的命名可以作为创建<code>Thread</code>实例时第二个参数传入</li>
<li>如果子线程不起名字，默认命名为<code>Thread-1</code>，<code>Thread-2</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 新线程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div><div class="line"></div><div class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</div><div class="line">t.start()</div><div class="line">t.join()</div><div class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure>
<ul>
<li>高级语言的一条语句在CPU执行时是若干条语句，当两个线程同时运行进行数据交互时，不会按顺序执行，会造成结果错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 假定这是你的银行存款:</span></div><div class="line">balance = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 先存后取，结果应该为0:</span></div><div class="line">    <span class="keyword">global</span> balance</div><div class="line">    balance = balance + n</div><div class="line">    balance = balance - n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        change_it(n)</div><div class="line"></div><div class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</div><div class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t1.join()</div><div class="line">t2.join()</div><div class="line">print(balance)</div><div class="line"><span class="comment"># t1，t2交替执行，不一定是预期结果</span></div></pre></td></tr></table></figure>
<ul>
<li>用<code>threading.Lock()</code>解决</li>
<li>当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止</li>
<li>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">balance = <span class="number">0</span></div><div class="line">lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        <span class="comment"># 先要获取锁:</span></div><div class="line">        lock.acquire()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 放心地改吧:</span></div><div class="line">            change_it(n)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># 改完了一定要释放锁:</span></div><div class="line">            lock.release()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 多进程和多线程编程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="process" scheme="https://nancelglap.github.io/tags/process/"/>
    
  </entry>
  
  <entry>
    <title>python 错误处理</title>
    <link href="https://nancelglap.github.io/2017/09/19/python-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://nancelglap.github.io/2017/09/19/python-错误处理/</id>
    <published>2017-09-19T13:18:24.000Z</published>
    <updated>2017-09-22T03:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>try…except…finally</p>
</blockquote>
<ul>
<li>将可能出错的代码放在<code>try</code>中</li>
<li>可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语句</li>
<li>有错误执行完<code>except</code>后，<code>finally</code>内部的代码也会执行</li>
<li>先执行<code>else</code>中的，后执行<code>finally</code>中的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'try...'</span>)</div><div class="line">    r = <span class="number">10</span> / int(<span class="string">'2'</span>)</div><div class="line">    print(<span class="string">'result:'</span>, r)</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'ValueError:'</span>, e)</div><div class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'ZeroDivisionError:'</span>, e)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'no error!'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'finally...'</span>)</div><div class="line">print(<span class="string">'END'</span>)</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>调用堆栈</p>
</blockquote>
<ul>
<li>如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">main()</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    main()</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> main</div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> bar</div><div class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</div><div class="line">ZeroDivisionError: division by zero</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>记录错误</p>
</blockquote>
<ul>
<li>把错误记录记录到日志文件中</li>
<li><code>http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html</code></li>
</ul>
<hr>
<blockquote>
<p>抛出错误</p>
</blockquote>
<ul>
<li>自己定义错误（尽量使用内置的错误类型）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span><span class="params">(ValueError)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line">foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 最后追踪到自己定义的错误</span></div><div class="line">$ python3 err_raise.py </div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">__main__.FooError: invalid value: <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>另一种处理错误方式</li>
<li>虽然已打印错误，由于当前函数不知道应该怎么处理该错误，所以，继续往上抛，让顶层调用者去处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        foo(<span class="string">'0'</span>)</div><div class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'ValueError!'</span>)</div><div class="line">        <span class="keyword">raise</span></div><div class="line"></div><div class="line">bar()</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>调试</p>
</blockquote>
<ul>
<li><code>assert</code>断言：如果表达式不为<code>True</code>，<code>assert</code>语句本身就会抛出<code>AssertionError</code></li>
<li><code>-O</code> 参数可以关闭assert，<code>$python -O hello.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> expression, <span class="string">'message'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AssertionError: n <span class="keyword">is</span> zero!</div></pre></td></tr></table></figure>
<blockquote>
<p>logging</p>
</blockquote>
<ul>
<li><code>logging</code> 通过配置不同 <code>level</code>控制输出不同级别的信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.basicConfig(level=logging.INFO)</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line">print(<span class="number">10</span> / n)</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">INFO:root:n = <span class="number">0</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    print(<span class="number">10</span> / n)</div><div class="line">ZeroDivisionError: division by zero</div></pre></td></tr></table></figure>
<blockquote>
<p>pdb.set_trace() — 断点</p>
</blockquote>
<ul>
<li>在可能出错的地方放一个pdb.set_trace(),设置一个断点</li>
<li><code>p n</code> 命令查看变量<code>n</code>的值</li>
<li><code>c</code> 命令继续执行代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pdb</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">pdb.set_trace() <span class="comment"># 运行到这里会自动暂停</span></div><div class="line">print(<span class="number">10</span> / n)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;try…except…finally&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将可能出错的代码放在&lt;code&gt;try&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="ERROR" scheme="https://nancelglap.github.io/tags/ERROR/"/>
    
  </entry>
  
  <entry>
    <title>python OOP</title>
    <link href="https://nancelglap.github.io/2017/09/19/python-OOP/"/>
    <id>https://nancelglap.github.io/2017/09/19/python-OOP/</id>
    <published>2017-09-19T13:15:01.000Z</published>
    <updated>2017-09-22T03:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python面向对象</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>面向对象</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line"></div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</div><div class="line">bart.print_score()</div><div class="line">lisa.print_score()</div></pre></td></tr></table></figure>
<p>允许实例变量绑定任何数据(会导致虽然是同一个类的不同实例，但拥有的变量名称可能不同)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">bart = Student();</div><div class="line">bart.age = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实例属性和类属性</p>
</blockquote>
<ul>
<li>定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li>
<li>如果有类属性，删除实例属性同名属性后访问的是类属性<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    name = <span class="string">'Student'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建实例s</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 打印类的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></div><div class="line">Michael</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></div><div class="line">Student</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>给类、实例绑定方法</p>
</blockquote>
<p>给类绑定方法，绑定后所有实例都可以调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></div><div class="line"><span class="meta">... </span>    self.score = score</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.set_score = set_score</div></pre></td></tr></table></figure></p>
<p>给实例绑定方法，绑定后其他实例不能调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span> <span class="comment"># 定义一个函数作为实例方法</span></div><div class="line"><span class="meta">... </span>    self.age = age</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age <span class="comment"># 测试结果</span></div><div class="line"><span class="number">25</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2.set_age(<span class="number">25</span>) <span class="comment"># 尝试调用方法</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'set_age'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>鸭子类型</p>
</blockquote>
<ul>
<li>只要是类中有相应方法的类都可以被另一个函数调用</li>
<li>不关心这个对象的类型本身或是这个类继承，而是这个类是如何被使用的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">duck</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'I walk like a duck'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'i swim like a duck'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'this one walk like a duck'</span>) </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'this man swim like a duck'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">watch_duck</span><span class="params">(animal)</span>:</span></div><div class="line">  animal.walk()</div><div class="line">  animal.swim()</div><div class="line"></div><div class="line">small_duck = duck()</div><div class="line">watch_duck(small_duck)</div><div class="line"></div><div class="line">output &gt;&gt; </div><div class="line">I walk like a duck</div><div class="line">i swim like a duck</div><div class="line"></div><div class="line"></div><div class="line">duck_like_man = person()</div><div class="line">watch_duck(duck_like_man)</div><div class="line"></div><div class="line">output &gt;&gt; </div><div class="line">this one walk like a duck</div><div class="line">this man swim like a duck</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>slots</strong> 限制给实例绑定的变量</p>
</blockquote>
<p>仅对当前类的实例起作用，不对子类起作用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>@property</p>
</blockquote>
<ul>
<li>要封装函数的属性时，用作<code>getter</code>和<code>setter</code>函数的命名，减少函数调用时的代码量</li>
<li><code>getter</code>函数和<code>setter</code>函数必须为同名<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._birth</div><div class="line"></div><div class="line"><span class="meta">    @birth.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></div><div class="line">        self._birth = value</div><div class="line"></div><div class="line">    <span class="comment"># 只读函数</span></div><div class="line"><span class="meta">    @property   </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">2017</span> - self._birth</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.birth = <span class="number">1997</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.birth</div><div class="line"><span class="number">1997</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>str</strong> 和 <strong>repr</strong></p>
</blockquote>
<ul>
<li>当要打印对象的时候打印想要的信息</li>
<li><strong>str</strong> 用在print()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line"><span class="meta">... </span>        self.name = name</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Student object (name: %s)'</span> % self.name</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student(<span class="string">'Michael'</span>))</div><div class="line">Student object (name: Michael)</div></pre></td></tr></table></figure>
<ul>
<li><strong>repr</strong> 用在直接敲变量，用在开发者调试</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Student object (name=%s)'</span> % self.name</div><div class="line">    __repr__ = __str__</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>iter</strong></p>
</blockquote>
<ul>
<li>将类用作<code>for in</code>循环，循环调用类里面的<code>__next__</code>方法拿到下一个循环的值，直到遇到<code>StopIteration</code>错误退出循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></div><div class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>getitem</strong></p>
</blockquote>
<ul>
<li>像list那样按照下标取元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">            a, b = b, a + b</div><div class="line">        <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">1</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">2</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">3</span>]</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>getattr</strong></p>
</blockquote>
<ul>
<li>只有在没有找到属性的时候才会调用</li>
<li>调用类中不存在的方法或者属性的时候返回相应的值</li>
<li>动态返回一个属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">99</span></div><div class="line"></div><div class="line"><span class="comment"># 当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</div><div class="line"><span class="string">'Michael'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</div><div class="line"><span class="number">99</span></div></pre></td></tr></table></figure>
<ul>
<li>链式生成api</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=<span class="string">''</span>)</span>:</span></div><div class="line">        self._path = path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, path)</span>:</span></div><div class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/%s'</span> % (self._path, path))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/users/%s'</span> % (self._path, name))</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Chain().ni.users(<span class="string">'lizhuoyi'</span>).list</div><div class="line">/ni/users/lizhuoyi/list</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>call</strong></p>
</blockquote>
<ul>
<li>在实例本身上调用函数（将实例视为函数调用）</li>
<li>少写一个函数，可以作为实例典型的函数调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</div><div class="line"></div><div class="line"><span class="comment"># 调用方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s() <span class="comment"># self参数不要传入</span></div><div class="line">My name <span class="keyword">is</span> Michael.</div></pre></td></tr></table></figure>
<blockquote>
<p>枚举类</p>
</blockquote>
<ul>
<li>定义一系列常量</li>
<li>class不可变</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 定义方法一 自动给常量赋值，从1开始递增</div><div class="line">from enum import Enum</div><div class="line"></div><div class="line">Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))</div><div class="line"></div><div class="line"># 定义方法二 @unique装饰器帮助检查保证没有重复值</div><div class="line">from enum import Enum, unique</div><div class="line"></div><div class="line">@unique</div><div class="line">class Weekday(Enum):</div><div class="line">    Sun = 0 # Sun的value被设定为0</div><div class="line">    Mon = 1</div><div class="line">    Tue = 2</div><div class="line">    Wed = 3</div><div class="line">    Thu = 4</div><div class="line">    Fri = 5</div><div class="line">    Sat = 6</div><div class="line"></div><div class="line"># 取值调用</div><div class="line">&gt;&gt;&gt; for name, member in Month.__members__.items():</div><div class="line">&gt;&gt;&gt;    print(name, '=&gt;', member, ',', member.value)</div><div class="line">Jan =&gt; Mounth.Jan , 1</div><div class="line">...</div><div class="line"></div><div class="line"># 其他调用</div><div class="line">&gt;&gt;&gt; print(Weekday(1))</div><div class="line">Weekday.Mon</div><div class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</div><div class="line">2</div></pre></td></tr></table></figure>
<blockquote>
<p>type()</p>
</blockquote>
<ul>
<li>动态创建一个类</li>
<li>class本身就是<code>type</code></li>
<li>要创建一个class对象，<code>type(&#39;name&#39;, (object, []), dict(funcName = func, []))</code>函数依次传入3个参数：<br>1、class的名称<br>2、继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法<br>3、class的方法名称与函数绑定</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span> <span class="comment"># 先定义函数</span></div><div class="line"><span class="meta">... </span>    print(<span class="string">'Hello, %s.'</span> % name)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn)) <span class="comment"># 创建Hello class</span></div></pre></td></tr></table></figure>
<blockquote>
<p>super</p>
</blockquote>
<ul>
<li>子类覆盖父类方法后调用父类方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">''</span>)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = <span class="string">''</span>, age = <span class="number">10</span>)</span>:</span></div><div class="line">        self.age = age</div><div class="line">        super(B, self).__init__(name)</div><div class="line"></div><div class="line">child = B(<span class="string">'Nancelglap'</span>, <span class="number">18</span>)</div><div class="line">print(<span class="string">'%d %s'</span> % (child.age , child.name))</div></pre></td></tr></table></figure>
<blockquote>
<p>Dict类</p>
</blockquote>
<ul>
<li>不仅能像<code>dict</code>用下标访问，还能用类的属性访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        super().__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Dict' object has no attribute '%s'"</span> % key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self[key] = value</div></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dict(a=<span class="number">1</span>, b=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.a</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python面向对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="OOP" scheme="https://nancelglap.github.io/tags/OOP/"/>
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pythonic</title>
    <link href="https://nancelglap.github.io/2017/09/14/pythonic/"/>
    <id>https://nancelglap.github.io/2017/09/14/pythonic/</id>
    <published>2017-09-14T02:16:44.000Z</published>
    <updated>2017-10-11T06:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何写出 pythonic 代码</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>1、传参</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int(<span class="string">'123'</span>, base = <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 等于以下</span></div><div class="line">kw = &#123;<span class="string">'base'</span>: <span class="number">2</span>&#125;</div><div class="line">int(<span class="string">'123'</span>, **kw)</div></pre></td></tr></table></figure>
<blockquote>
<p>2、python实现switch语法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    ...</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></div><div class="line">    ...</div><div class="line"></div><div class="line">dicts = &#123;</div><div class="line">    <span class="string">'A'</span>: func1,</div><div class="line">    <span class="string">'B'</span>: func2,</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">func = dicts[value]</div><div class="line">func();</div></pre></td></tr></table></figure>
<blockquote>
<p>3、enumerate</p>
</blockquote>
<ul>
<li>用于取列表索引还有内容</li>
<li>第二个参数表示索引的开始数字</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L = [i * i <span class="keyword">for</span> i range(<span class="number">5</span>)]</div><div class="line"><span class="keyword">for</span> index, data <span class="keyword">in</span> enumberate(L, <span class="number">1</span>):    </div><div class="line">    print(index, data)</div></pre></td></tr></table></figure>
<blockquote>
<p>4、文件的x模式</p>
</blockquote>
<ul>
<li>如果要写的目标文件已经存在就不写，不存在则写入内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'somefile'</span>, <span class="string">'xt'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(<span class="string">'Hello\n'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何写出 pythonic 代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>配置七牛云</title>
    <link href="https://nancelglap.github.io/2017/09/05/%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    <id>https://nancelglap.github.io/2017/09/05/配置七牛云/</id>
    <published>2017-09-05T09:13:01.000Z</published>
    <updated>2017-09-05T09:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>laravel 配置七牛云</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>composer.json 或 composer require zgldh/qiniu-laravel-storage&gt; </p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"zgldh/qiniu-laravel-storage"</span>: <span class="string">"^0.8.1"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/app.php</p>
</blockquote>
<hr>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zgldh\QiniuStorage\QiniuFilesystemServiceProvider::<span class="class"><span class="keyword">class</span>,</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/filesystems.php</p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'qiniu'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span>  =&gt; <span class="string">'qiniu'</span>,</div><div class="line">            <span class="string">'domains'</span> =&gt; [</div><div class="line">                <span class="string">'default'</span>   =&gt; <span class="string">'ovmscef5i.bkt.clouddn.com'</span>, <span class="comment">//你的七牛域名</span></div><div class="line">                <span class="string">'https'</span>     =&gt; <span class="string">''</span>,         <span class="comment">//你的HTTPS域名</span></div><div class="line">                <span class="string">'custom'</span>    =&gt; <span class="string">''</span>,     <span class="comment">//你的自定义域名</span></div><div class="line">             ],</div><div class="line">            <span class="string">'access_key'</span>=&gt; <span class="string">'lqXMMY6JYjGEM-x0WgoJ84i35fc3BW2sMtOZXyzM'</span>,  <span class="comment">//AccessKey</span></div><div class="line">            <span class="string">'secret_key'</span>=&gt; <span class="string">'zRMFaIJ44i2KQZrN32GxWpO0_1ceU1heUsMSuLlH'</span>,  <span class="comment">//SecretKey</span></div><div class="line">            <span class="string">'bucket'</span>    =&gt; <span class="string">'quanzi'</span>,  <span class="comment">//Bucket名字</span></div><div class="line">            <span class="string">'notify_url'</span>=&gt; <span class="string">''</span>,  <span class="comment">//持久化处理回调地址</span></div><div class="line">        ],</div></pre></td></tr></table></figure>
<blockquote>
<p>语法</p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">zgldh</span>\<span class="title">QiniuStorage</span>\<span class="title">QiniuStorage</span>;</div><div class="line"></div><div class="line">$disk = QiniuStorage::disk(<span class="string">'qiniu'</span>);</div><div class="line">$disk-&gt;exists(<span class="string">'file.jpg'</span>);                      <span class="comment">//文件是否存在</span></div><div class="line">$disk-&gt;get(<span class="string">'file.jpg'</span>);                         <span class="comment">//获取文件内容</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,$contents);               <span class="comment">//上传文件</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,fopen(<span class="string">'path/to/big.jpg'</span>,<span class="string">'r+'</span>)); <span class="comment">//分段上传文件。建议大文件&gt;10Mb使用。</span></div><div class="line">$disk-&gt;prepend(<span class="string">'file.log'</span>, <span class="string">'Prepended Text'</span>);   <span class="comment">//附加内容到文件开头</span></div><div class="line">$disk-&gt;append(<span class="string">'file.log'</span>, <span class="string">'Appended Text'</span>);     <span class="comment">//附加内容到文件结尾</span></div><div class="line">$disk-&gt;delete(<span class="string">'file.jpg'</span>);                      <span class="comment">//删除文件</span></div><div class="line">$disk-&gt;delete([<span class="string">'file1.jpg'</span>, <span class="string">'file2.jpg'</span>]);</div><div class="line">$disk-&gt;copy(<span class="string">'old/file1.jpg'</span>, <span class="string">'new/file1.jpg'</span>);  <span class="comment">//复制文件到新的路径</span></div><div class="line">$disk-&gt;move(<span class="string">'old/file1.jpg'</span>, <span class="string">'new/file1.jpg'</span>);  <span class="comment">//移动文件到新的路径</span></div><div class="line">$size = $disk-&gt;size(<span class="string">'file1.jpg'</span>);               <span class="comment">//取得文件大小</span></div><div class="line">$time = $disk-&gt;lastModified(<span class="string">'file1.jpg'</span>);       <span class="comment">//取得最近修改时间 (UNIX)</span></div><div class="line">$files = $disk-&gt;files($directory);              <span class="comment">//取得目录下所有文件</span></div><div class="line">$files = $disk-&gt;allFiles($directory);               <span class="comment">//这个没实现。。。</span></div><div class="line">$directories = $disk-&gt;directories($directory);      <span class="comment">//这个也没实现。。。</span></div><div class="line">$directories = $disk-&gt;allDirectories($directory);   <span class="comment">//这个也没实现。。。</span></div><div class="line">$disk-&gt;makeDirectory($directory);               <span class="comment">//这个其实没有任何作用</span></div><div class="line">$disk-&gt;deleteDirectory($directory);             <span class="comment">//删除目录，包括目录下所有子文件子目录</span></div><div class="line"></div><div class="line">$disk-&gt;uploadToken();                           <span class="comment">//获取上传Token</span></div><div class="line">$disk-&gt;uploadToken(<span class="string">'file.jpg'</span>);                 <span class="comment">//获取上传Token</span></div><div class="line">    </div><div class="line">$disk-&gt;withUploadToken($token);                 <span class="comment">// 使用自定义的 uploadToken 进行上传，</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,$content);                <span class="comment">// 则本次的 put 操作，将使用上述的 $token 进行上传。</span></div><div class="line">                                                    <span class="comment">// 常用于自动触发持久化处理 https://github.com/qiniu/php-sdk/blob/master/examples/upload_and_pfop.php</span></div><div class="line">    </div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>);                     <span class="comment">//获取下载地址</span></div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>)</div><div class="line">         -&gt;setDownload(<span class="string">'foo.jpg'</span>);                      <span class="comment">//获取下载地址，文件名为 foo.jpg</span></div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>, <span class="string">'https'</span>);            <span class="comment">//获取HTTPS下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>);              <span class="comment">//获取私有bucket下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg?attname=foo.jpg'</span>);         </div><div class="line">                                                                <span class="comment">//获取私有bucket下载地址，文件名为 foo.jpg</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>, <span class="string">'https'</span>);     <span class="comment">//获取私有bucket的HTTPS下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>,</div><div class="line">                            [</div><div class="line">                                <span class="string">'domain'</span>=&gt;<span class="string">'https'</span>,</div><div class="line">                                <span class="string">'expires'</span>=&gt;<span class="number">3600</span></div><div class="line">                            ]);                         <span class="comment">//获取私有bucket的HTTPS下载地址。超时 3600 秒。</span></div><div class="line">$disk-&gt;avInfo(<span class="string">'file.mp3'</span>);                          <span class="comment">//获取多媒体文件信息</span></div><div class="line">$disk-&gt;imageInfo(<span class="string">'file.jpg'</span>);                       <span class="comment">//获取图片信息</span></div><div class="line">$disk-&gt;imageExif(<span class="string">'file.jpg'</span>);                       <span class="comment">//获取图片EXIF信息</span></div><div class="line">$disk-&gt;imagePreviewUrl(<span class="string">'file.jpg'</span>,<span class="string">'imageView2/0/w/100/h/200'</span>);                          <span class="comment">//获取图片预览URL</span></div><div class="line">$disk-&gt;privateImagePreviewUrl(<span class="string">'file.jpg'</span>,<span class="string">'imageView2/0/w/100/h/200'</span>);                   <span class="comment">//获取私有bucket图片预览URL</span></div><div class="line">$disk-&gt;verifyCallback(<span class="string">'application/x-www-form-urlencoded'</span>, $request-&gt;header(<span class="string">'Authorization'</span>), <span class="string">'callback url'</span>, $request-&gt;getContent());<span class="comment">//验证回调内容是否合法</span></div><div class="line">$disk-&gt;persistentFop(<span class="string">'file.flv'</span>,<span class="string">'avthumb/m3u8/segtime/40/vcodec/libx264/s/320x240'</span>);    <span class="comment">//执行持久化数据处理</span></div><div class="line">$disk-&gt;persistentFop(<span class="string">'file.flv'</span>,<span class="string">'fop'</span>,<span class="string">'队列名'</span>);    <span class="comment">//使用私有队列执行持久化数据处理</span></div><div class="line">$disk-&gt;persistentStatus($persistent_fop_id);        <span class="comment">//查看持久化数据处理的状态。</span></div><div class="line"></div><div class="line">$disk-&gt;fetch(<span class="string">'http://abc.com/foo.jpg'</span>, <span class="string">'bar.jpg'</span>); <span class="comment">//调用fetch将 foo.jpg 数据以 bar.jpg 的名字储存起来。</span></div><div class="line">$disk-&gt;qetag();     <span class="comment">//得到最后一次执行 put, copy, append 等写入操作后，得到的hash值。详见 https://github.com/qiniu/qetag</span></div><div class="line">$disk-&gt;lastReturn();<span class="comment">//得到最后一次执行 put, copy, append 等写入操作后，得到的返回值。</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;laravel 配置七牛云&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cloud" scheme="https://nancelglap.github.io/categories/cloud/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="qiniuyun" scheme="https://nancelglap.github.io/tags/qiniuyun/"/>
    
  </entry>
  
  <entry>
    <title>接口需要的参数</title>
    <link href="https://nancelglap.github.io/2017/08/25/%E6%8E%A5%E5%8F%A3%E9%9C%80%E8%A6%81%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <id>https://nancelglap.github.io/2017/08/25/接口需要的参数/</id>
    <published>2017-08-25T13:46:27.000Z</published>
    <updated>2017-08-25T14:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>项目中接口需要的参数</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>提交评论接口</p>
</blockquote>
<p>1、被评论条目的 <code>id</code>（作为 <code>parent_id</code>）<br>2、评论所属文章或其他的 <code>id</code>（用 <code>attach</code> 与所属文章建立关系）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目中接口需要的参数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="api" scheme="https://nancelglap.github.io/categories/api/"/>
    
    
      <category term="api" scheme="https://nancelglap.github.io/tags/api/"/>
    
      <category term="params" scheme="https://nancelglap.github.io/tags/params/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 用 async 控制并发</title>
    <link href="https://nancelglap.github.io/2017/08/19/nodejs-%E7%94%A8-async-%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/"/>
    <id>https://nancelglap.github.io/2017/08/19/nodejs-用-async-控制并发/</id>
    <published>2017-08-19T02:04:14.000Z</published>
    <updated>2017-08-19T02:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用 async 函数控制 Node.js 的并发</p>
</blockquote>
<p><strong>async.map</strong> 异步还是根据延时进行<br><strong>async.mapSeries</strong> 一个完了才执行下一个<br><strong>async.mapLimit</strong> 并行执行，第二个参数为最多n个函数并行，只有当其中一个或多个完成的时候才可以继续并行</p>
<p>1、顺序执行，延时的异步操作仍在按队列机制进行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.map(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.1 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.1 handle: '</span> + item.name);</div><div class="line">        <span class="comment">// callback 为 async.map 的第三个参数，第一个参数为错误信息err, 第二个参数为按元素顺序汇总的结果</span></div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.1 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.1 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Jack</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Mike</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Freewind</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Test</span></div><div class="line"><span class="comment">// 54.629&gt; 1.1 handle: Test</span></div><div class="line"><span class="comment">// 54.679&gt; 1.1 handle: Mike</span></div><div class="line"><span class="comment">// 54.789&gt; 1.1 handle: Jack</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 handle: Freewind</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 err:</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 results: [ 'Jack!!!', 'Mike!!!', 'Freewind!!!', 'Test!!!'</span></div></pre></td></tr></table></figure></p>
<p>2、如果中途出错，立刻将错误，以及已经执行完成的结果汇总给最终callback，未执行完的将会在数组中占个空位<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.map(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.2 enter: '</span>, item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        lof(<span class="string">'1.2 handle: '</span> + item.name);</div><div class="line">        <span class="keyword">if</span>(item.name === <span class="string">'Jack'</span>) callback(<span class="string">'myerr'</span>);     <span class="comment">//传一个错误信息参数给最后的callback</span></div><div class="line">        <span class="keyword">else</span> callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);     <span class="comment">//传一个结果给最后callback，错误信息为null</span></div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.2 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.2 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 按延时顺序执行到错误才马上返回</span></div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Jack</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Mike</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Freewind</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Test</span></div><div class="line"><span class="comment">// 54.629&gt; 1.2 handle: Test</span></div><div class="line"><span class="comment">// 54.679&gt; 1.2 handle: Mike</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 handle: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 err: myerr</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 results: [ undefined, 'Mike!!!', , 'Test!!!' ]</span></div><div class="line"><span class="comment">// 54.879&gt; 1.2 handle: Freewind</span></div></pre></td></tr></table></figure></p>
<p>3、顺序执行，一个完了才到下一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.mapSeries(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.3 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.3 handle: '</span> + item.name);</div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.3 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.3 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.3 enter: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.3 handle: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.3 enter: Mike</span></div><div class="line"><span class="comment">// 54.899&gt; 1.3 handle: Mike</span></div><div class="line"><span class="comment">// 54.899&gt; 1.3 enter: Freewind</span></div><div class="line"><span class="comment">// 55.209&gt; 1.3 handle: Freewind</span></div><div class="line"><span class="comment">// 55.209&gt; 1.3 enter: Test</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 handle: Test</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 err:</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 results: [ 'Jack!!!', 'Mike!!!', 'Freewind!!!', 'Test!!!' ]</span></div></pre></td></tr></table></figure></p>
<p>4、顺序执行出错，把错误已经执行完的传给最终callback，未执行的忽略<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.mapSeries(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.4 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.4 handle: '</span> + item.name);</div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.4 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.4 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 47.616&gt; 1.4 enter: Jack</span></div><div class="line"><span class="comment">// 47.821&gt; 1.4 handle: Jack</span></div><div class="line"><span class="comment">// 47.821&gt; 1.4 enter: Mike</span></div><div class="line"><span class="comment">// 47.931&gt; 1.4 handle: Mike</span></div><div class="line"><span class="comment">// 47.931&gt; 1.4 err: myerr</span></div><div class="line"><span class="comment">// 47.932&gt; 1.4 results: [ 'Jack!!!', undefined ]</span></div></pre></td></tr></table></figure></p>
<p>5、并行执行，控制并行数量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.mapLimit(arr, <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>)</span>&#123;</div><div class="line">    log(<span class="string">'1.5 enter '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.5 handle: '</span> + item.name);</div><div class="line">        <span class="keyword">if</span>(item.name === <span class="string">'Jack'</span>) callback(<span class="string">'myerr'</span>);</div><div class="line">        <span class="keyword">else</span> callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.5 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.5 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//57.797&gt; 1.5 enter: Jack</span></div><div class="line"><span class="comment">//57.800&gt; 1.5 enter: Mike</span></div><div class="line"><span class="comment">//57.900&gt; 1.5 handle: Mike</span></div><div class="line"><span class="comment">//57.900&gt; 1.5 enter: Freewind</span></div><div class="line"><span class="comment">//58.008&gt; 1.5 handle: Jack</span></div><div class="line"><span class="comment">//58.009&gt; 1.5 err: myerr</span></div><div class="line"><span class="comment">//58.009&gt; 1.5 results: [ undefined, 'Mike!!!' ]</span></div><div class="line"><span class="comment">//58.208&gt; 1.5 handle: Freewind</span></div><div class="line"><span class="comment">//58.208&gt; 1.5 enter: Test</span></div><div class="line"><span class="comment">//58.273&gt; 1.5 handle: Test</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用 async 函数控制 Node.js 的并发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;async.map&lt;/strong&gt; 异步还是根据延时进行&lt;br&gt;&lt;strong&gt;async.mapSeries&lt;/strong&gt; 一个完了
    
    </summary>
    
      <category term="Node.js" scheme="https://nancelglap.github.io/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://nancelglap.github.io/tags/Node-js/"/>
    
      <category term="async" scheme="https://nancelglap.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 模块</title>
    <link href="https://nancelglap.github.io/2017/08/15/Nodejs-%E6%A8%A1%E5%9D%97/"/>
    <id>https://nancelglap.github.io/2017/08/15/Nodejs-模块/</id>
    <published>2017-08-15T14:08:54.000Z</published>
    <updated>2017-08-17T03:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Nodejs模块</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>superagent</p>
</blockquote>
<p>用来发起 <code>get</code> 或者 <code>post</code> 请求<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install superagent --save</span></div></pre></td></tr></table></figure></p>
<p><code>http://visionmedia.github.io/superagent</code></p>
<blockquote>
<p>cheerio</p>
</blockquote>
<p>用来获取html元素内容（配合<code>superagent</code>使用）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install cheerio --save</span></div></pre></td></tr></table></figure></p>
<p><code>https://github.com/cheeriojs/cheerio</code></p>
<blockquote>
<p>superagent 配合 cheerio 写爬虫</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    superagent.get(<span class="string">'https://cnodejs.org/'</span>)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, sres</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="keyword">return</span> next(err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(sres.text);</div><div class="line">        <span class="keyword">var</span> items = [];</div><div class="line">        $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $element = $(element);</div><div class="line">            items.push(&#123;</div><div class="line">                <span class="attr">title</span>: $element.attr(<span class="string">'title'</span>),</div><div class="line">                <span class="attr">href</span>: $element.attr(<span class="string">'href'</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        res.send(items);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>eventproxy </p>
</blockquote>
<p>用来处理并发执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install eventproxy</span></div></pre></td></tr></table></figure></p>
<p>并发处理例子:<br><code>ep.all</code> 监听了三个事件，每当一个源的数据抓取完成时，就通过 <code>ep.emit()</code> 告诉 <code>ep</code> 自己，某某事件已经完成了。<br>只有当三个事件都完成的时候，才会调用末尾的回调函数统一处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eventproxy = <span class="built_in">require</span>(<span class="string">"eventproxy"</span>)</div><div class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</div><div class="line">ep.all(<span class="string">'data1_event'</span>, <span class="string">'data2_event'</span>, <span class="string">'data3_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data1, data2, data3</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> html = fuck(data1, data2, data3);</div><div class="line">    render(html);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$.get(<span class="string">'http://data1_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data1_event'</span>, data);</div><div class="line">&#125;);</div><div class="line">$.get(<span class="string">'http://data2_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data2_event'</span>, data);</div><div class="line">&#125;);</div><div class="line">$.get(<span class="string">'http://data3_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data3_event'</span>, data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="重复异步协作"><a href="#重复异步协作" class="headerlink" title="重复异步协作"></a>重复异步协作</h4><p><code>https://github.com/JacksonTian/eventproxy#%E9%87%8D%E5%A4%8D%E5%BC%82%E6%AD%A5%E5%8D%8F%E4%BD%9C</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到 topicUrls 之后</span></div><div class="line"></div><div class="line"><span class="comment">// 得到一个 eventproxy 的实例</span></div><div class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</div><div class="line"></div><div class="line"><span class="comment">// ep 重复监听 `topicUrls.length` 次 `topic_html` 事件并在所有事件完成后</span></div><div class="line"><span class="comment">// 再执行后面的回调函数</span></div><div class="line">ep.after(<span class="string">'topic_html'</span>, topicUrls.length, <span class="function"><span class="keyword">function</span>(<span class="params">topics</span>) </span>&#123;</div><div class="line">    <span class="comment">// topics 是个数组，包含 40 次 ep.emit('topic_html', pair) 中的 40 个 pair数组</span></div><div class="line"></div><div class="line">    <span class="comment">// map 函数为一个映射，topics 数组里的所有元素都按回调函数处理</span></div><div class="line">    topics = topics.map(<span class="function"><span class="keyword">function</span> (<span class="params">topicPair</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> topicUrl = topicPair[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> topicHtml = topicPair[<span class="number">1</span>];</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(topicHtml);</div><div class="line">        <span class="keyword">return</span> (&#123;</div><div class="line">            <span class="comment">// .text() 返回被选元素的文本内容</span></div><div class="line">            title: $(<span class="string">'.topic_full_title'</span>).text().trim(),</div><div class="line">            <span class="attr">href</span>: topicUrl,</div><div class="line">            <span class="comment">// .eq(0)：将匹配元素集指定 index 上的一个，即拿到Class 'reply_content'的第一个</span></div><div class="line">            comment1: $(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim(),</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'final:'</span>);</div><div class="line">    <span class="built_in">console</span>.log(topics);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 全部代码中先执行以下代码，并发请求对应 url 并返回数组</span></div><div class="line">topicUrls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">topicUrl</span>) </span>&#123;</div><div class="line">    supergent.get(topicUrls)</div><div class="line">        .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fetch'</span> + topicUrl + <span class="string">' successfully'</span>);</div><div class="line">            ep.emit(<span class="string">'topic_html'</span>, [topicUrl, res.text]);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>用 cheerio 和 superagent 配合写爬虫</p>
</blockquote>
<p>取每个对应标签的属性值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&apos;ClassName&apos;).each(function (idx, element) &#123;</div><div class="line">    var $element = $(element);</div><div class="line">    var href = $element.attr(&apos;href&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>爬知乎日报实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> titles = [];</div><div class="line"><span class="keyword">const</span> url = <span class="string">'daily.zhihu.com'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    superagent.get(url)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(res.text);</div><div class="line">        $(<span class="string">'.title'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $element = $(element);</div><div class="line">            <span class="comment">// $element.attr('href')</span></div><div class="line">            <span class="keyword">var</span> title = $element.text();</div><div class="line">            titles.push(title);</div><div class="line">        &#125;);</div><div class="line">        resolve();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(titles);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nodejs模块&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node.js" scheme="https://nancelglap.github.io/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://nancelglap.github.io/tags/Node-js/"/>
    
      <category term="modules" scheme="https://nancelglap.github.io/tags/modules/"/>
    
  </entry>
  
  <entry>
    <title>js 语法</title>
    <link href="https://nancelglap.github.io/2017/07/22/js-%E5%9B%9E%E8%B0%83%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <id>https://nancelglap.github.io/2017/07/22/js-回调与异步/</id>
    <published>2017-07-22T01:25:50.000Z</published>
    <updated>2017-08-27T08:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JS 语法相关问题</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>变量</p>
</blockquote>
<p>函数内部变量不用 <code>var</code> 声明就默认视为 <code>全局变量</code></p>
<blockquote>
<p>回调</p>
</blockquote>
<p>1、如果一个函数的参数有回调函数，那么会 <code>先执行完</code> 这个函数再执行回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span> (<span class="params">callback</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> e = ...;</div><div class="line">    <span class="comment">// 执行一些操作</span></div><div class="line">    callback(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 传参方法1，用匿名函数传参</span></div><div class="line">fun1(<span class="function"><span class="keyword">function</span> (<span class="params">var</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">var</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 传参方法2，先定义函数后传参</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span> (<span class="params">var</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">var</span>);</div><div class="line">&#125;</div><div class="line">fun1(fun2);</div></pre></td></tr></table></figure></p>
<p>2、如果函数自带回调函数的参数，会先执行完这个函数的全部（包括延迟操作）才执行回调函数<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* collection.<span class="built_in">find</span>().toArray()是个有延迟操作的函数</div><div class="line">* 必须等到延迟操作完成，即查询完成才会把err，result两个参数返回给回调执行</div><div class="line">*/</div><div class="line">collection.<span class="built_in">find</span>(whereStr).toArray(<span class="function"><span class="keyword">function</span><span class="params">(err, result)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span>(err)</div><div class="line">    &#123;</div><div class="line">      console.<span class="built_in">log</span>(<span class="string">'Error:'</span>+ err);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;     </div><div class="line">    console.<span class="built_in">log</span>(result);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>3、一个函数最后返回的值对下一个函数有用，下一个函数可以加到上一个函数的一个参数（回调函数）内部<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</div><div class="line"><span class="keyword">var</span> DB_CNN_STR = <span class="string">'mongodb://localhost:27017/test'</span>;  <span class="comment">//连接test数据库</span></div><div class="line"></div><div class="line">Mogoclient.connect(DB_CNN_STR, <span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>)</span>&#123;</div><div class="line">    <span class="comment">// 连接 site 表</span></div><div class="line">    <span class="keyword">var</span> collection = db.collection(<span class="string">'site'</span>);</div><div class="line"></div><div class="line">    collection.find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(err);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 因为上面返回的 collection 要用作后面的查询</div><div class="line">* 可以改写为以下</div><div class="line">*/</div><div class="line">db.collection(<span class="string">'site'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> error;</div><div class="line">    collection.find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>异步</p>
</blockquote>
<p><code>js</code> 为单线程异步处理，所以有延迟操作的都会被放入 <code>任务队列</code> 中，异步操作完成后会在 <code>任务队列</code> 放置一个事件，当 <code>主进程完成时</code> 才会去执行 <code>任务队列</code> 中 <code>已完成</code> 并在 <code>等待</code> 的 <code>异步事件</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 因为函数内容有回调函数，所以会在等数据库查询操作完成时才会去执行回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span></div><div class="line">&#123;</div><div class="line">    asyncFn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = 数据库查询操作;</div><div class="line">        callback(result);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 错误例子</div><div class="line">* asyncFn为一个查询数据库的异步函数，此函数还没执行完就直接执行return</div><div class="line">* 所以 result 还没被查询出来就被return了</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span></div><div class="line">&#123;</div><div class="line">    asyncFn(<span class="function"><span class="keyword">function</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = 数据库查询操作;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Promise</p>
</blockquote>
<p>1、用 <code>Promise</code> 解决异步问题，<code>Promise</code> 的三个状态 <code>Pending(等待)</code>， <code>fulfilled(完成)</code>， <code>rejected(失败)</code><br>帮助更好地执行异步</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* fs.readFile为异步读取文件函数</div><div class="line">* 如果不用 promise，在fs.readFile函数外直接调用他返回的data，此时data还未被完全读出</div><div class="line">* 使用 promise，在 promise 回调函数里异步函数在未完成前，promise都处于 "pending" 状态，不会进行下一步操作</div><div class="line">* 只有当异步完成，成功时调用resolve()，将 Promise状态设为 fulfilled；失败时调用reject()，将 Promise状态设为 rejected</div><div class="line">* 当状态为 fulfilled 时执行 result.then() 回调函数的内容，函数参数就是 resolve() 的内部参数</div><div class="line">* 当状态为 rejected 时执行 result.catch() 回调函数的内容，函数参数就是 reject() 的内部参数</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    fs.readFile(<span class="string">'filename'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        resolve(data.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>2、<code>Promise</code> 写法有两种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3、在 <code>Promise</code> then 中使用 <code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在第一个Promise执行成功后执行他对应的then</div><div class="line">* fun1 是个 Promise对象（在外部定义），执行成功后返回的 e 传给后面的 then 作为参数</div><div class="line">* message 是值就是 e 的值</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    ...;</div><div class="line">    resolve(d);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">    fun1(var1, var2).then(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(message);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">var1, var2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> e = var1 + var2;</div><div class="line">        resolve(e);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>闭包</p>
</blockquote>
<p>主要作用：从外部读取函数内部 <code>局部变量</code></p>
<p><code>1</code> 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
<p><code>2</code> 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">　　alert(object.getNameFunc()());</div><div class="line"></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// 外部变量改变了内部属性值，所以 this 指向的原来对象改变，找不到原来对象</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> that.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">　　alert(object.getNameFunc()());</div><div class="line"><span class="comment">// My object</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS 语法相关问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://nancelglap.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://nancelglap.github.io/tags/javascript/"/>
    
      <category term="callback" scheme="https://nancelglap.github.io/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb</title>
    <link href="https://nancelglap.github.io/2017/07/21/Mongodb/"/>
    <id>https://nancelglap.github.io/2017/07/21/Mongodb/</id>
    <published>2017-07-21T00:57:48.000Z</published>
    <updated>2017-07-21T01:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Mongodb相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>启动 Mongodb</p>
</blockquote>
<p>root用户启动<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo mongod </span></div><div class="line">mongo</div></pre></td></tr></table></figure></p>
<p>普通用户启动<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo mongod <span class="comment">--auth</span></div><div class="line">mongo</div><div class="line"></div><div class="line">#交互界面</div><div class="line"><span class="keyword">use</span> admin</div><div class="line">db.auth(<span class="symbol">'username</span>', <span class="symbol">'password</span>')</div></pre></td></tr></table></figure></p>
<blockquote>
<p>创建用户</p>
</blockquote>
<p>账号权限只针对数据库，在相应数据库下创建用户，在 <code>test</code> 数据库下创建一个用户<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">use</span> <span class="keyword">test</span></div><div class="line">switched to <span class="keyword">db</span> <span class="keyword">test</span></div><div class="line">&gt; <span class="keyword">db</span>.createUser(</div><div class="line">...&#123;</div><div class="line">...user:<span class="string">"username"</span>,</div><div class="line">...<span class="keyword">pwd</span>:<span class="string">"password"</span>,</div><div class="line">...roles:[&#123;role:<span class="string">"userAdminAnyDatabase"</span>, <span class="keyword">db</span>:<span class="string">"test"</span>&#125;] </div><div class="line">...&#125;</div><div class="line">...)</div></pre></td></tr></table></figure></p>
<p>角色：</p>
<blockquote>
<p>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Mongodb相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="database" scheme="https://nancelglap.github.io/categories/database/"/>
    
    
      <category term="database" scheme="https://nancelglap.github.io/tags/database/"/>
    
      <category term="mongodb" scheme="https://nancelglap.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Express</title>
    <link href="https://nancelglap.github.io/2017/07/19/Node-js-Express/"/>
    <id>https://nancelglap.github.io/2017/07/19/Node-js-Express/</id>
    <published>2017-07-19T12:25:53.000Z</published>
    <updated>2017-07-21T03:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Express 框架应用</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>路由</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"主页 GET 请求"</span>);</div><div class="line">    res.send(<span class="string">'Hello GET'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</div><div class="line">    res.send(<span class="string">'Hello POST'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>静态文件</p>
</blockquote>
<p>服务器文件必须跟 <code>public</code> 文件夹在 <code>同一个目录下</code></p>
<p>设置静态路径方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"> </div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"> </div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">   res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> host = server.address().address</div><div class="line">  <span class="keyword">var</span> port = server.address().port</div><div class="line"> </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>浏览器访问 <code>http://127.0.0.1:8081/images/logo.png</code></p>
<blockquote>
<p>GET 方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, functino(req, res) &#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">"index.htm"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/process_get'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> response = [</div><div class="line">        <span class="string">"first_name"</span> : req.query.first_name,</div><div class="line">        <span class="string">"last_name"</span> : req.query.last_name</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> host = server.address().address</div><div class="line">    <span class="keyword">var</span> port = server.address().port</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>POST 方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'.'</span> + <span class="string">'index.htm'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// 输出 JSON 格式</span></div><div class="line">    <span class="keyword">var</span> response = &#123;</div><div class="line">        <span class="string">"first_name"</span> : req.body.first_name,</div><div class="line">        <span class="string">"last_name"</span> : req.body.last_name</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> host = server.address().address</div><div class="line">    <span class="keyword">var</span> port = server.address().port</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>文件上传</p>
</blockquote>
<p>上传到本地<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>);</div><div class="line"></div><div class="line">app.use(multer(&#123;<span class="attr">dest</span>: <span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">'index.htm'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);  <span class="comment">//上传文件信息</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> des_file = __dirname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</div><div class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">            fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(err) &#123;</div><div class="line">                        <span class="built_in">console</span>.log(err);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        response = &#123;</div><div class="line">                            <span class="attr">message</span> : <span class="string">'File uploaded successfully'</span>,</div><div class="line">                            <span class="attr">filename</span>: req.files[<span class="number">0</span>].originalname</div><div class="line">                        &#125;;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">console</span>.log(response);</div><div class="line">                    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Express 框架应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Express" scheme="https://nancelglap.github.io/categories/Express/"/>
    
      <category term="Node.js" scheme="https://nancelglap.github.io/categories/Express/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://nancelglap.github.io/tags/Node-js/"/>
    
      <category term="Express" scheme="https://nancelglap.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Request</title>
    <link href="https://nancelglap.github.io/2017/07/19/Node-js-Request/"/>
    <id>https://nancelglap.github.io/2017/07/19/Node-js-Request/</id>
    <published>2017-07-19T03:17:53.000Z</published>
    <updated>2017-07-19T14:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Node.js GET and POST</p>
</blockquote>
<a id="more"></a>
<p>参考 <code>http://www.runoob.com/nodejs/node-js-get-post.html</code></p>
<blockquote>
<p>GET</p>
</blockquote>
<p>1、引入 <code>util</code> 、<code>url</code> 模块<br>2、用 <code>url.parse()</code> 解析 <code>url参数</code><br>3、<code>url.inspect()</code> 将对象转换为字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></div><div class="line">    &#125;);</div><div class="line">    res.end(util.inspect(url.parse(req.url, <span class="literal">true</span>)));</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>获取URL的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset = UTF-8'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 解析 url 参数</span></div><div class="line">    <span class="keyword">var</span> params = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">    res.write(<span class="string">"网站名: "</span> + params.name);</div><div class="line">    res.write(<span class="string">"\n"</span>);</div><div class="line">    res.write(<span class="string">"网站URL: "</span> + params.url);</div><div class="line">    res.end();</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>POST</p>
</blockquote>
<p>1、先用 <code>data</code> 事件监听函数，接收请求体的数据，并累加到变量中<br>2、引入 <code>querystring</code> 模块解析请求体信息<br>3、通过 <code>res.write(变量名.字段名)</code> 引用信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line">var querystring = require(&quot;querystring&quot;);</div><div class="line"></div><div class="line">var postHTML =</div><div class="line">    &apos;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程 Node.js 实例&lt;/title&gt;&lt;/head&gt;&apos; +</div><div class="line">    &apos;&lt;body&gt;&apos; +</div><div class="line">    &apos;&lt;form method=&quot;post&quot;&gt;&apos; +</div><div class="line">    &apos;网站名： &lt;input name=&quot;name&quot;&gt;&lt;br&gt;&apos; +</div><div class="line">    &apos;网站 URL： &lt;input name=&quot;url&quot;&gt;&lt;br&gt;&apos; +</div><div class="line">    &apos;&lt;input type=&quot;submit&quot;&gt;&apos; +</div><div class="line">    &apos;&lt;/form&gt;&apos; +</div><div class="line">    &apos;&lt;/body&gt;&lt;/html&gt;&apos;;</div><div class="line"></div><div class="line">http.createServer(function(req, res)&#123;</div><div class="line">    var body = &quot;&quot;;</div><div class="line">    req.on(&quot;data&quot;, function(chunk) &#123;</div><div class="line">        body += chunk;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req.on(&quot;end&quot;, function() &#123;</div><div class="line">        body = querystring.parse(body);</div><div class="line">        if(body.name &amp;&amp; body.url)</div><div class="line">        &#123;</div><div class="line">            res.write(&quot;网站名:&quot; + body.name);</div><div class="line">            res.write(&quot;URL:&quot; + body.url);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            res.write(postHTML);</div><div class="line">        &#125;</div><div class="line">        res.end();</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(3000);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Node.js GET and POST&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Request" scheme="https://nancelglap.github.io/categories/Request/"/>
    
      <category term="Node.js" scheme="https://nancelglap.github.io/categories/Request/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://nancelglap.github.io/tags/Node-js/"/>
    
      <category term="Request" scheme="https://nancelglap.github.io/tags/Request/"/>
    
  </entry>
  
  <entry>
    <title>laravel-admin</title>
    <link href="https://nancelglap.github.io/2017/07/17/laravel-admin/"/>
    <id>https://nancelglap.github.io/2017/07/17/laravel-admin/</id>
    <published>2017-07-17T02:27:29.000Z</published>
    <updated>2017-10-13T03:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>laravel-admin 脚手架相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>添加路由</p>
</blockquote>
<p>命令会创建路由器文件app/Admin/Controllers/UserController.php<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan admin:make UserController <span class="comment">--model=App\\User</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>添加路由配置</p>
</blockquote>
<p>在laravel-admin的路由配置文件app/Admin/routes.php里添加一行<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$router-&gt;resource(<span class="string">'users'</span>, UserController::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>添加菜单链接</p>
</blockquote>
<p>打开<a href="http://localhost:8000/admin/auth/menu,添加对应的menu" target="_blank" rel="external">http://localhost:8000/admin/auth/menu,添加对应的menu</a></p>
<blockquote>
<p>控制展示图片大小</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="function"><span class="title">grid</span>-&gt;</span><span class="function"><span class="title">picture</span>()-&gt;</span>image(<span class="string">'http://www.ustopmoving.xin/upload/image/'</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>展示关联模型</p>
</blockquote>
<p><code>http://z-song.github.io/laravel-admin/#/zh/model-grid?id=%e5%85%b3%e8%81%94%e6%a8%a1%e5%9e%8b</code></p>
<blockquote>
<p>form建立一对多</p>
</blockquote>
<p><code>http://z-song.github.io/laravel-admin/#/zh/model-form-fields?id=%e4%b8%80%e5%af%b9%e5%a4%9a</code></p>
<blockquote>
<p>上传图片</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意创建文件夹</div></pre></td></tr></table></figure>
<p>1、创建存储配置，<code>config/filesystems.php</code> 添加一项 <code>disk</code>，设置上传的路径为<code>public/upload</code>：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'admin'</span> =&gt; [</div><div class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'local'</span>,</div><div class="line">        <span class="string">'root'</span> =&gt; public_path(<span class="string">'upload'</span>),</div><div class="line">        <span class="string">'visibility'</span> =&gt; <span class="string">'public'</span>,</div><div class="line">    ],</div><div class="line">``` </div><div class="line"><span class="number">2</span>、选择上传的`disk`，修改`config/admin.php`</div></pre></td></tr></table></figure></p>
<p>‘upload’  =&gt; [</p>
<pre><code>&apos;disk&apos; =&gt; &apos;admin&apos;,

&apos;directory&apos;  =&gt; [
    &apos;image&apos;  =&gt; &apos;image&apos;,
    &apos;file&apos;   =&gt; &apos;file&apos;,
],

&apos;host&apos; =&gt; &apos;http://localhost:8000/upload/&apos;,
</code></pre><p>],<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;laravel-admin 脚手架相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="admin" scheme="https://nancelglap.github.io/categories/admin/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="admin" scheme="https://nancelglap.github.io/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>Python 语法</title>
    <link href="https://nancelglap.github.io/2017/07/06/Python-%E8%AF%AD%E6%B3%95/"/>
    <id>https://nancelglap.github.io/2017/07/06/Python-语法/</id>
    <published>2017-07-06T03:27:41.000Z</published>
    <updated>2017-09-24T13:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 语法相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>格式化输出</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></div><div class="line"><span class="string">'Hello, world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</div><div class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>lists(列表)</p>
</blockquote>
<p>1、lists中有lists可以看为<code>二维数组</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>][<span class="number">0</span>]</div><div class="line"><span class="string">'asp'</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>tuple(元组)</p>
</blockquote>
<p><strong>一旦初始化不能修改(tuple的每个元素指向不变)</strong><br>1、如果要定义一个元素的 <em><code>tuple</code></em>，要用<code>,</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">1</span>,)</div></pre></td></tr></table></figure></p>
<p>2、<em><code>tuple</code></em> 中的 <em><code>lists</code></em> 可变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>])</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>dict（字典）</p>
</blockquote>
<p>1、关联数组<br>2、<em><code>key</code></em>必须是不可变的对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure>
<p>判断 <em><code>key</code></em> 是否存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>set</p>
</blockquote>
<p>1、是一组key的集合，但是不存储values（key不能重复，重复元素在set中被自动过滤）<br>2、创建一个<em><code>set</code></em>，提供一个<em><code>list</code></em>作为集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>3、可以对两个set进行交集，并集等操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>判断语句</p>
</blockquote>
<p><strong>不要忘记加’：’</strong><br>1、常规 <code>if else</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'your age is'</span>, age)</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'your age is'</span>, age)</div><div class="line">    print(<span class="string">'teenager'</span>)</div></pre></td></tr></table></figure></p>
<p>2、<code>elif</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</div><div class="line">    print(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>循环</p>
</blockquote>
<h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a><code>for in</code></h3><p>依次把 <em><code>list</code></em> 或 <em><code>tuple</code></em> 中的每个元素迭代出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">    print(name)</div></pre></td></tr></table></figure></p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">    sum = sum + n</div><div class="line">    n = n - <span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="for循环引用两个变量"><a href="#for循环引用两个变量" class="headerlink" title="for循环引用两个变量"></a>for循环引用两个变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line"><span class="meta">... </span>    print(x, y)</div><div class="line">...</div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">2</span> <span class="number">4</span></div><div class="line"><span class="number">3</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>函数</p>
</blockquote>
<p>1、函数名可以赋值给变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) </div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>2、从其他文件导入函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> fileName <span class="keyword">import</span> functionName</div></pre></td></tr></table></figure></p>
<p>3、函数名也是变量</p>
<p>如果将函数名指向其他对象，函数将不能被正常调用，要恢复要重启交互环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-10</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</div></pre></td></tr></table></figure></p>
<p>由于 <code>abs</code> 函数实际上是定义在 <code>import builtins</code> 模块中的，所以要让修改 <code>abs</code> 变量的指向在其它模块也生效，要用 <code>import builtins; builtins.abs = 10</code></p>
<p>4、空函数<br><em><code>pass</code></em> 用作占位符，没有 <em><code>pass</code></em> 代码会运行错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p><em><code>pass</code></em> 用在其他语句中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>5、函数返回多个值<br><code>5.1</code> <strong>允许对左边两个变量赋值</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x, y = func(para)   <span class="comment">#函数返回两个值</span></div></pre></td></tr></table></figure></p>
<p><code>5.2</code> <strong>函数返回多个值返回的其实是一个<code>tuple</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y + step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(x,y)</div><div class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(r)</div><div class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</div></pre></td></tr></table></figure></p>
<p>6、函数执行完毕也没有 <em><code>return</code></em> 语句时，自动 <em><code>return None</code></em><br>7、函数参数的默认值<br><code>7.1</code> 基本使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y, n=<span class="number">1</span>, m=<span class="string">'string'</span>)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment">#如果不按顺序传默认值参数要把参数名写上</span></div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>, m=<span class="string">'guangZhou'</span>)</div></pre></td></tr></table></figure></p>
<p><code>7.2</code> 默认参数必须指向不变对象（以下示例默认参数的坑）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</div><div class="line"><span class="comment">#默认参数变量L指向一个list，但是list是可变的，每次调用函数都改变了变量L指向的list，所以下次调用的时候默认参数已经改变</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure>
<p>8、可变参数（参数为tuple\list）<br><strong><code>*nums</code> 表示把 <code>nums</code> 这个 <code>list</code> 的所有元素作为可变参数传进去</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在参数前加一个*号，在函数内部参数接收到的是一个tuple</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</div><div class="line"><span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">#在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure></p>
<p>9、关键字参数（参数为dict）<br><strong>关键字参数允许传入0个或任意个 <code>含参数名</code> 的参数，这些关键字参数在函数内部自动组装为一个 <code>dict</code></strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">def person(name, age, **kw):</div><div class="line">    print('name:', name, 'age:', age, 'other:', kw)</div><div class="line"></div><div class="line"># 1、只传入必选参数</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18)</div><div class="line">name: Nancelglap age: 30 other: &#123;&#125;  </div><div class="line"></div><div class="line"># 2、传入任意个数的 关键字参数</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, city='huizhou', sex='Male')</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 3、先定义一个dict，把dict转换为 关键字参数 传进去</div><div class="line">&gt;&gt;&gt; extra = &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, city=extra['city'], sex=extra['sex'])</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 4、简化3的调用</div><div class="line"># **extra 表示把 extra 这个 dict 的所有 key-value 用关键字参数传入到函数的 **kw参数，kw将获得一个dict</div><div class="line"># kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</div><div class="line">&gt;&gt;&gt; extra = &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, **extra)</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 5、限制关键字参数的名字（命名关键字参数）</div><div class="line"># 命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数</div><div class="line"># 只接收city和job作为关键字参数</div><div class="line">def person(name, age, *, city, job):</div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line"># 6、可变参数 + 命名关键字参数</div><div class="line"># 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*</div><div class="line"># 调用时不加参数名会被视为位置参数报错</div><div class="line">def person(name, age, *args, city, job)</div><div class="line">    print(name, age, args, city, job)</div><div class="line"></div><div class="line">&gt;&gt;&gt; person('Jack', 24, 'Beijing', 'Engineer')</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">TypeError: person() takes 2 positional arguments but 4 were given</div><div class="line"></div><div class="line"># 7、命名关键字参数缺省值</div><div class="line"># 命名关键字参数有默认值，调用时可不传入参数</div><div class="line">def person(name, age, *, city='Beijing', job):</div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line">&gt;&gt;&gt; person('Jack', 24, job='Engineer')</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<p><strong>使用命名关键字参数，如果没有可变参数，必须加一个’*’，否则会被认为位置参数</strong></p>
<p>10、参数组合<br>参数定义顺序：<code>必选参数</code>,<code>默认参数</code>,<code>可变参数</code>,<code>命名关键字参数</code>,<code>关键字参数</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># a、b：必选参数 c：默认参数 args：可变参数 kw：关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="comment"># a、b：必选参数 c：默认参数 d：命名关键字参数 kw：关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="keyword">None</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="keyword">None</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 通过 tuple 和 dict 调用上述函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>对于任意函数，都可以通过类似func(<em>args, *</em>kw)的形式调用它，无论它的参数是如何定义的。</p>
<hr>
<blockquote>
<p>高阶函数</p>
</blockquote>
<p>一个函数就可以<code>接收另一个函数</code>作为<code>参数</code>，这种函数就称之为高阶函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="comment"># 交互</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">-5</span>, <span class="number">6</span>, abs)</div><div class="line"><span class="number">11</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>函数作为返回值</p>
</blockquote>
<p>1、<code>闭包（Closure）</code><br>-&gt; 在函数 <code>lazy_sum</code> 中又定义了函数 <code>sum</code><br>-&gt; 内部函数 <code>sum</code> 可以引用外部函数<code>lazy_sum</code> 的参数和局部变量<br>-&gt; 当 <code>lazy_sum</code> 返回函数 <code>sum</code> 时，相关参数和变量都保存在返回的函数中</p>
<p>2、当我们调用 <code>lazy_sum()时</code>，每次调用都会返回一个 <code>新的函数</code>，即使传入相同的参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax + n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="comment"># 交互</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1==f2</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>匿名函数</p>
</blockquote>
<p><code>lambda 参数: 操作</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f = <span class="keyword">lambda</span> x, y : x * y</div><div class="line">f(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>将匿名函数作为返回值返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x*x + y*y</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>装饰器 decorator</p>
</blockquote>
<h4 id="在函数定义好后在函数执行前或执行后加入其他功能（在函数定义好后，需要在调用函数部分的前后进行一些操作）"><a href="#在函数定义好后在函数执行前或执行后加入其他功能（在函数定义好后，需要在调用函数部分的前后进行一些操作）" class="headerlink" title="在函数定义好后在函数执行前或执行后加入其他功能（在函数定义好后，需要在调用函数部分的前后进行一些操作）"></a>在<strong>函数定义好后</strong>在<em>函数执行前</em>或<em>执行后</em>加入其他功能（在函数定义好后，需要在调用函数部分的前后进行一些操作）</h4><p>1、编写 <code>decorator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 相当于 func = log(func)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call function %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># 传参调用 相当于 func = log('text')(func)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure></p>
<p>2、用python <code>@</code> 语法调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funName</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>3、同时支持调用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@log</span></div><div class="line">def f():</div><div class="line">    pass</div><div class="line"></div><div class="line"><span class="variable">@log</span>(<span class="string">'text'</span>)</div><div class="line">def f():</div><div class="line">    pass</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log2</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="keyword">if</span> callable(text):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            text(*args, **kw);</div><div class="line">            print(<span class="string">'End call'</span>);</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">                func(*args, **kw)</div><div class="line">                print(<span class="string">'text'</span>, text)</div><div class="line">                print(<span class="string">'End call'</span>)</div><div class="line">            <span class="keyword">return</span> wrapper</div><div class="line">        <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>偏函数</p>
</blockquote>
<p>将函数的某些参数固定（设为默认值），使函数调用更简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>闭包</p>
</blockquote>
<p>1、当一个函数返回一个函数后，其内部变量还被新函数引用<br>2、返回的函数没有立刻执行，直到调用 <code>f()</code> 才执行<br>3、返回的函数内部不要引用局部变量，当最后调用 <code>f()</code> 的时候 <code>局部变量</code>可能已经不是当初定义函数时候的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):   <span class="comment"># 每次循环创建一个新的函数</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="comment"># f1(), f2(), f3()调用的结果并不是当时定义时返回的1、4、9</span></div><div class="line"><span class="comment"># 返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>4、如果一定要引用循环变量，再创建一个函数，用该函数的参数绑定循环变量当前值<br>5、闭包可以理解为两个过程 <code>传值调用</code> 和 <code>启动</code>，当有参数传进外部函数时，第一个过程完成，当用 <code>f()</code> 时为启动这个闭包，会接着执行内部函数的内容<br>6、闭包必须先 <code>传值调用</code> 后赋给另一个变量，然后在启动变量调用内部函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i))     <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">    <span class="keyword">return</span> fs</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>切片</p>
</blockquote>
<p><strong>切片可以对 <code>lists</code>、<code>tuple</code>、<code>string</code> 进行操作</strong></p>
<p>1、传统取 <code>list</code> 或 <code>tuple</code> 的部分元素操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(n);</div><div class="line"><span class="meta">... </span>   r.append(L[i])</div><div class="line">...</div><div class="line">&gt;&gt;&gt;&gt; r</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>2、基本切片<br>（1）<em><code>[n ,m]</code></em>：从索引 <code>n</code> 开始，知道索引 <code>m</code> ，但不包括索引 <code>m</code><br>（2）如果第一个索引是 <code>0</code>，可以省略：<code>[:3]</code></p>
<p>3、倒数切片<br>（1）<code>L[-2:-1]</code>取倒数第二个元素<br>（2）<code>L[-2:]</code>取倒数两个元素</p>
<p>4、间隔切片<br>（1）<code>L[::5]</code>：所有数每5个取一个<br>（2）<code>L[:10:2]</code>：前10个数每两个取一个</p>
<hr>
<blockquote>
<p>迭代</p>
</blockquote>
<p>1、迭代 <em><code>dict</code></em> 的 <em><code>key</code></em>（取出所有<em><code>key</code></em>）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span>    L.append(key)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[a, b, c]</div></pre></td></tr></table></figure></p>
<p>2、迭代 <em><code>dict</code></em> 的 <em><code>value</code></em><br><code>for value in d.values()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</div><div class="line"><span class="meta">... </span>    values.append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>3、同时迭代 <em><code>key</code></em> 和 <em><code>value</code></em><br><code>for k, v in d.items()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span>    keys.append(k)</div><div class="line"><span class="meta">... </span>    values.append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>4、判断一个对象是否为可迭代对象<br><strong>通过collections模块的Iterable类型判断</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>列表生成式</p>
</blockquote>
<p>1、基本列表生成式<br><em><code>[操作式 for x in 可迭代对象]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>2、加判断的列表生成式<br><em><code>[操作式 for x in 可迭代对象 if 判断条件]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>3、两层循环，生成全排列<br><em><code>[操作式 for n in 可迭代对象1 for m in 可迭代对象2]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[n + m <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p>
<p>4、运用示例（列出当前目录下的所有文件和目录名）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)]</div></pre></td></tr></table></figure></p>
<p>5、优化迭代 <code>dict</code> 的 <code>key</code> 和 <code>value</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</div><div class="line">[<span class="string">'y=B'</span>, <span class="string">'x=A'</span>, <span class="string">'z=C'</span>]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>生成器（generator）</p>
</blockquote>
<p>1、作用：节省列表中没必要的空间<br>2、创建一个有很多元素的列表会占用很大的存储空间，如果列表元素可以按某种算法推算出来，就可以在循环中不断推出后面的元素<br>3、<code>generator</code> 保存的是算法<br>4、每次调用 <code>next(g)</code>，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出 <code>StopIteration</code> 的错误<br>5、生成方法：把一个列表生成式的 <code>[]</code> 改成 <code>()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># 一般调用</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>6、循环调用(用 <code>for</code> 循环)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">49</span></div><div class="line"><span class="number">64</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure></p>
<p>7、函数变 <code>generator</code><br>（1）如果一个函数定义中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，而是一个 <code>generator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure></p>
<p>（2）函数内部遇到 <code>yield</code> 语句的时候返回，再次执行从上次返回的 <code>yield</code> 处继续执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step 1'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step 2'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">    print(<span class="string">'step 3'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>(3)当用 <code>for</code> 循环迭代的时候，<code>yield</code> 可以看做将内容存在待用列表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span>q</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>（4）<code>for</code> 循环调用 <code>generator</code> 时，拿不到 <code>generator</code> 的 <code>return</code> 语句的返回值，如果想要拿到返回值，要捕获 <code>StopIteration</code> 错误，返回值包含在 <code>StopIteration</code> 的 <code>value</code> 中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = fib(<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>        x = next(g)</div><div class="line"><span class="meta">... </span>        print(<span class="string">'g:'</span>, x)</div><div class="line"><span class="meta">... </span>    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</div><div class="line"><span class="meta">... </span>        print(<span class="string">'Generator return value:'</span>, e.value)</div><div class="line"><span class="meta">... </span>        <span class="keyword">break</span></div><div class="line">...</div><div class="line">g: <span class="number">1</span></div><div class="line">g: <span class="number">1</span></div><div class="line">g: <span class="number">2</span></div><div class="line">g: <span class="number">3</span></div><div class="line">g: <span class="number">5</span></div><div class="line">g: <span class="number">8</span></div><div class="line">Generator <span class="keyword">return</span> value: done</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>迭代器</p>
</blockquote>
<p><strong>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator</strong></p>
<p>一、可以直接作用于 <code>for</code> 循环的对象统称为可迭代对象： <code>Iterable</code><br>1、一类是集合数据类型，如 <code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等<br>2、一类是 <code>generator</code>，包括生成器和带 <code>yield</code> 的 <code>generator function</code></p>
<p>二、<code>generator</code> 都是 <code>Iterator</code> 对象，但 <code>list</code>、<code>dict</code>、<code>str</code> 虽然是 <code>Iterable</code>，却不是 <code>Iterator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterator)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>三、可以通过 <code>iter()</code> 函数将 <code>Iterable</code> 转换为 <code>Iterator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>四、<code>Iterable</code> 和 <code>Iterator</code> 小结<br>1、凡是可作用于 <code>for</code> 循环的对象都是 <code>Iterable</code> 类型<br>2、凡是可作用于 <code>next()</code> 函数的对象都是 <code>Iterator</code> 类型，它们表示一个惰性计算的序列（只有需要返回下一个数据时才会计算）</p>
<p>五、<code>for</code> 循环的本质通过不断调用 <code>next()</code> 函数实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</div><div class="line">    pss</div><div class="line"></div><div class="line"><span class="comment"># 上面等价于以下</span></div><div class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        x = next(it)</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>模块</p>
</blockquote>
<p>模块加入 <code>if __name__ == __main__</code>，直接运行此模块时此<code>判断有效</code>，其他地方导入模块时此<code>判断失效</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    funcName()</div></pre></td></tr></table></figure></p>
<p>使用交互系统<code>import模块</code>后用 <code>module.funcName()</code> 调用函数<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import hello</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; hello.test()</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>作用域</p>
</blockquote>
<p>1、<strong>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public</strong><br>2、正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等；<br>3、似_xxx和<strong>xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，</strong>abc等；<br>4、<code>private</code> 变量和函数的运用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 模块公开greeting()函数，内部逻辑用private函数隐藏起来了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hi, %s'</span> % name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> _private_1(name)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> _private_2(name)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 语法相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 相关</title>
    <link href="https://nancelglap.github.io/2017/07/06/Python-%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2017/07/06/Python-相关/</id>
    <published>2017-07-06T03:13:49.000Z</published>
    <updated>2017-09-22T13:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与 python 相关知识</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>保存文件</p>
</blockquote>
<p>当 <code>.py</code> 文件中包含中文，在文件开头加上两行<br>1、第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序<br>2、第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>序列</p>
</blockquote>
<ul>
<li>python包含 6 种内建的序列，包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</li>
</ul>
<blockquote>
<p>不变对象</p>
</blockquote>
<ul>
<li>不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。</li>
</ul>
<blockquote>
<p>计算机（Computer）和计算（Compute）</p>
</blockquote>
<p>1、在<code>计算机</code>的层次上，CPU执行的是<code>加减乘除</code>的指令代码，以及<code>各种条件判断和跳转指令</code>，所以，汇编语言是最贴近计算机的语言。<br>2、而<code>计算</code>则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。<br>3、对应到编程语言，就是越<code>低级</code>的语言，越贴近<code>计算机</code>，<code>抽象程度低</code>，<code>执行效率高</code>，比如C语言；越<code>高级</code>的语言，越贴近<code>计算</code>，<code>抽象程度高</code>，<code>执行效率低</code>，比如Lisp语言。</p>
<blockquote>
<p>函数式编程</p>
</blockquote>
<p>1、函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量。<br>2、任意一个函数，只要<code>输入</code>是<code>确定</code>的，<code>输出</code>就是<code>确定</code>的，这种纯函数我们称之为<code>没有副作用</code>。<br>3、允许使用变量的程序设计语言，由于函数内部的<code>变量状态不确定</code>，<code>同样的输入</code>，可能得到<code>不同的输出</code>，因此，这种函数是<code>有副作用</code>的。<br>4、函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数</p>
<blockquote>
<p>模块和包</p>
</blockquote>
<p>1、一个.py文件就称之为一个模块（Module）<br>2、包目录必须包含一个 <code>__init__.py</code> 文件，否则会被视为普通目录<br>3、不同包中可以有相同的模块名，此时模块名为 <code>packageName.moduleName</code><br>4、任何模块代码的第一个字符串都被视为模块的文档注释</p>
<blockquote>
<p><strong>name</strong></p>
</blockquote>
<ul>
<li>如果 import 一个模块，那么模块<code>__name__</code>的值通常为模块文件名，不带路径或者文件扩展名</li>
<li>在命令行中直接运行.py文件,则<code>__name__</code>的值是<code>__main__</code>;</li>
<li>而在import 一个.py文件后,<code>__name__</code>的值就不是<code>__main__</code>了;</li>
<li>从而用<code>if __name__ == &#39;__main__&#39;</code>来判断是否是在直接运行该.py文件</li>
</ul>
<blockquote>
<p>I/O</p>
</blockquote>
<ul>
<li><code>Input Stream</code>就是数据从外面（磁盘、网络）流进内存，<code>Output Stream</code>就是数据从内存流到外面去</li>
<li>在<code>I/O</code>编程中，因为CPU和内存速度远高于外设速度，所有有了<code>同步</code>和<code>异步</code></li>
<li><p>操作IO的能力都是由<strong>操作系统</strong>提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用</p>
</li>
<li><p>调用<code>open()</code>，<code>read()</code>等完成文件操作时要调用<code>close()</code><strong>关闭文件，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</strong></p>
</li>
<li>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用,引入了<code>with语句</code>来自动帮我们调用<code>close()</code>方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    print(f.read())</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容</li>
<li>调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回list</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 读取配置文件</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">    print(line.strip()) <span class="comment"># 把末尾的'\n'删掉</span></div></pre></td></tr></table></figure>
<blockquote>
<p>file-like Object</p>
</blockquote>
<ul>
<li>像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中统称为<code>file-like Object</code>,除了file外，还可以是内存的字节流，网络流，自定义流等等</li>
<li><code>file-like Object</code>不要求从特定类继承，只要写个<code>read()</code>方法就行</li>
<li><code>StringIO</code>就是在内存中创建的<code>file-like Object</code>，常用作临时缓冲</li>
</ul>
<blockquote>
<p>写文件</p>
</blockquote>
<ul>
<li>当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是<code>放到内存缓存起来</code>，<code>空闲的时候</code>再慢慢写入</li>
<li>只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘</li>
<li>忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with语句</code>来得保险（出错时自动调用<code>close()</code>）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(<span class="string">'Hello, world!'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>操作文件和目录</p>
</blockquote>
<ul>
<li>两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前目录的绝对路径:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">'.'</span>)</div><div class="line"><span class="string">'/Users/michael'</span></div><div class="line"><span class="comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'/Users/michael'</span>, <span class="string">'testdir'</span>)</div><div class="line"><span class="string">'/Users/michael/testdir'</span></div><div class="line"><span class="comment"># 然后创建一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">'/Users/michael/testdir'</span>)</div><div class="line"><span class="comment"># 删掉一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'/Users/michael/testdir'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>要拆分路径时，要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'/Users/michael/testdir/file.txt'</span>)</div><div class="line">(<span class="string">'/Users/michael/testdir'</span>, <span class="string">'file.txt'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>os.path.splitext()</code> 得到文件扩展名</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对文件重命名:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">'test.txt'</span>, <span class="string">'test.py'</span>)</div><div class="line"><span class="comment"># 删掉文件:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">'test.py'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>列出当前目录下的所有目录</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.path.isdir(x)]</div></pre></td></tr></table></figure>
<ul>
<li>列出当前目录所有<code>.php</code>文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>]==<span class="string">'.php'</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>序列化</p>
</blockquote>
<ul>
<li>把变量从内存中变成可存储或传输的过程称之为序列化</li>
</ul>
<blockquote>
<p>多线程和多进程</p>
</blockquote>
<ul>
<li>多进程同一个变量各自拷贝一份存在于每个进程，互不影响</li>
<li>多线程所有变量由所有线程共享，任何一个变量都可以被任何一个线程修改</li>
<li>高级语言的一条语句在CPU执行时是若干条语句，当两个线程同时运行进行数据交互时，不会按顺序执行，会造成结果错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 计算 balance = balance + n 分两步</span></div><div class="line"><span class="comment"># 先计算 balance + n，存入临时变量中</span></div><div class="line"><span class="comment"># 再将临时变量赋值给 balance</span></div><div class="line">x = balance + n</div><div class="line">balance = x</div></pre></td></tr></table></figure>
<ul>
<li>线程锁阻止多线程并发执行，效率降低</li>
<li><code>死锁</code>：多线程不同线程的锁<em>视图获取对方持有的锁</em>时可能会造成死锁，导致多个线程全部挂起，既<strong>不能执行也无法结束</strong></li>
<li>如果有几千个任务同时进行，操作系统可能就主要<code>忙着切换任务</code>，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与 python 相关知识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
</feed>
