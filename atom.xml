<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nancelglap</title>
  <subtitle>不想正经</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nancelglap.github.io/"/>
  <updated>2018-03-30T06:43:26.404Z</updated>
  <id>https://nancelglap.github.io/</id>
  
  <author>
    <name>Nancelglap</name>
    <email>1037218107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django+uwsgi+nginx部署</title>
    <link href="https://nancelglap.github.io/2018/03/30/Django-uwsgi-nginx%E9%83%A8%E7%BD%B2/"/>
    <id>https://nancelglap.github.io/2018/03/30/Django-uwsgi-nginx部署/</id>
    <published>2018-03-30T06:24:59.000Z</published>
    <updated>2018-03-30T06:43:26.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于ubuntu部署Django</p>
</blockquote>
<a id="more"></a>
<h3 id="一、装Django"><a href="#一、装Django" class="headerlink" title="一、装Django"></a><strong>一、装Django</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install django==1.8</span></div></pre></td></tr></table></figure>
<h3 id="二、装uWSGI"><a href="#二、装uWSGI" class="headerlink" title="二、装uWSGI"></a><strong>二、装uWSGI</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install uwsgi</span></div></pre></td></tr></table></figure>
<h3 id="三、测试uWSGI"><a href="#三、测试uWSGI" class="headerlink" title="三、测试uWSGI"></a><strong>三、测试uWSGI</strong></h3><p><code>项目根目录/项目名/wsgi.py</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo uwsgi --http 0.0.0.0:8000 --wsgi-file wsgi.py</div></pre></td></tr></table></figure></p>
<p>访问ip</p>
<p>如果端口占用，列出程序pid号，再杀掉所有占用端口的程序<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> lsof -i :8000</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">kill</span> -9 pid</span></div></pre></td></tr></table></figure></p>
<h3 id="四、配置nginx"><a href="#四、配置nginx" class="headerlink" title="四、配置nginx"></a><strong>四、配置nginx</strong></h3><p>1、拷贝配置文件到项目根目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cp /etc/nginx/site-available/default /var/www/project/destiny.conf</span></div></pre></td></tr></table></figure></p>
<p>2、确保有<code>/etc/nginx/uwsgi_params</code>文件，没有的话根据连接获取</p>
<p>3、修改配置文件为以下<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> localhost;</div><div class="line">    <span class="attribute">charset</span>     utf-<span class="number">8</span>;</div><div class="line">    <span class="attribute">access_log</span>      /var/www/project/log/nginx_access.log;</div><div class="line">    <span class="attribute">error_log</span>       /var/www/project/log/nginx_error.log;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">location</span> /static &#123;</div><div class="line">        <span class="attribute">alias</span> /var/www/project/project/static;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">include</span>     /etc/nginx/uwsgi_params;</div><div class="line">        <span class="attribute">uwsgi_pass</span>  <span class="number">127.0.0.1:9090</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>location /static</code>中的<code>/static</code>是自己定义的项目引用静态文件时，浏览器中显示的静态资源所在的根目录名;这样的话，用户在浏览器中查看到的所有image、css或js资源都是处在<code>http://127.0.0.1/static</code>下的</li>
<li><code>location /</code>是指访问项目根目录时，nginx要做的事。其中需要指定 uwsgi_params文件的绝对路径，上面已经提到了</li>
<li><code>127.0.0.1:9090</code>是指uWSGI绑定的监听地址</li>
</ul>
<h3 id="五、将目录权限给nginx"><a href="#五、将目录权限给nginx" class="headerlink" title="五、将目录权限给nginx"></a><strong>五、将目录权限给nginx</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo chown -R www-data:www-data /var/www/project</span></div></pre></td></tr></table></figure>
<h3 id="六、在项目跟目录建立uWSGI配置文件uwsgi-ini"><a href="#六、在项目跟目录建立uWSGI配置文件uwsgi-ini" class="headerlink" title="六、在项目跟目录建立uWSGI配置文件uwsgi.ini"></a><strong>六、在项目跟目录建立uWSGI配置文件<code>uwsgi.ini</code></strong></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">[uwsgi]</span></div><div class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9090</span></div><div class="line"><span class="attr">chdir</span>=/var/www/project</div><div class="line"><span class="attr">module</span>=project.wsgi</div><div class="line"><span class="attr">master</span> = <span class="literal">true</span>         </div><div class="line"><span class="attr">processes</span>=<span class="number">2</span></div><div class="line"><span class="attr">threads</span>=<span class="number">2</span></div><div class="line"><span class="attr">max-requests</span>=<span class="number">2000</span></div><div class="line"><span class="attr">chmod-socket</span>=<span class="number">664</span></div><div class="line"><span class="attr">vacuum</span>=<span class="literal">true</span></div><div class="line"><span class="attr">daemonize</span> = /var/www/project/log/uwsgi.log</div></pre></td></tr></table></figure>
<h3 id="七、去掉-etc-nginx-nginx-conf注释"><a href="#七、去掉-etc-nginx-nginx-conf注释" class="headerlink" title="七、去掉/etc/nginx/nginx.conf注释"></a><strong>七、去掉<code>/etc/nginx/nginx.conf</code>注释</strong></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*.conf;  </div><div class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>*;</div></pre></td></tr></table></figure>
<h3 id="八、启动uWSGI"><a href="#八、启动uWSGI" class="headerlink" title="八、启动uWSGI"></a><strong>八、启动uWSGI</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo uwsgi --ini /var/www/project/uwsgi.ini</span></div></pre></td></tr></table></figure>
<h3 id="九、拷贝mime-type"><a href="#九、拷贝mime-type" class="headerlink" title="九、拷贝mime.type"></a><strong>九、拷贝<code>mime.type</code></strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo cp /etc/nginx/mime.types /var/www/mime.types</span></div></pre></td></tr></table></figure>
<h3 id="十、启动nginx"><a href="#十、启动nginx" class="headerlink" title="十、启动nginx"></a><strong>十、启动nginx</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo service nginx stop</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo -c /var/www/project/destiny.conf</span></div></pre></td></tr></table></figure>
<p><code>-c</code> 表示加载配置文件启动</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于ubuntu部署Django&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://nancelglap.github.io/categories/nginx/"/>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/nginx/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
      <category term="uwsgi" scheme="https://nancelglap.github.io/tags/uwsgi/"/>
    
      <category term="nginx" scheme="https://nancelglap.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Django开发相关</title>
    <link href="https://nancelglap.github.io/2018/03/25/Django%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2018/03/25/Django开发相关/</id>
    <published>2018-03-25T08:42:26.000Z</published>
    <updated>2018-04-13T00:16:07.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于Django实际开发的一些问题</p>
</blockquote>
<a id="more"></a>
<h3 id="更新代码后重启uwsgi和nginx才生效"><a href="#更新代码后重启uwsgi和nginx才生效" class="headerlink" title="更新代码后重启uwsgi和nginx才生效"></a>更新代码后重启uwsgi和nginx才生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo killall -9 uwsgi</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo service nginx stop</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo uwsgi --ini /var/www/sponsor/uwsgi.ini</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo nginx -c /var/www/sponsor/destiny.conf</span></div></pre></td></tr></table></figure>
<h3 id="解决json-dumps-中文变成乱码问题"><a href="#解决json-dumps-中文变成乱码问题" class="headerlink" title="解决json.dumps()中文变成乱码问题"></a>解决json.dumps()中文变成乱码问题</h3><p>给<code>json.dumps</code>加第二个参数<code>ensure_ascii=False</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">"name"</span>:request.POST.get(<span class="string">'name'</span>)&#125;, ensure_ascii=<span class="keyword">False</span>))</div></pre></td></tr></table></figure>
<h3 id="MySQL增"><a href="#MySQL增" class="headerlink" title="MySQL增"></a>MySQL增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</div><div class="line">        nickname = request.POST.get(<span class="string">'nickname'</span>, <span class="string">''</span>)</div><div class="line">        avatar = request.POST.get(<span class="string">'avatar'</span>, <span class="string">'www.baidu.com'</span>)</div><div class="line">        counts = request.POST.get(<span class="string">'counts'</span>, <span class="string">'0'</span>)</div><div class="line">        bg = request.POST.get(<span class="string">'bg'</span>, <span class="string">'www.baidu.com'</span>)</div><div class="line">        info = request.POST.get(<span class="string">'info'</span>, <span class="string">''</span>)</div><div class="line">        sex = request.POST.get(<span class="string">'sex'</span>, <span class="string">'unknow'</span>)</div><div class="line">        openid = request.POST.get(<span class="string">'openid'</span>, <span class="string">'sdjhf343rfjsdhkjf'</span>)</div><div class="line">        province = request.POST.get(<span class="string">'province'</span>, <span class="string">'unknow'</span>)</div><div class="line">        city = request.POST.get(<span class="string">'city'</span>, <span class="string">'unknow'</span>)</div><div class="line"></div><div class="line">        input = &#123;</div><div class="line">            <span class="string">"nickname"</span> : nickname,</div><div class="line">            <span class="string">"avatar"</span> : avatar,</div><div class="line">            <span class="string">"counts"</span> : counts,</div><div class="line">            <span class="string">"bg"</span> : bg,</div><div class="line">            <span class="string">"info"</span> : info,</div><div class="line">            <span class="string">"sex"</span> : sex,</div><div class="line">            <span class="string">"openid"</span> : openid,</div><div class="line">            <span class="string">"province"</span> : province,</div><div class="line">            <span class="string">"city"</span> : city</div><div class="line">        &#125;</div><div class="line">        message = User.objects.create(**input)</div><div class="line">        input[<span class="string">'id'</span>] = message.id</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(input, ensure_ascii=<span class="keyword">False</span>))</div></pre></td></tr></table></figure>
<h3 id="使用log"><a href="#使用log" class="headerlink" title="使用log"></a>使用log</h3><ol>
<li>在<code>setting.py</code>中增加以下配置</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">LOGGING = &#123;</div><div class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'formatters'</span>: &#123;</div><div class="line">        <span class="string">'verbose'</span>: &#123;</div><div class="line">            <span class="string">'format'</span>: <span class="string">'[%(asctime)s] [%(levelname)s] %(message)s'</span></div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'handlers'</span>: &#123;</div><div class="line">        <span class="string">'console'</span>:&#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'file'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'logging.FileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">'/Users/Nancelglap/codes/python/sponsor/log/app_log.log'</span>,   <span class="comment"># 自己的log文件路径</span></div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'email'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'django.utils.log.AdminEmailHandler'</span>,</div><div class="line">            <span class="string">'include_html'</span> : <span class="keyword">True</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'loggers'</span>: &#123;</div><div class="line">        <span class="string">'django'</span>: &#123;     <span class="comment"># 使用的时候会用到</span></div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file'</span>, <span class="string">'email'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">"django"</span>)    <span class="comment"># 在setting中loggers里面的名字</span></div><div class="line">logger.info(<span class="string">"some messages"</span>)</div></pre></td></tr></table></figure>
<h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><ol>
<li><p>装一下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install redis</div></pre></td></tr></table></figure>
</li>
<li><p>用一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line">pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</div><div class="line">r = redis.Redis(connection_pool=pool)</div></pre></td></tr></table></figure>
</li>
<li><p>具体操作参考连接</p>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.cnblogs.com<span class="regexp">/melonjiang/</span>p<span class="regexp">/5342505.html</span></div></pre></td></tr></table></figure>
<h3 id="序列化和遍历QuerySet"><a href="#序列化和遍历QuerySet" class="headerlink" title="序列化和遍历QuerySet"></a>序列化和遍历QuerySet</h3><p><strong>Object神tm不能遍历，要先序列化，再遍历插入数组（写到Base类里面复用）</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRank</span><span class="params">(request)</span>:</span></div><div class="line">    info = User.objects.order_by(<span class="string">'-counts'</span>)</div><div class="line">    info = serializers.serialize(<span class="string">"json"</span>, info)[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line">    info = eval(info)           <span class="comment"># 换成字典 </span></div><div class="line"></div><div class="line">    data = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info)):       <span class="comment"># 遍历字典 插入数组</span></div><div class="line">        data.append(info[i][<span class="string">'fields'</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于Django实际开发的一些问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Admin</title>
    <link href="https://nancelglap.github.io/2018/03/25/Django-Admin/"/>
    <id>https://nancelglap.github.io/2018/03/25/Django-Admin/</id>
    <published>2018-03-25T02:37:02.000Z</published>
    <updated>2018-03-25T03:23:00.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Django Admin</p>
</blockquote>
<a id="more"></a>
<h3 id="自定义后台表单显示"><a href="#自定义后台表单显示" class="headerlink" title="自定义后台表单显示"></a>自定义后台表单显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># admin.py</span></div><div class="line"></div><div class="line"><span class="comment"># 基本显示</span></div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Poll</div><div class="line">admin.site.register(Poll)</div><div class="line"></div><div class="line"><span class="comment"># 改变表单顺序</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    fields = [<span class="string">'pub_date'</span>, <span class="string">'question'</span>]</div><div class="line"></div><div class="line">admin.site.register(Poll, PollAdmin)</div><div class="line"></div><div class="line"><span class="comment"># 自己定义模块</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    fieldsets = [</div><div class="line">        (<span class="keyword">None</span>,               &#123;<span class="string">'fields'</span>: [<span class="string">'question'</span>]&#125;),</div><div class="line">        (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>]&#125;),</div><div class="line">    ]</div><div class="line"></div><div class="line">admin.site.register(Poll, PollAdmin)</div></pre></td></tr></table></figure>
<h3 id="添加关联对象"><a href="#添加关联对象" class="headerlink" title="添加关联对象"></a>添加关联对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Choice</div><div class="line"></div><div class="line">admin.site.register(Choice)</div></pre></td></tr></table></figure>
<h3 id="显示字段"><a href="#显示字段" class="headerlink" title="显示字段"></a>显示字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    list_display = (<span class="string">'field1'</span>, <span class="string">'field2'</span>)</div></pre></td></tr></table></figure>
<h3 id="增加时间筛选"><a href="#增加时间筛选" class="headerlink" title="增加时间筛选"></a>增加时间筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    list_filter = [<span class="string">'pub_date'</span>]</div></pre></td></tr></table></figure>
<h3 id="增加搜索功能"><a href="#增加搜索功能" class="headerlink" title="增加搜索功能"></a>增加搜索功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    search_fields = [<span class="string">'question'</span>]</div></pre></td></tr></table></figure>
<h3 id="增加date-hierarchy"><a href="#增加date-hierarchy" class="headerlink" title="增加date hierarchy"></a>增加date hierarchy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    date_hierarchy = <span class="string">'pub_date'</span></div></pre></td></tr></table></figure>
<h3 id="自定义后台界面"><a href="#自定义后台界面" class="headerlink" title="自定义后台界面"></a>自定义后台界面</h3><p>1.复制源代码<code>django/contrib/admin/templates/admim/**.html</code>到项目根目录的<code>/templates/admin</code>（自己创建）修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> python -c "import sys;sys.path=sys.path[1:];import django;print(django.__path__)"</div></pre></td></tr></table></figure></p>
<p>2.给项目增加模板路径，修改<code>setting.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TEMPLATES = [</div><div class="line">    &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">'DIRS'</span>: [</div><div class="line">            BASE_DIR + <span class="string">'/templates'</span>,    <span class="comment"># 加上这一行</span></div><div class="line">        ],</div><div class="line">        ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Django Admin&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/Django/"/>
    
      <category term="admin" scheme="https://nancelglap.github.io/categories/Django/admin/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django QuerySet</title>
    <link href="https://nancelglap.github.io/2018/03/23/django/"/>
    <id>https://nancelglap.github.io/2018/03/23/django/</id>
    <published>2018-03-23T03:03:51.000Z</published>
    <updated>2018-04-07T02:04:18.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Django QuerySet</p>
</blockquote>
<a id="more"></a>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><ol>
<li>编辑<code>setting.py</code><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'databaseName'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'userName'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.创建和迁移数据库到项目<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations</span></div><div class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></div><div class="line"><span class="meta"></span></div><div class="line">$<span class="bash"> python manage.py createsuperuser</span></div></pre></td></tr></table></figure></p>
<p>3.运行测试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver 0.0.0.0:8000</span></div></pre></td></tr></table></figure></p>
<p>4.访问<code>127.0.0.0:8000/admin</code></p>
<h3 id="创建应用以及创建表和model"><a href="#创建应用以及创建表和model" class="headerlink" title="创建应用以及创建表和model"></a>创建应用以及创建表和model</h3><p>1.创建应用，以下命令会创建一个polls目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp polls</span></div></pre></td></tr></table></figure></p>
<p>2.修改<code>models.py</code>，创建表</p>
<p>3.编辑<code>setting.py</code>，在<code>INSTALL_APPS</code>中加入之前<code>startapp</code>的应用名<code>polls</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALL_APPS = (</div><div class="line">    ...,</div><div class="line">    <span class="string">'polls'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>4.运行<code>migrate</code>生成表，以下生成<code>prefix_className</code>的表，className为model中声明的类名<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations prefix</span></div><div class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></div></pre></td></tr></table></figure></p>
<h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><ol>
<li><code>setting.py</code>的<code>USE_TZ</code>设为<code>False</code></li>
<li><code>setting.py</code>的<code>TIME_ZONE</code>设为<code>Asia/Shanghai</code></li>
</ol>
<h3 id="给model实例编写方法"><a href="#给model实例编写方法" class="headerlink" title="给model实例编写方法"></a>给model实例编写方法</h3><p>1.在<code>models.py</code>中编写方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class Poll(models.Model):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>2.在<code>shell</code>交互中示例<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python manage<span class="selector-class">.py</span> shell</div><div class="line"></div><div class="line">&gt;&gt;&gt; from polls<span class="selector-class">.models</span> import Poll</div><div class="line">&gt;&gt;&gt; <span class="selector-tag">p</span> = Poll<span class="selector-class">.objects</span><span class="selector-class">.get</span>(pk=<span class="number">1</span>)</div><div class="line">&gt;&gt;&gt; <span class="selector-tag">p</span>.was_published_recently()</div><div class="line">True</div></pre></td></tr></table></figure></p>
<h3 id="model的关联"><a href="#model的关联" class="headerlink" title="model的关联"></a>model的关联</h3><p>1.如果在model中创建了<code>ForeignKey</code>的关联，可以使用<code>QuerySet</code>增加关联<br>2.如果有<code>ForeignKey</code>字段，自动给数据库增加为<code>关联model_id</code>的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poll</span><span class="params">(models.Model)</span>:</span></div><div class="line">    question = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</div><div class="line">    ...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    poll = models.ForeignKey(Poll)</div><div class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p = Poll.objects.get(pk=1)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.create(choice_text = <span class="string">'Not much'</span>, votes = 0)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.create(choice_text = <span class="string">'The sky'</span>, votes = 0)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.all()</span></div><div class="line">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;]</div></pre></td></tr></table></figure>
<h3 id="操作queryset获取数据库信息"><a href="#操作queryset获取数据库信息" class="headerlink" title="操作queryset获取数据库信息"></a>操作queryset获取数据库信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash">&gt;&gt; from polls.models import Poll</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.utils import timezone</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; current_year = timezone.now().year</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p = Poll.objects.filter(pub_date__year=current_year)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q = Poll.objects.filter(question__startswith=<span class="string">'what'</span>)</span></div></pre></td></tr></table></figure>
<p>筛选所有相应时间的集合<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Poll<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(pub_date__lte=<span class="string">"2018-03-24 08:00:10"</span>).values()</div></pre></td></tr></table></figure></p>
<h3 id="格式化时间输出"><a href="#格式化时间输出" class="headerlink" title="格式化时间输出"></a>格式化时间输出</h3><p>如果输出的<code>datetime</code>时间后面有小数点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Poll.objects.get(pk=<span class="number">1</span>).values()[<span class="string">'pub_date'</span>].strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="queryset查询"><a href="#queryset查询" class="headerlink" title="queryset查询"></a>queryset查询</h3><ol>
<li><p>计数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'lzy'</span>).count()</div></pre></td></tr></table></figure>
</li>
<li><p>查询大于:<code>field__gt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__gt = <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询小于:<code>field__lt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__lt = <span class="number">10</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询大于且小于:<code>field__lt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__lt = <span class="number">10</span>, id__gt = <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询符合数组条件:<code>field__in</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__in=[<span class="number">11</span>, <span class="number">22</span> ,<span class="number">33</span>])    <span class="comment"># 获取id等于11，22，33数据</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询不符合数组条件:<code>field__in</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.exclude(id__in=[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>查询字段包含:<code>field__contains</code>,<code>icontains</code>大小写不敏感</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.modelName.objects.filter(name__contains=<span class="string">"ven"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询指定范围:<code>field__range</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__range=[<span class="number">1</span>, <span class="number">5</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>查询按顺序排列:<code>queryset.order_by()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).order_by(<span class="string">'id'</span>)  <span class="comment"># asc 从小到大</span></div><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).order_by(<span class="string">'-id'</span>)  <span class="comment"># desc 从大到小</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询限制:分片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.all()[<span class="number">10</span>:<span class="number">20</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="queryset增，删，改"><a href="#queryset增，删，改" class="headerlink" title="queryset增，删，改"></a>queryset增，删，改</h3><blockquote>
<p>增</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1</span></div><div class="line">models.modelName.create(field1=<span class="string">'content'</span>, field2=<span class="string">'content2'</span>)    </div><div class="line"></div><div class="line"><span class="comment"># 2</span></div><div class="line">obj = models.modelName(field1=<span class="string">'content'</span>, field2=<span class="string">'content2'</span>)</div><div class="line">obj.save()</div><div class="line"></div><div class="line"><span class="comment"># 3</span></div><div class="line">dic = &#123;<span class="string">'field1'</span>: <span class="string">'xx'</span>, <span class="string">'filed2'</span>: <span class="string">'00'</span>&#125;</div><div class="line">models.modelName.objects.create(**dic)</div></pre></td></tr></table></figure>
<blockquote>
<p>删</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).delete()</div></pre></td></tr></table></figure>
<blockquote>
<p>改</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).update(filed = <span class="string">'content'</span>)</div><div class="line"></div><div class="line">obj = models.modelName.objects.get(id=<span class="number">1</span>)</div><div class="line">obj.field = <span class="string">'content'</span></div><div class="line">obj.save()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Django QuerySet&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/python/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>IoC和DI</title>
    <link href="https://nancelglap.github.io/2018/03/18/IoC%E5%92%8CDI/"/>
    <id>https://nancelglap.github.io/2018/03/18/IoC和DI/</id>
    <published>2018-03-18T02:32:33.000Z</published>
    <updated>2018-03-18T02:37:33.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>控制反转和依赖注入容器</p>
</blockquote>
<a id="more"></a>
<h3 id="IoC（控制反转）"><a href="#IoC（控制反转）" class="headerlink" title="IoC（控制反转）"></a>IoC（控制反转）</h3><ul>
<li>当类里面需要实现另一个类的时候，将最高层的类不变，其中的类去实现一个接口<code>interface</code></li>
<li>这样最高层的类就不再依赖于特定的类，而是依赖抽象的接口</li>
<li>以下代码同样可用<code>__construct()</code>方法改写</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 高层</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@var</span> IDeviceWriter</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $writer;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 可改为__construct()方法</div><div class="line">     * <span class="doctag">@param</span> IDeviceWriter $writer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWriter</span><span class="params">($writer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;writer = $writer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;writer-&gt;saveToDevice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 低层，软盘存储</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FloppyWriter</span> <span class="keyword">implements</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 低层，USB盘存储</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsbDiskWriter</span> <span class="keyword">implements</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$biz = <span class="keyword">new</span> Business();</div><div class="line">$biz-&gt;setWriter(<span class="keyword">new</span> UsbDiskWriter());</div><div class="line">$biz-&gt;save(); <span class="comment">// UsbDiskWriter::saveToDevice</span></div><div class="line"></div><div class="line">$biz-&gt;setWriter(<span class="keyword">new</span> FloppyWriter());</div><div class="line">$biz-&gt;save(); <span class="comment">// FloppyWriter::saveToDevice</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;控制反转和依赖注入容器&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="OOP" scheme="https://nancelglap.github.io/tags/OOP/"/>
    
      <category term="php" scheme="https://nancelglap.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>tornado</title>
    <link href="https://nancelglap.github.io/2018/03/06/tornado/"/>
    <id>https://nancelglap.github.io/2018/03/06/tornado/</id>
    <published>2018-03-06T01:47:07.000Z</published>
    <updated>2018-03-08T02:39:31.325Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与tornado相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>initialize()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"><span class="keyword">import</span> tornado.web</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, db)</span>:</span></div><div class="line">        self.db = db</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        story_id = self.get_argument(<span class="string">"story_id"</span>)</div><div class="line">        self.write(<span class="string">"story_id: %s, and the db is %s"</span> % (story_id, self.db))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = tornado.web.Application([</div><div class="line">        (<span class="string">r"/"</span>, MainHandler, dict(db = <span class="string">"mysql"</span>))</div><div class="line">    ])</div><div class="line">    app.listen(<span class="number">8888</span>)</div><div class="line">    tornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure>
<ul>
<li>实例<code>Application</code>中第三个参数将<code>dict</code>里的参数传给<code>initialize</code>方法，访问相应url时自动调用<code>initialize</code>方法</li>
</ul>
<blockquote>
<p>prepare()</p>
</blockquote>
<ul>
<li>在每个请求的最开始被调用，在<code>get/post</code>等方法之前</li>
</ul>
<blockquote>
<p>on_finish()</p>
</blockquote>
<ul>
<li>在一个请求结束后被调用，复写用来<code>执行清理，日志记录</code>等</li>
<li>响应被送到客户端后才调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与tornado相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="framework" scheme="https://nancelglap.github.io/categories/framework/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="tornado" scheme="https://nancelglap.github.io/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>composer自动加载</title>
    <link href="https://nancelglap.github.io/2018/01/30/composer%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/"/>
    <id>https://nancelglap.github.io/2018/01/30/composer自动加载/</id>
    <published>2018-01-30T03:28:05.000Z</published>
    <updated>2018-01-30T03:55:35.825Z</updated>
    
    <content type="html"><![CDATA[<p>如果<code>psr-4</code>规定如下（自动加载/project/app下的文件）</p>
<ul>
<li><code>&quot;App\\&quot;: &quot;app/&quot;</code>只负责自动加载到<code>/project/app/</code>，并且被自动加载的文件要<code>在这个文件夹下</code></li>
<li>如果要在规定的文件夹子文件夹下自动加载，命名空间要加上子文件夹名<code>/project/app/Hello</code></li>
<li>被加载文件名要与类名一致</li>
<li>引用被自动加载的文件时要new完整的namespace名<code>$hello = new App\Hello\hello();</code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"autoload": &#123;</div><div class="line">         "psr-4": &#123;</div><div class="line">             "App\\": "app/"</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>用于自动加载的类的文件名和类名要一样</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// haha.php </span></div><div class="line"><span class="comment">// 存在/project/app/Hello这个文件夹</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Hello</span>;</div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">haha</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"this is hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>用自动加载的文件new相应类时，使用命名空间相同的名称</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// index.php （项目根目录）</span></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/vendor/autoload.php'</span>;</div><div class="line"></div><div class="line">$hello = <span class="keyword">new</span> App\Hello\haha();</div><div class="line">$hello-&gt;index();        <span class="comment">// 输出 this is hello</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果&lt;code&gt;psr-4&lt;/code&gt;规定如下（自动加载/project/app下的文件）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;App\\&amp;quot;: &amp;quot;app/&amp;quot;&lt;/code&gt;只负责自动加载到&lt;code&gt;/project/app/&lt;/
    
    </summary>
    
    
      <category term="composer" scheme="https://nancelglap.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>mac/linux 命令</title>
    <link href="https://nancelglap.github.io/2018/01/12/mac-linux-%E5%91%BD%E4%BB%A4/"/>
    <id>https://nancelglap.github.io/2018/01/12/mac-linux-命令/</id>
    <published>2018-01-12T07:18:33.000Z</published>
    <updated>2018-04-08T01:53:46.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>mac/linux 终端命令</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>mac查看端口占用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> lsof -i:端口号</span></div></pre></td></tr></table></figure>
<blockquote>
<p>开redis</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> redis-server</span></div></pre></td></tr></table></figure>
<blockquote>
<p>开php-fpm</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> php-fpm</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;mac/linux 终端命令&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://nancelglap.github.io/tags/linux/"/>
    
      <category term="terminal" scheme="https://nancelglap.github.io/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>mac nginx</title>
    <link href="https://nancelglap.github.io/2018/01/12/mac-nginx/"/>
    <id>https://nancelglap.github.io/2018/01/12/mac-nginx/</id>
    <published>2018-01-12T01:30:49.000Z</published>
    <updated>2018-01-12T03:48:34.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>配置文件路径</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx</div></pre></td></tr></table></figure>
<blockquote>
<p>根目录路径</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/var/</span>www</div></pre></td></tr></table></figure>
<blockquote>
<p>配置下载文件</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line">    <span class="attribute">if</span> (<span class="variable">$request_filename</span> <span class="regexp">~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)</span>&#123;</div><div class="line">        <span class="attribute">add_header</span> Content-Disposition: <span class="string">'attachment;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</div><div class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;配置文件路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
    
      <category term="nginx" scheme="https://nancelglap.github.io/tags/nginx/"/>
    
      <category term="mac" scheme="https://nancelglap.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>mysql 命令相关</title>
    <link href="https://nancelglap.github.io/2017/11/08/mysql-%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2017/11/08/mysql-命令相关/</id>
    <published>2017-11-08T13:15:37.000Z</published>
    <updated>2018-04-25T12:44:21.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>mysql命令相关</p>
</blockquote>
<a id="more"></a>
<h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>找到<code>/etc/mysql/my.cnf</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"><span class="section"></span></div><div class="line">[mysql]</div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"><span class="section"></span></div><div class="line">[mysqld]</div><div class="line"><span class="attr">character-set-server</span>=utf8</div></pre></td></tr></table></figure></p>
<h3 id="设置可插入emoji"><a href="#设置可插入emoji" class="headerlink" title="设置可插入emoji"></a>设置可插入emoji</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER DATABASE 数据库名称 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</div><div class="line">ALTER TABLE 数据表名称 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div><div class="line">数据表名称 CHANGE 字段列名称 VARCHAR(n) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div></pre></td></tr></table></figure>
<h3 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table tableName alter column col set default value;</div></pre></td></tr></table></figure>
<h3 id="设为可空"><a href="#设为可空" class="headerlink" title="设为可空"></a>设为可空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table tableName modify col varchar(100) null;</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into tableName (col1, col2..) values (&apos;value1&apos;, &apos;value2&apos;...), [(&apos;value1&apos;, &apos;value2&apos;...)];</div></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update tableName set col = &apos;value&apos; where col = &apos;value&apos;;</div></pre></td></tr></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from tableName where col = &apos;value&apos;;</div></pre></td></tr></table></figure>
<h3 id="清空表-id从1开始"><a href="#清空表-id从1开始" class="headerlink" title="清空表(id从1开始)"></a>清空表(id从1开始)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truncate table tableName;</div></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE info(</div><div class="line">   id INT UNSIGNED AUTO_INCREMENT,</div><div class="line">   phone VARCHAR(20) NOT NULL,</div><div class="line">   name VARCHAR(20) NOT NULL,</div><div class="line">   sex VARCHAR(10) NOT NULL,</div><div class="line">   department VARCHAR(10) NOT NULL,</div><div class="line">   PRIMARY KEY (id)</div><div class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE tableName CHANGE oldName newName TYPE;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;mysql命令相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://nancelglap.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据备份和还原</title>
    <link href="https://nancelglap.github.io/2017/10/11/mysql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/"/>
    <id>https://nancelglap.github.io/2017/10/11/mysql数据备份和还原/</id>
    <published>2017-10-11T05:20:11.000Z</published>
    <updated>2017-10-17T00:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>数据备份</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysqldump -u root -p database table1 table2 ... &gt; ~/Documents/admin_menu.sql</span></div></pre></td></tr></table></figure>
<blockquote>
<p>数据还原</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p database &lt; ~/Documents/quanzi.sql</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
      <category term="mysql" scheme="https://nancelglap.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫</title>
    <link href="https://nancelglap.github.io/2017/09/29/python-%E7%88%AC%E8%99%AB/"/>
    <id>https://nancelglap.github.io/2017/09/29/python-爬虫/</id>
    <published>2017-09-29T02:40:45.000Z</published>
    <updated>2017-09-29T02:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 爬虫相关内容</p>
</blockquote>
<a id="more"></a>
<h3 id="用-urllib-库爬html页面"><a href="#用-urllib-库爬html页面" class="headerlink" title="用 urllib 库爬html页面"></a>用 urllib 库爬html页面</h3><hr>
<ul>
<li><code>urllib.request.urlencode(dict)</code> 将字典转换为 <code>key1=value1&amp;key2=value2</code> 的字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"> </div><div class="line">data=&#123;&#125;</div><div class="line">data[<span class="string">'wd'</span>]=<span class="string">'Nancelglap'</span></div><div class="line"> </div><div class="line">url_values=urllib.parse.urlencode(data)</div><div class="line">url=<span class="string">"http://www.baidu.com/s?"</span></div><div class="line">full_url=url+url_values</div><div class="line"> </div><div class="line">data=urllib.request.urlopen(full_url).read()</div><div class="line">data=data.decode(<span class="string">'UTF-8'</span>)</div><div class="line">print(data)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 爬虫相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="spider" scheme="https://nancelglap.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>python 连接mysql</title>
    <link href="https://nancelglap.github.io/2017/09/26/python-%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>https://nancelglap.github.io/2017/09/26/python-连接mysql/</id>
    <published>2017-09-26T12:52:41.000Z</published>
    <updated>2017-09-26T14:13:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装MySQL驱动"><a href="#安装MySQL驱动" class="headerlink" title="安装MySQL驱动"></a>安装MySQL驱动</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install mysql-connector==2.1.4</span></div></pre></td></tr></table></figure>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><hr>
<ul>
<li>先 <code>connect</code>，后创建 <code>cursor</code>，再用 <code>cursor.execute(sql)</code> 执行增删改查</li>
<li>只要创建了 <code>conn</code> 和 <code>cursor</code> 就要调用 <code>conn.close()</code>, <code>cursor.close()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mysql.connector</div><div class="line"></div><div class="line">conn = mysq.connector.connect(user=<span class="string">'root'</span>, password=<span class="string">'password'</span>, database=<span class="string">'test'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 创建表</span></div><div class="line">cursor.execute(<span class="string">'CREATE TABLE user (id varchar(20) primary key, name varchar(20))'</span>)</div><div class="line"><span class="comment"># 插入记录</span></div><div class="line">cursor.execute(<span class="string">'INSERT INTO user (id, name) values (%s, %s)'</span>, [<span class="string">'1'</span>, <span class="string">'Nancelglap'</span>])</div><div class="line"><span class="comment"># 影响的行数</span></div><div class="line">row = cursor.rowcount</div><div class="line"></div><div class="line"><span class="comment"># 提交事务:</span></div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line"></div><div class="line"><span class="comment"># 运行查询:</span></div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT * FROM user WHERE id = %s'</span>, (<span class="string">'1'</span>,))</div><div class="line"></div><div class="line"><span class="comment"># 拿到的是一个list，里面的元素是tuple</span></div><div class="line">values = cursor.fetchall()</div><div class="line"></div><div class="line"><span class="comment"># 关闭 Cursor 和 Connection</span></div><div class="line">cursor.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装MySQL驱动&quot;&gt;&lt;a href=&quot;#安装MySQL驱动&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL驱动&quot;&gt;&lt;/a&gt;安装MySQL驱动&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 内建模块</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-内建模块/</id>
    <published>2017-09-24T12:12:52.000Z</published>
    <updated>2017-09-26T07:49:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 内建模块使用</p>
</blockquote>
<a id="more"></a>
<h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><hr>
<blockquote>
<p>获取当前日期和时间</p>
<ul>
<li><code>atetime</code>是模块，<code>datetime</code>模块还包含一个<code>datetime类</code></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now() <span class="comment"># 获取当前datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(now)</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">07.198690</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(now))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>获取指定日期和时间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(dt)</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime 转换为 timestamp</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.timestamp() <span class="comment"># 把datetime转换为timestamp</span></div><div class="line"><span class="number">1429417200.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>timestamp 转换为 datetime </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">1429417200.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t))</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime加减</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(hours=<span class="number">10</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now - timedelta(days=<span class="number">1</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div></pre></td></tr></table></figure>
<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><hr>
<ul>
<li>可以用取属性的方法获得<code>tuple</code></li>
<li>它具备<code>tuple</code>的不变性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><hr>
<ul>
<li>实现插入和删除操作的<code>双向列表</code>，适合用于队列和栈</li>
<li>实现<code>append()</code>和<code>pop()</code>，还支持<code>appendleft()</code>和<code>popleft()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q</div><div class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</div></pre></td></tr></table></figure>
<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><hr>
<ul>
<li>使用<code>dict</code>时，如果希望引用的<code>key</code>不存在时，返回一个默认值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">'N/A'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] <span class="comment"># key1存在</span></div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key2'</span>] <span class="comment"># key2不存在，返回默认值</span></div><div class="line"><span class="string">'N/A'</span></div></pre></td></tr></table></figure>
<h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><hr>
<blockquote>
<p>Get</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line"><span class="keyword">with</span> request.urlopen(<span class="string">'https://api.douban.com/v2/book/2129650'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, data.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 以下为输出的数据</span></div><div class="line">Status: <span class="number">200</span> OK</div><div class="line">Server: nginx</div><div class="line">Date: Tue, <span class="number">26</span> May <span class="number">2015</span> <span class="number">10</span>:<span class="number">02</span>:<span class="number">27</span> GMT</div><div class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></div><div class="line">Content-Length: <span class="number">2049</span></div><div class="line">Connection: close</div><div class="line">Expires: Sun, <span class="number">1</span> Jan <span class="number">2006</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> GMT</div><div class="line">Pragma: no-cache</div><div class="line">Cache-Control: must-revalidate, no-cache, private</div><div class="line">X-DAE-Node: pidl1</div><div class="line">Data: &#123;<span class="string">"rating"</span>:&#123;<span class="string">"max"</span>:<span class="number">10</span>,<span class="string">"numRaters"</span>:<span class="number">16</span>,<span class="string">"average"</span>:<span class="string">"7.4"</span>,<span class="string">"min"</span>:<span class="number">0</span>&#125;,<span class="string">"subtitle"</span>:<span class="string">""</span>,<span class="string">"author"</span>:[<span class="string">"廖雪峰编著"</span>],<span class="string">"pubdate"</span>:<span class="string">"2007-6"</span>,<span class="string">"tags"</span>:[&#123;<span class="string">"count"</span>:<span class="number">20</span>,<span class="string">"name"</span>:<span class="string">"spring"</span>,<span class="string">"title"</span>:<span class="string">"spring"</span>&#125;...&#125;</div></pre></td></tr></table></figure>
<ul>
<li>往<code>Request</code>对象添加HTTP头部信息，将请求伪装成浏览器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line">req = request.Request(<span class="string">'http://www.douban.com/'</span>)</div><div class="line">req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span>)</div><div class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, f.read().decode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>Post</p>
</blockquote>
<ul>
<li>如果要发送<code>POST</code>请求，把参数<code>data</code>以bytes形式传入</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'模拟登陆微博'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 内建模块使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 正则表达式</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-正则表达式/</id>
    <published>2017-09-24T11:48:49.000Z</published>
    <updated>2017-09-24T12:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 正则表达式相关</p>
</blockquote>
<a id="more"></a>
<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><hr>
<ul>
<li><code>d{3}</code>表示匹配3个数字，例如<code>&#39;010&#39;</code></li>
<li><code>\d{3,8}</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code></li>
<li><code>*</code>表示任意个字符（包括0个），</li>
<li><code>+</code>表示至少一个字符</li>
<li><code>?</code>表示0个或1个字符</li>
<li><code>{n}</code>表示n个字符</li>
<li><code>{n,m}</code>表示n-m个字符</li>
<li><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头</li>
<li><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束</li>
</ul>
<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><hr>
<ul>
<li>用<code>r</code>参数可以不考虑转义问题</li>
<li><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match对象</code>，否则返回<code>None</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><hr>
<ul>
<li>按多个字符切割字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><hr>
<ul>
<li><code>m.group(index)</code></li>
<li>0永远为原字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div></pre></td></tr></table></figure>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><hr>
<ul>
<li>默认匹配尽可能多的字符串</li>
<li>以下例子<code>0*</code>只能匹配空字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure>
<ul>
<li>加一个<code>?</code>让<code>\d+</code>采用费贪婪匹配:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</div></pre></td></tr></table></figure>
<h3 id="预编译正则表达式"><a href="#预编译正则表达式" class="headerlink" title="预编译正则表达式"></a>预编译正则表达式</h3><hr>
<ul>
<li>如果要正则表达式要使用很多次，可以先编译</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-808'</span>).groups</div><div class="line">(<span class="string">'010'</span>, <span class="string">'808'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 正则表达式相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="Regular Expression" scheme="https://nancelglap.github.io/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>python 多进程和多线程</title>
    <link href="https://nancelglap.github.io/2017/09/21/python-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://nancelglap.github.io/2017/09/21/python-多进程和多线程/</id>
    <published>2017-09-21T02:16:08.000Z</published>
    <updated>2017-10-10T08:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 多进程和多线程编程</p>
</blockquote>
<a id="more"></a>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块 <code>Pcoess</code> 类代表一个进程对象</li>
<li><code>start()</code> 方法启动</li>
<li><code>join()</code> 方法等待子进程结束后再继续往下运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 子进程要执行的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># 代码运行时已经是子进程的pid</span></div><div class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 代码运行时是父进程的pid</span></div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</div><div class="line">    print(<span class="string">'Child process will start.'</span>)</div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'Child process end.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>进程池</code>：如果要启动大量子进程，用进程池批量创建子进程</li>
<li>一个<code>p.apply_async()</code>只能处理一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</div><div class="line">    start = time.time()</div><div class="line">    time.sleep(random.random() * <span class="number">3</span>)</div><div class="line">    end = time.time()</div><div class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Pool()      <span class="comment"># 默认大小为电脑CPU的核数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        p.apply_async(long_time_task, args=(i,))</div><div class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</div><div class="line">    p.close()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'All subprocesses done.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>subprocesses</code> 模块启动一个子进程，控制输入和输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在python代码运行 ls -a，和命令行直接运行的效果一样</span></div><div class="line"><span class="keyword">import</span> subprocesses</div><div class="line"></div><div class="line">r = subprocesses.call([<span class="string">'ls'</span>, <span class="string">'-a'</span>])</div><div class="line">print(<span class="string">'Exit code:'</span>, r)</div></pre></td></tr></table></figure>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块提供<code>Queue</code>、<code>Pipes</code>等方式交换数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="comment"># 写数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</div><div class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</div><div class="line">        q.put(value)</div><div class="line">        time.sleep(random.random())</div><div class="line"></div><div class="line"><span class="comment"># 读数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        value = q.get(<span class="keyword">True</span>)</div><div class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></div><div class="line">    q = Queue()</div><div class="line">    pw = Process(target=write, args=(q,))</div><div class="line">    pr = Process(target=read, args=(q,))</div><div class="line">    <span class="comment"># 启动子进程pw，写入:</span></div><div class="line">    pw.start()</div><div class="line">    <span class="comment"># 启动子进程pr，读取:</span></div><div class="line">    pr.start()</div><div class="line">    <span class="comment"># 等待pw结束:</span></div><div class="line">    pw.join()</div><div class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></div><div class="line">    pr.terminate()</div></pre></td></tr></table></figure>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><hr>
<ul>
<li>使用 <code>threading</code> 模块，启动一个线程就是创建一个<code>Thread</code>实例，然后调用<code>start()</code>开始执行</li>
<li><code>threading.current_thread()</code> 返回当前线程的实例</li>
<li>主线程实例的名字叫<code>MainThread</code>，子线程的命名可以作为创建<code>Thread</code>实例时第二个参数传入</li>
<li>如果子线程不起名字，默认命名为<code>Thread-1</code>，<code>Thread-2</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 新线程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div><div class="line"></div><div class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</div><div class="line">t.start()</div><div class="line">t.join()</div><div class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure>
<ul>
<li>高级语言的一条语句在CPU执行时是若干条语句，当两个线程同时运行进行数据交互时，不会按顺序执行，会造成结果错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 假定这是你的银行存款:</span></div><div class="line">balance = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 先存后取，结果应该为0:</span></div><div class="line">    <span class="keyword">global</span> balance</div><div class="line">    balance = balance + n</div><div class="line">    balance = balance - n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        change_it(n)</div><div class="line"></div><div class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</div><div class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t1.join()</div><div class="line">t2.join()</div><div class="line">print(balance)</div><div class="line"><span class="comment"># t1，t2交替执行，不一定是预期结果</span></div></pre></td></tr></table></figure>
<ul>
<li>用<code>threading.Lock()</code>解决</li>
<li>当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止</li>
<li>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">balance = <span class="number">0</span></div><div class="line">lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        <span class="comment"># 先要获取锁:</span></div><div class="line">        lock.acquire()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 放心地改吧:</span></div><div class="line">            change_it(n)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># 改完了一定要释放锁:</span></div><div class="line">            lock.release()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 多进程和多线程编程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="process" scheme="https://nancelglap.github.io/tags/process/"/>
    
  </entry>
  
  <entry>
    <title>python 错误处理</title>
    <link href="https://nancelglap.github.io/2017/09/19/python-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://nancelglap.github.io/2017/09/19/python-错误处理/</id>
    <published>2017-09-19T13:18:24.000Z</published>
    <updated>2017-09-22T03:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>try…except…finally</p>
</blockquote>
<ul>
<li>将可能出错的代码放在<code>try</code>中</li>
<li>可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语句</li>
<li>有错误执行完<code>except</code>后，<code>finally</code>内部的代码也会执行</li>
<li>先执行<code>else</code>中的，后执行<code>finally</code>中的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    print(<span class="string">'try...'</span>)</div><div class="line">    r = <span class="number">10</span> / int(<span class="string">'2'</span>)</div><div class="line">    print(<span class="string">'result:'</span>, r)</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'ValueError:'</span>, e)</div><div class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'ZeroDivisionError:'</span>, e)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'no error!'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'finally...'</span>)</div><div class="line">print(<span class="string">'END'</span>)</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>调用堆栈</p>
</blockquote>
<ul>
<li>如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">main()</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    main()</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> main</div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> bar</div><div class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / int(s)</div><div class="line">ZeroDivisionError: division by zero</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>记录错误</p>
</blockquote>
<ul>
<li>把错误记录记录到日志文件中</li>
<li><code>http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html</code></li>
</ul>
<hr>
<blockquote>
<p>抛出错误</p>
</blockquote>
<ul>
<li>自己定义错误（尽量使用内置的错误类型）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span><span class="params">(ValueError)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line">foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 最后追踪到自己定义的错误</span></div><div class="line">$ python3 err_raise.py </div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">__main__.FooError: invalid value: <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>另一种处理错误方式</li>
<li>虽然已打印错误，由于当前函数不知道应该怎么处理该错误，所以，继续往上抛，让顶层调用者去处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        foo(<span class="string">'0'</span>)</div><div class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'ValueError!'</span>)</div><div class="line">        <span class="keyword">raise</span></div><div class="line"></div><div class="line">bar()</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>调试</p>
</blockquote>
<ul>
<li><code>assert</code>断言：如果表达式不为<code>True</code>，<code>assert</code>语句本身就会抛出<code>AssertionError</code></li>
<li><code>-O</code> 参数可以关闭assert，<code>$python -O hello.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">assert</span> expression, <span class="string">'message'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AssertionError: n <span class="keyword">is</span> zero!</div></pre></td></tr></table></figure>
<blockquote>
<p>logging</p>
</blockquote>
<ul>
<li><code>logging</code> 通过配置不同 <code>level</code>控制输出不同级别的信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.basicConfig(level=logging.INFO)</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line">print(<span class="number">10</span> / n)</div><div class="line"></div><div class="line">$ python3 err.py</div><div class="line">INFO:root:n = <span class="number">0</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    print(<span class="number">10</span> / n)</div><div class="line">ZeroDivisionError: division by zero</div></pre></td></tr></table></figure>
<blockquote>
<p>pdb.set_trace() — 断点</p>
</blockquote>
<ul>
<li>在可能出错的地方放一个pdb.set_trace(),设置一个断点</li>
<li><code>p n</code> 命令查看变量<code>n</code>的值</li>
<li><code>c</code> 命令继续执行代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pdb</div><div class="line"></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">pdb.set_trace() <span class="comment"># 运行到这里会自动暂停</span></div><div class="line">print(<span class="number">10</span> / n)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;try…except…finally&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将可能出错的代码放在&lt;code&gt;try&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;可以在except语句块后面加一个else，当没有错误发生时，会自动执行else语
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="ERROR" scheme="https://nancelglap.github.io/tags/ERROR/"/>
    
  </entry>
  
  <entry>
    <title>python OOP</title>
    <link href="https://nancelglap.github.io/2017/09/19/python-OOP/"/>
    <id>https://nancelglap.github.io/2017/09/19/python-OOP/</id>
    <published>2017-09-19T13:15:01.000Z</published>
    <updated>2018-02-28T03:35:19.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python面向对象</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>面向对象</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.name, self.score))</div><div class="line"></div><div class="line">bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</div><div class="line">bart.print_score()</div><div class="line">lisa.print_score()</div></pre></td></tr></table></figure>
<p>允许实例变量绑定任何数据(会导致虽然是同一个类的不同实例，但拥有的变量名称可能不同)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">bart = Student();</div><div class="line">bart.age = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实例属性和类属性</p>
</blockquote>
<ul>
<li>定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</li>
<li>如果有类属性，删除实例属性同名属性后访问的是类属性<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    name = <span class="string">'Student'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建实例s</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 打印类的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></div><div class="line">Michael</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></div><div class="line">Student</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>给类、实例绑定方法</p>
</blockquote>
<p>给类绑定方法，绑定后所有实例都可以调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></div><div class="line"><span class="meta">... </span>    self.score = score</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.set_score = set_score</div></pre></td></tr></table></figure></p>
<p>给实例绑定方法，绑定后其他实例不能调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span> <span class="comment"># 定义一个函数作为实例方法</span></div><div class="line"><span class="meta">... </span>    self.age = age</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age <span class="comment"># 测试结果</span></div><div class="line"><span class="number">25</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2.set_age(<span class="number">25</span>) <span class="comment"># 尝试调用方法</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'set_age'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>鸭子类型</p>
</blockquote>
<ul>
<li>只要是类中有相应方法的类都可以被另一个函数调用</li>
<li>不关心这个对象的类型本身或是这个类继承，而是这个类是如何被使用的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">duck</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'I walk like a duck'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'i swim like a duck'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span><span class="params">()</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'this one walk like a duck'</span>) </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'this man swim like a duck'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">watch_duck</span><span class="params">(animal)</span>:</span></div><div class="line">  animal.walk()</div><div class="line">  animal.swim()</div><div class="line"></div><div class="line">small_duck = duck()</div><div class="line">watch_duck(small_duck)</div><div class="line"></div><div class="line">output &gt;&gt; </div><div class="line">I walk like a duck</div><div class="line">i swim like a duck</div><div class="line"></div><div class="line"></div><div class="line">duck_like_man = person()</div><div class="line">watch_duck(duck_like_man)</div><div class="line"></div><div class="line">output &gt;&gt; </div><div class="line">this one walk like a duck</div><div class="line">this man swim like a duck</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>slots</strong> 限制给实例绑定的变量</p>
</blockquote>
<p>仅对当前类的实例起作用，不对子类起作用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>@property</p>
</blockquote>
<ul>
<li>要封装函数的属性时，用作<code>getter</code>和<code>setter</code>函数的命名，减少函数调用时的代码量</li>
<li><code>getter</code>函数和<code>setter</code>函数必须为同名<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._birth</div><div class="line"></div><div class="line"><span class="meta">    @birth.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></div><div class="line">        self._birth = value</div><div class="line"></div><div class="line">    <span class="comment"># 只读函数</span></div><div class="line"><span class="meta">    @property   </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">2017</span> - self._birth</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.birth = <span class="number">1997</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.birth</div><div class="line"><span class="number">1997</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>str</strong> 和 <strong>repr</strong></p>
</blockquote>
<ul>
<li>当要打印对象的时候打印想要的信息</li>
<li><strong>str</strong> 用在print()</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line"><span class="meta">... </span>        self.name = name</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Student object (name: %s)'</span> % self.name</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student(<span class="string">'Michael'</span>))</div><div class="line">Student object (name: Michael)</div></pre></td></tr></table></figure>
<ul>
<li><strong>repr</strong> 用在直接敲变量，用在开发者调试</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Student object (name=%s)'</span> % self.name</div><div class="line">    __repr__ = __str__</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>iter</strong></p>
</blockquote>
<ul>
<li>将类用作<code>for in</code>循环，循环调用类里面的<code>__next__</code>方法拿到下一个循环的值，直到遇到<code>StopIteration</code>错误退出循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></div><div class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>getitem</strong></p>
</blockquote>
<ul>
<li>像list那样按照下标取元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></div><div class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</div><div class="line">            a, b = b, a + b</div><div class="line">        <span class="keyword">return</span> a</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">1</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">2</span>]</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">3</span>]</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>getattr</strong></p>
</blockquote>
<ul>
<li>只有在没有找到属性的时候才会调用</li>
<li>调用类中不存在的方法或者属性的时候返回相应的值</li>
<li>动态返回一个属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">99</span></div><div class="line"></div><div class="line"><span class="comment"># 当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</div><div class="line"><span class="string">'Michael'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</div><div class="line"><span class="number">99</span></div></pre></td></tr></table></figure>
<ul>
<li>链式生成api</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=<span class="string">''</span>)</span>:</span></div><div class="line">        self._path = path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, path)</span>:</span></div><div class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/%s'</span> % (self._path, path))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/users/%s'</span> % (self._path, name))</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Chain().ni.users(<span class="string">'lizhuoyi'</span>).list</div><div class="line">/ni/users/lizhuoyi/list</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>call</strong></p>
</blockquote>
<ul>
<li>在实例本身上调用函数（将实例视为函数调用）</li>
<li>少写一个函数，可以作为实例典型的函数调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</div><div class="line"></div><div class="line"><span class="comment"># 调用方法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s() <span class="comment"># self参数不要传入</span></div><div class="line">My name <span class="keyword">is</span> Michael.</div></pre></td></tr></table></figure>
<blockquote>
<p>枚举类</p>
</blockquote>
<ul>
<li>定义一系列常量</li>
<li>class不可变</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 定义方法一 自动给常量赋值，从1开始递增</div><div class="line">from enum import Enum</div><div class="line"></div><div class="line">Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))</div><div class="line"></div><div class="line"># 定义方法二 @unique装饰器帮助检查保证没有重复值</div><div class="line">from enum import Enum, unique</div><div class="line"></div><div class="line">@unique</div><div class="line">class Weekday(Enum):</div><div class="line">    Sun = 0 # Sun的value被设定为0</div><div class="line">    Mon = 1</div><div class="line">    Tue = 2</div><div class="line">    Wed = 3</div><div class="line">    Thu = 4</div><div class="line">    Fri = 5</div><div class="line">    Sat = 6</div><div class="line"></div><div class="line"># 取值调用</div><div class="line">&gt;&gt;&gt; for name, member in Month.__members__.items():</div><div class="line">&gt;&gt;&gt;    print(name, '=&gt;', member, ',', member.value)</div><div class="line">Jan =&gt; Mounth.Jan , 1</div><div class="line">...</div><div class="line"></div><div class="line"># 其他调用</div><div class="line">&gt;&gt;&gt; print(Weekday(1))</div><div class="line">Weekday.Mon</div><div class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</div><div class="line">2</div></pre></td></tr></table></figure>
<blockquote>
<p>type()</p>
</blockquote>
<ul>
<li>动态创建一个类</li>
<li>class本身就是<code>type</code></li>
<li>要创建一个class对象，<code>type(&#39;name&#39;, (object, []), dict(funcName = func, []))</code>函数依次传入3个参数：<br>1、class的名称<br>2、继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法<br>3、class的方法名称与函数绑定</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(self, name=<span class="string">'world'</span>)</span>:</span> <span class="comment"># 先定义函数</span></div><div class="line"><span class="meta">... </span>    print(<span class="string">'Hello, %s.'</span> % name)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn)) <span class="comment"># 创建Hello class</span></div></pre></td></tr></table></figure>
<blockquote>
<p>super</p>
</blockquote>
<ul>
<li>子类覆盖父类方法后调用父类方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">''</span>)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = <span class="string">''</span>, age = <span class="number">10</span>)</span>:</span></div><div class="line">        self.age = age</div><div class="line">        super(B, self).__init__(name)</div><div class="line"></div><div class="line">child = B(<span class="string">'Nancelglap'</span>, <span class="number">18</span>)</div><div class="line">print(<span class="string">'%d %s'</span> % (child.age , child.name))</div></pre></td></tr></table></figure>
<blockquote>
<p>Dict类</p>
</blockquote>
<ul>
<li>不仅能像<code>dict</code>用下标访问，还能用类的属性访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></div><div class="line">        super().__init__(**kw)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[key]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Dict' object has no attribute '%s'"</span> % key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self[key] = value</div></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dict(a=<span class="number">1</span>, b=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.a</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>多态，多态性</p>
</blockquote>
<p><code>一个类有多种形态</code></p>
<ul>
<li>一个类可以作为基类，被其他类继承使用</li>
<li>当一个方法需要调用此多态类方法的时候，传入任何类都可以完成相应操作</li>
<li>需要调用类共同的方法时候，但方法根据类不同给出不同的运行结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">getInfo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">"百度"</span>     <span class="comment"># 默认爬取百度信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIndex</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"curl请求"</span>+self.name)</div><div class="line">        <span class="comment"># curl请求self.name</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">getZhihuInfo</span><span class="params">(getInfo)</span>:</span>    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">"知乎"</span>     <span class="comment"># 爬知乎首页信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImg</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"curl请求知乎网页的图片信息"</span>)</div><div class="line">        <span class="comment"># curl请求知乎网页的图片信息</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">getSinaInfo</span><span class="params">(getInfo)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">"新浪"</span>      <span class="comment"># 爬新浪首页信息</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImg</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"curl请求新浪网页的图片信息"</span>)</div><div class="line">        <span class="comment"># curl请求新浪网页的图片信息</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(web)</span>:</span>       <span class="comment"># 根据传入的类的属性name，获取相应的index首页信息</span></div><div class="line">    web.getIndex()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWebImg</span><span class="params">(web)</span>:</span>     <span class="comment"># 多态性，不关心传入类的关系，只要这个实例有getImg这个方法就做出相应应答</span></div><div class="line">    web.getImg()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    getPage(getZhihuInfo())     <span class="comment"># 传入要爬信息</span></div><div class="line">    getPage(getSinaInfo())</div><div class="line">    getWebImg(getZhihuInfo())</div><div class="line">    getWebImg(getSinaInfo())</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">输出结果</div><div class="line">curl请求知乎</div><div class="line">curl请求新浪</div><div class="line">curl请求知乎网页的图片信息</div><div class="line">curl请求新浪网页的图片信息</div><div class="line">"""</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python面向对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="OOP" scheme="https://nancelglap.github.io/tags/OOP/"/>
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pythonic</title>
    <link href="https://nancelglap.github.io/2017/09/14/pythonic/"/>
    <id>https://nancelglap.github.io/2017/09/14/pythonic/</id>
    <published>2017-09-14T02:16:44.000Z</published>
    <updated>2017-12-05T12:48:53.778Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何写出 pythonic 代码</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>1、传参</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int(<span class="string">'123'</span>, base = <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># 等于以下</span></div><div class="line">kw = &#123;<span class="string">'base'</span>: <span class="number">2</span>&#125;</div><div class="line">int(<span class="string">'123'</span>, **kw)</div></pre></td></tr></table></figure>
<blockquote>
<p>2、python实现switch语法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    ...</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></div><div class="line">    ...</div><div class="line"></div><div class="line">dicts = &#123;</div><div class="line">    <span class="string">'A'</span>: func1,</div><div class="line">    <span class="string">'B'</span>: func2,</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">func = dicts[value]</div><div class="line">func();</div></pre></td></tr></table></figure>
<blockquote>
<p>3、enumerate</p>
</blockquote>
<ul>
<li>用于取列表索引还有内容</li>
<li>第二个参数表示索引的开始数字</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L = [i * i <span class="keyword">for</span> i range(<span class="number">5</span>)]</div><div class="line"><span class="keyword">for</span> index, data <span class="keyword">in</span> enumberate(L, <span class="number">1</span>):    </div><div class="line">    print(index, data)</div></pre></td></tr></table></figure>
<blockquote>
<p>4、文件的x模式</p>
</blockquote>
<ul>
<li>如果要写的目标文件已经存在就不写，不存在则写入内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'somefile'</span>, <span class="string">'xt'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(<span class="string">'Hello\n'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>5、大小判断条件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># GOOD</span></div><div class="line"><span class="keyword">if</span> a&gt;b&gt;c:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># BAD</span></div><div class="line"><span class="keyword">if</span> a&gt;b <span class="keyword">and</span> b&gt;c:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<blockquote>
<p>6、按次数循环增加字符</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输入一个数字，不够八位前面补0</span></div><div class="line">num = input(<span class="string">"please enter a number"</span>)</div><div class="line">lack = <span class="number">8</span>-len(num)</div><div class="line">out = <span class="string">'0'</span>*lack+num</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何写出 pythonic 代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>配置七牛云</title>
    <link href="https://nancelglap.github.io/2017/09/05/%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    <id>https://nancelglap.github.io/2017/09/05/配置七牛云/</id>
    <published>2017-09-05T09:13:01.000Z</published>
    <updated>2017-09-05T09:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>laravel 配置七牛云</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>composer.json 或 composer require zgldh/qiniu-laravel-storage&gt; </p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"zgldh/qiniu-laravel-storage"</span>: <span class="string">"^0.8.1"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/app.php</p>
</blockquote>
<hr>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zgldh\QiniuStorage\QiniuFilesystemServiceProvider::<span class="class"><span class="keyword">class</span>,</span></div></pre></td></tr></table></figure>
<blockquote>
<p>config/filesystems.php</p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'qiniu'</span> =&gt; [</div><div class="line">            <span class="string">'driver'</span>  =&gt; <span class="string">'qiniu'</span>,</div><div class="line">            <span class="string">'domains'</span> =&gt; [</div><div class="line">                <span class="string">'default'</span>   =&gt; <span class="string">'ovmscef5i.bkt.clouddn.com'</span>, <span class="comment">//你的七牛域名</span></div><div class="line">                <span class="string">'https'</span>     =&gt; <span class="string">''</span>,         <span class="comment">//你的HTTPS域名</span></div><div class="line">                <span class="string">'custom'</span>    =&gt; <span class="string">''</span>,     <span class="comment">//你的自定义域名</span></div><div class="line">             ],</div><div class="line">            <span class="string">'access_key'</span>=&gt; <span class="string">'lqXMMY6JYjGEM-x0WgoJ84i35fc3BW2sMtOZXyzM'</span>,  <span class="comment">//AccessKey</span></div><div class="line">            <span class="string">'secret_key'</span>=&gt; <span class="string">'zRMFaIJ44i2KQZrN32GxWpO0_1ceU1heUsMSuLlH'</span>,  <span class="comment">//SecretKey</span></div><div class="line">            <span class="string">'bucket'</span>    =&gt; <span class="string">'quanzi'</span>,  <span class="comment">//Bucket名字</span></div><div class="line">            <span class="string">'notify_url'</span>=&gt; <span class="string">''</span>,  <span class="comment">//持久化处理回调地址</span></div><div class="line">        ],</div></pre></td></tr></table></figure>
<blockquote>
<p>语法</p>
</blockquote>
<hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">zgldh</span>\<span class="title">QiniuStorage</span>\<span class="title">QiniuStorage</span>;</div><div class="line"></div><div class="line">$disk = QiniuStorage::disk(<span class="string">'qiniu'</span>);</div><div class="line">$disk-&gt;exists(<span class="string">'file.jpg'</span>);                      <span class="comment">//文件是否存在</span></div><div class="line">$disk-&gt;get(<span class="string">'file.jpg'</span>);                         <span class="comment">//获取文件内容</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,$contents);               <span class="comment">//上传文件</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,fopen(<span class="string">'path/to/big.jpg'</span>,<span class="string">'r+'</span>)); <span class="comment">//分段上传文件。建议大文件&gt;10Mb使用。</span></div><div class="line">$disk-&gt;prepend(<span class="string">'file.log'</span>, <span class="string">'Prepended Text'</span>);   <span class="comment">//附加内容到文件开头</span></div><div class="line">$disk-&gt;append(<span class="string">'file.log'</span>, <span class="string">'Appended Text'</span>);     <span class="comment">//附加内容到文件结尾</span></div><div class="line">$disk-&gt;delete(<span class="string">'file.jpg'</span>);                      <span class="comment">//删除文件</span></div><div class="line">$disk-&gt;delete([<span class="string">'file1.jpg'</span>, <span class="string">'file2.jpg'</span>]);</div><div class="line">$disk-&gt;copy(<span class="string">'old/file1.jpg'</span>, <span class="string">'new/file1.jpg'</span>);  <span class="comment">//复制文件到新的路径</span></div><div class="line">$disk-&gt;move(<span class="string">'old/file1.jpg'</span>, <span class="string">'new/file1.jpg'</span>);  <span class="comment">//移动文件到新的路径</span></div><div class="line">$size = $disk-&gt;size(<span class="string">'file1.jpg'</span>);               <span class="comment">//取得文件大小</span></div><div class="line">$time = $disk-&gt;lastModified(<span class="string">'file1.jpg'</span>);       <span class="comment">//取得最近修改时间 (UNIX)</span></div><div class="line">$files = $disk-&gt;files($directory);              <span class="comment">//取得目录下所有文件</span></div><div class="line">$files = $disk-&gt;allFiles($directory);               <span class="comment">//这个没实现。。。</span></div><div class="line">$directories = $disk-&gt;directories($directory);      <span class="comment">//这个也没实现。。。</span></div><div class="line">$directories = $disk-&gt;allDirectories($directory);   <span class="comment">//这个也没实现。。。</span></div><div class="line">$disk-&gt;makeDirectory($directory);               <span class="comment">//这个其实没有任何作用</span></div><div class="line">$disk-&gt;deleteDirectory($directory);             <span class="comment">//删除目录，包括目录下所有子文件子目录</span></div><div class="line"></div><div class="line">$disk-&gt;uploadToken();                           <span class="comment">//获取上传Token</span></div><div class="line">$disk-&gt;uploadToken(<span class="string">'file.jpg'</span>);                 <span class="comment">//获取上传Token</span></div><div class="line">    </div><div class="line">$disk-&gt;withUploadToken($token);                 <span class="comment">// 使用自定义的 uploadToken 进行上传，</span></div><div class="line">$disk-&gt;put(<span class="string">'file.jpg'</span>,$content);                <span class="comment">// 则本次的 put 操作，将使用上述的 $token 进行上传。</span></div><div class="line">                                                    <span class="comment">// 常用于自动触发持久化处理 https://github.com/qiniu/php-sdk/blob/master/examples/upload_and_pfop.php</span></div><div class="line">    </div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>);                     <span class="comment">//获取下载地址</span></div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>)</div><div class="line">         -&gt;setDownload(<span class="string">'foo.jpg'</span>);                      <span class="comment">//获取下载地址，文件名为 foo.jpg</span></div><div class="line">$disk-&gt;downloadUrl(<span class="string">'file.jpg'</span>, <span class="string">'https'</span>);            <span class="comment">//获取HTTPS下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>);              <span class="comment">//获取私有bucket下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg?attname=foo.jpg'</span>);         </div><div class="line">                                                                <span class="comment">//获取私有bucket下载地址，文件名为 foo.jpg</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>, <span class="string">'https'</span>);     <span class="comment">//获取私有bucket的HTTPS下载地址</span></div><div class="line">$disk-&gt;privateDownloadUrl(<span class="string">'file.jpg'</span>,</div><div class="line">                            [</div><div class="line">                                <span class="string">'domain'</span>=&gt;<span class="string">'https'</span>,</div><div class="line">                                <span class="string">'expires'</span>=&gt;<span class="number">3600</span></div><div class="line">                            ]);                         <span class="comment">//获取私有bucket的HTTPS下载地址。超时 3600 秒。</span></div><div class="line">$disk-&gt;avInfo(<span class="string">'file.mp3'</span>);                          <span class="comment">//获取多媒体文件信息</span></div><div class="line">$disk-&gt;imageInfo(<span class="string">'file.jpg'</span>);                       <span class="comment">//获取图片信息</span></div><div class="line">$disk-&gt;imageExif(<span class="string">'file.jpg'</span>);                       <span class="comment">//获取图片EXIF信息</span></div><div class="line">$disk-&gt;imagePreviewUrl(<span class="string">'file.jpg'</span>,<span class="string">'imageView2/0/w/100/h/200'</span>);                          <span class="comment">//获取图片预览URL</span></div><div class="line">$disk-&gt;privateImagePreviewUrl(<span class="string">'file.jpg'</span>,<span class="string">'imageView2/0/w/100/h/200'</span>);                   <span class="comment">//获取私有bucket图片预览URL</span></div><div class="line">$disk-&gt;verifyCallback(<span class="string">'application/x-www-form-urlencoded'</span>, $request-&gt;header(<span class="string">'Authorization'</span>), <span class="string">'callback url'</span>, $request-&gt;getContent());<span class="comment">//验证回调内容是否合法</span></div><div class="line">$disk-&gt;persistentFop(<span class="string">'file.flv'</span>,<span class="string">'avthumb/m3u8/segtime/40/vcodec/libx264/s/320x240'</span>);    <span class="comment">//执行持久化数据处理</span></div><div class="line">$disk-&gt;persistentFop(<span class="string">'file.flv'</span>,<span class="string">'fop'</span>,<span class="string">'队列名'</span>);    <span class="comment">//使用私有队列执行持久化数据处理</span></div><div class="line">$disk-&gt;persistentStatus($persistent_fop_id);        <span class="comment">//查看持久化数据处理的状态。</span></div><div class="line"></div><div class="line">$disk-&gt;fetch(<span class="string">'http://abc.com/foo.jpg'</span>, <span class="string">'bar.jpg'</span>); <span class="comment">//调用fetch将 foo.jpg 数据以 bar.jpg 的名字储存起来。</span></div><div class="line">$disk-&gt;qetag();     <span class="comment">//得到最后一次执行 put, copy, append 等写入操作后，得到的hash值。详见 https://github.com/qiniu/qetag</span></div><div class="line">$disk-&gt;lastReturn();<span class="comment">//得到最后一次执行 put, copy, append 等写入操作后，得到的返回值。</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;laravel 配置七牛云&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cloud" scheme="https://nancelglap.github.io/categories/cloud/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="qiniuyun" scheme="https://nancelglap.github.io/tags/qiniuyun/"/>
    
  </entry>
  
</feed>
