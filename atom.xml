<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nancelglap</title>
  <subtitle>不想正经</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nancelglap.github.io/"/>
  <updated>2019-01-22T14:18:53.000Z</updated>
  <id>https://nancelglap.github.io/</id>
  
  <author>
    <name>Nancelglap</name>
    <email>1037218107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA 数据结构</title>
    <link href="https://nancelglap.github.io/2018/08/01/JAVA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://nancelglap.github.io/2018/08/01/JAVA-数据结构/</id>
    <published>2018-08-01T01:29:00.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JAVA 数据结构相关</p>
</blockquote>
<a id="more"></a>
<h3 id="Enumeration-Vector"><a href="#Enumeration-Vector" class="headerlink" title="Enumeration Vector"></a>Enumeration Vector</h3><ul>
<li>Vector可以配合Enumeration枚举其中的所有元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Vector v = <span class="keyword">new</span> Vector(<span class="number">3</span>, <span class="number">2</span>);        <span class="comment">// 初始容量为3，每次扩容2</span></div><div class="line">        v.addElement(<span class="keyword">new</span> Integer(<span class="number">2</span>));  </div><div class="line">        v.addElement(<span class="number">9.4</span>);</div><div class="line">        v.addElement(<span class="string">"hello"</span>);</div><div class="line">        Enumeration items = v.elements();</div><div class="line">        <span class="keyword">while</span> (items.hasMoreElements()) &#123;</div><div class="line">            System.out.println(items.nextElement());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Vactor的<code>toArray(dataType[] a)</code>方法实际上是将Vector中的元素复制到一个名为a的数组中<strong>这样转化的前提是Vector中的元素全是dataType</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vector v = <span class="keyword">new</span> Vector(<span class="number">3</span>, <span class="number">2</span>);</div><div class="line">v.addElement(<span class="string">"hello"</span>);          <span class="comment">// 如果变为String之外的类型，在运行时抛出错误</span></div><div class="line">v.addElement(<span class="string">"hi"</span>);</div><div class="line">v.addElement(<span class="string">"lzy"</span>);</div><div class="line">String[] str = <span class="keyword">new</span> String(v.size());</div><div class="line">v.toArray(str);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">    System.out.println(str[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><ul>
<li><code>boolean empty()</code>：判空</li>
<li><code>Object peek()</code>：查看栈顶对象</li>
<li><code>Object pop()</code>：移除栈顶对象，并作为函数返回值</li>
<li><code>Object push(Object element)</code>：压入栈顶</li>
<li><code>int search(Object element)</code>：返回对象在栈中的位置</li>
<li>Stack变量可以直接输出</li>
</ul>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul>
<li>不支持并发</li>
<li>是一个维护<strong>Entry</strong>单向链表的数组<br>= 数组容量始终保持<strong>2^n</strong>，扩容后容量变成原来两倍</li>
</ul>
<blockquote>
<p>put 过程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果数组为空，初始化数组</span></div><div class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果 key 为 null， 放到 table[0] 中</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(value);</div><div class="line">    <span class="comment">// 求 key 的 hash 值</span></div><div class="line">    <span class="keyword">int</span> hash = hash(key);</div><div class="line">    <span class="comment">// 找到对应的数组下标</span></div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="comment">// 遍历对应下标的单向链表，看key是否已经存在，</span></div><div class="line">    <span class="comment">// 如果有，直接覆盖，put方法返回旧值结束</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 不存在重复的key，将此entry添加到链表中</span></div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>数组的初始化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// 保证数组大小一定是2的n次方。如new HashMap(10),初始化成大小为16</span></div><div class="line">    <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</div><div class="line">    <span class="comment">// 计算扩容阈值：capacity * loadFactor</span></div><div class="line">    threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</div><div class="line">    table = <span class="keyword">new</span> Entry[capacity];</div><div class="line">    initHashSeedAsNeeded(capacity); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加节点到链表中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果当前HashMap已经达到了阈值，并且新值要插入的数组位置已经有元素了，扩容</span></div><div class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</div><div class="line">        <span class="comment">// 扩容，后面会介绍一下</span></div><div class="line">        resize(<span class="number">2</span> * table.length);</div><div class="line">        <span class="comment">// 扩容以后，重新计算 hash 值</span></div><div class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</div><div class="line">        <span class="comment">// 重新计算扩容后的新的下标</span></div><div class="line">        bucketIndex = indexFor(hash, table.length);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 往下看</span></div><div class="line">    createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这个很简单，其实就是将新值放到链表的表头，然后 size++</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JAVA 数据结构相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://nancelglap.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 源码分析</title>
    <link href="https://nancelglap.github.io/2018/06/15/Laravel-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://nancelglap.github.io/2018/06/15/Laravel-源码分析/</id>
    <published>2018-06-15T15:14:03.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>对laravel源码的分析记录</p>
</blockquote>
<a id="more"></a>
<h2 id="服务容器"><a href="#服务容器" class="headerlink" title="服务容器"></a>服务容器</h2><hr>
<h2 id="laravel的启动加载过程"><a href="#laravel的启动加载过程" class="headerlink" title="laravel的启动加载过程"></a>laravel的启动加载过程</h2><ol>
<li><p><code>index.php</code>作为入口，先通过<code>bootstrap\app.php</code>实例化了<code>Illuminate\Foundation\Application</code>,然后实例调用了<strong>注册基本服务提供者、注册基本容器绑定、注册核心容器缩略名</strong>的函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($basePath) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders();</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Illuminate\Foundation\Application</code>实例绑定了两个<code>Kernel</code>类，还有<code>Exception</code>类</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</div><div class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</div><div class="line">);</div><div class="line"></div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Http\Kernel::class,</div><div class="line">    App\Http\Kernel::class          <span class="comment">// 这个类继承了Illuminate\Foundation\Http\Kernel</span></div><div class="line">);</div><div class="line"></div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Console\Kernel::class,</div><div class="line">    App\Console\Kernel::class</div><div class="line">);</div><div class="line"></div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</div><div class="line">    App\Exceptions\Handler::class</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>入口文件<code>index.php</code>通过<code>make</code>传入一个接口，实现之前绑定的实现它的类</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;                <span class="comment">// 返回Application的实例</span></div><div class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);      <span class="comment">// make之前绑定的App\Http\Kernel::class</span></div></pre></td></tr></table></figure>
</li>
<li><p>调用<code>Illuminate\Foundation\Http\Kernel</code>的handle方法，处理<code>Illuminate\Http\Request::capture()</code>返回的请求</p>
</li>
</ol>
<hr>
<h2 id="Model的where方法实现"><a href="#Model的where方法实现" class="headerlink" title="Model的where方法实现"></a>Model的where方法实现</h2><ul>
<li>Model类里面没有<code>where</code>方法，看源码知道，当调用<code>Model::where()</code>方法的时候，因为类中没有相应静态方法，所以会调用<code>__callStatic()</code>方法</li>
<li><code>__callStatic()</code>方法调用类实例的<code>where</code>方法，实例还是没有<code>where</code>方法，所以调用类中的<code>__call()</code>方法，返回一个处理过的<code>Illuminate\Database\Eloquent\Builder</code>实例，这个实例里面有<code>where</code>方法<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当调用类中没有的静态方法的时候调用此方法</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $parameters)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;$method(...$parameters);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当调用实例中没有的方法的时候调用此方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $parameters)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (in_array($method, [<span class="string">'increment'</span>, <span class="string">'decrement'</span>])) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$method(...$parameters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;newQuery()-&gt;$method(...$parameters);  <span class="comment">// 再往下查源码就知道返回的是EloquentBuilder</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Facade的实现"><a href="#Facade的实现" class="headerlink" title="Facade的实现"></a>Facade的实现</h2><ol>
<li><p>在<code>serviceProvider</code>文件中注册绑定容器</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 绑定名为cache实例</span></div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'cache'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheManager($app);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>写继承<code>Facade</code>的类，一般namespace为<code>Illuminate\Support\Facades</code>，继承的类必须重写<code>getFacadeAccessor</code>方法，且返回的字符串为在服务文件中绑定的名字</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> <span class="keyword">extends</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'cookie'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>config/app.php</code>中的<code>providers</code>数组中加入上述创建的服务提供者的类路径，在<code>aliases</code>中加入想要的Facade缩写名;因为每次laravel启动加载的时候都会自动加载<code>providers</code>和<code>aliases</code>里的内容</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span> =&gt; [</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    Illuminate\Cookie\CookieServiceProvider::class,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="string">'aliases'</span> =&gt; [</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="string">'Cookie'</span> =&gt; Illuminate\Support\Facades\Cookie::class,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">];</div></pre></td></tr></table></figure>
</li>
<li><p>当以后用Facade所写名调用方法的时候，就会调用Facade的<code>__callStatic</code>方法，这个方法返回当时绑定了的实例去调用相应的方法，像上述就返回了<code>CacheManager</code>这个实例，然后再调用这个实例相应的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $args)</span></span>&#123;</div><div class="line">    <span class="comment">// 这个是获取已经绑定了在容器中的实例</span></div><div class="line">    $instance = <span class="keyword">static</span>::getFacadeRoot();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (! $instance) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'A facade root has not been set.'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $instance-&gt;$method(...$args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeRoot</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 如果新建的Facade中没有重写getFacadeAccessor返回绑定的name的话就会抛出错误</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::resolveFacadeInstance(<span class="keyword">static</span>::getFacadeAccessor());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'Facade does not implement getFacadeAccessor method.'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveFacadeInstance</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 上面获取的字符串传过来，返回当时在服务提供者绑定的对应name的实例</span></div><div class="line">    <span class="comment">// 如果服务提供者绑定的时候return了实例，就直接返回实例</span></div><div class="line">    <span class="keyword">if</span> (is_object($name)) &#123;</div><div class="line">        <span class="keyword">return</span> $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$resolvedInstance[$name])) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name] = <span class="keyword">static</span>::$app[$name];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li>如果一个函数接受的参数是一个特定的类的话，那么当需要修改或者需要传类似的类的时候需要修改会很麻烦</li>
<li>将可能要传的类统一实现一个接口，函数接受的参数是这个接口，所有可以接受所有实现这个接口的类</li>
</ul>
<hr>
<h3 id="服务绑定容器"><a href="#服务绑定容器" class="headerlink" title="服务绑定容器"></a>服务绑定容器</h3><ul>
<li>通过创建容器实例，然后绑定接口和实例，当在某个地方需要使用接口的时候，自动使用绑定的实现类</li>
<li>如下的通过make接口创建实例也叫<code>单例绑定</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Http\Kernel::class,</div><div class="line">    App\Http\Kernel::class</div><div class="line">);</div><div class="line"></div><div class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);      <span class="comment">// 创建的是App\Http\Kernel::class这个实例</span></div><div class="line">$kernel-&gt;handle(</div><div class="line">    $request = Illuminate\Http\Request::capture()</div><div class="line">);          <span class="comment">// 调用的是App\Http\Kernel::class实例的方法</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="路由配置的加载"><a href="#路由配置的加载" class="headerlink" title="路由配置的加载"></a>路由配置的加载</h3><ul>
<li><p>当在<code>web.php</code>中写完路由后，每次laravel启动都会通过加载<code>RouteServiceProvider.php</code>加载路由里面的信息</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// web.php 中指定路由及处理的方法</span></div><div class="line">Route::post(<span class="string">'/createUser'</span>, <span class="string">'UserController@create'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>看<code>RouteServiceProvider.php</code>中使用的Facade是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>找到这个Facade的文件，发现它的注册名是<code>router</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the registered name of the component.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'router'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>找到<code>RoutingServiceProvider.php</code>，可以看到他绑定的<code>router</code>这个名调用是返回<code>Illuminate\Routing\Router</code>这个实例，由此可以确定，当在路由调用静态方法get、post等的时候是调用<code>Router.php</code>中的方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Routing\RoutingServiceProvider.php</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerRouter</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'router'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Router($app[<span class="string">'events'</span>], $app);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>再看回<code>RouteServiceProvider.php</code>的加载，它调用了静态方法<code>middleware</code>以及接下来的<code>namespace</code>和<code>group</code>方法，看到最终调用的<code>Router.php</code>，当调用没有的方法时调用了<code>__call()</code>方法，该方法返回一个<code>RouteRegister</code>实例并调用了<code>attribute</code>方法，由此可以知道上面的加载是把<code>middleware</code>、<code>namespace</code>加入路由属性，最后通过<code>routes/web.php</code>创建一个路由组</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RouterServiceProvider.php的加载(web.php)</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapWebRoutes</span><span class="params">()</span></span>&#123;</div><div class="line">    Route::middleware(<span class="string">'web'</span>)</div><div class="line">        -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</div><div class="line">        -&gt;group(base_path(<span class="string">'routes/web.php'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Router.php中的group方法及__call方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">group</span><span class="params">(array $attributes, $routes)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;updateGroupStack($attributes);</div><div class="line"></div><div class="line">    <span class="comment">// Once we have updated the group stack, we'll load the provided routes and</span></div><div class="line">    <span class="comment">// merge in the group's attributes when the routes are created. After we</span></div><div class="line">    <span class="comment">// have created the routes, we will pop the attributes off the stack.</span></div><div class="line">    <span class="keyword">$this</span>-&gt;loadRoutes($routes);</div><div class="line"></div><div class="line">    array_pop(<span class="keyword">$this</span>-&gt;groupStack);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $parameters)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">static</span>::hasMacro($method)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;macroCall($method, $parameters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> RouteRegistrar(<span class="keyword">$this</span>))-&gt;attribute($method, $parameters[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// RouterRegistrar.php中的attribute方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attribute</span><span class="params">($key, $value)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (! in_array($key, <span class="keyword">$this</span>-&gt;allowedAttributes)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"Attribute [&#123;$key&#125;] does not exist."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;attributes[array_get(<span class="keyword">$this</span>-&gt;aliases, $key, $key)] = $value;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="处理HTTP请求（综合上面laravel启动和路由配置加载）"><a href="#处理HTTP请求（综合上面laravel启动和路由配置加载）" class="headerlink" title="处理HTTP请求（综合上面laravel启动和路由配置加载）"></a>处理HTTP请求（综合上面laravel启动和路由配置加载）</h3><ul>
<li><p>当有HTTP请求的时候，通过laravel启动时的Kernel来处理</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$response = $kernel-&gt;handle(</div><div class="line">    $request = Illuminate\Http\Request::capture()</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>看到<code>handle</code>方法，执行了<code>sendRequestThroughRouter</code>方法并返回</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        $request-&gt;enableHttpMethodParameterOverride();</div><div class="line"></div><div class="line">        $response = <span class="keyword">$this</span>-&gt;sendRequestThroughRouter($request);</div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</div><div class="line"></div><div class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;reportException($e = <span class="keyword">new</span> FatalThrowableError($e));</div><div class="line"></div><div class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    event(<span class="keyword">new</span> Events\RequestHandled($request, $response));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $response;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>再看到<code>sendRequestThroughRouter</code>这个方法，他执行了<code>bootstrap</code>方法，该方法注册了所有服务提供者的引导类</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line"></div><div class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</div><div class="line">                -&gt;send($request)</div><div class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</div><div class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="comment">// 判断应用程序之前是否已被引导</span></div><div class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</div><div class="line">         <span class="comment">// 如何没有被引导，则引导程序注册应用程序需要被引导的数组</span></div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此数组声明在最前面，放到最后面方便看</span></div><div class="line"><span class="keyword">protected</span> $bootstrappers = [</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</div><div class="line">];</div></pre></td></tr></table></figure>
</li>
<li><p>上述通过<code>bootstrapWith</code>执行了各个引用类的方法（上面的数组），此时注册服务提供者在此完成，<code>registerConfiguredProviders</code>注册了所有在<code>app.php</code>中的服务提供者，包括上面提到的<code>RouteServiceProvider</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Bootstrap\RegisterProviders</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    $app-&gt;registerConfiguredProviders();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Foundation\Application</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;getCachedServicesPath()))</div><div class="line">                -&gt;load(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>由以上可知，启动laravel的时候会先注册RoutingServiceProvider，它绑定了以后要用到的Facade所返回的Router实例，以此提供get、post等方法；当laravel接受HTTP请求的时候，会注册RouteServiceProvider，这个类去加载在web.php或者api.php中的路由配置信息;然后通过Router类中的get、post等方法完成请求</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对laravel源码的分析记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础知识</title>
    <link href="https://nancelglap.github.io/2018/06/05/Java-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://nancelglap.github.io/2018/06/05/Java-基础知识/</id>
    <published>2018-06-05T11:38:54.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有关Java的基础知识</p>
</blockquote>
<a id="more"></a>
<h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><p><strong>byte</strong>:</p>
<ul>
<li>默认值是0</li>
<li>范围为<code>-128 ~ 127</code></li>
<li><strong>主要用于替代整数，节省空间</strong>，空间只有int的四分之一</li>
</ul>
<p><strong>short</strong>:</p>
<ul>
<li>范围<code>-32768 ~ 32767</code></li>
<li>默认为0</li>
<li>依然可以节省空间，只有int的二分之一</li>
</ul>
<p><strong>int</strong>:</p>
<ul>
<li>范围<code>-2147483648 ~ 2147483647</code></li>
<li>默认为0</li>
</ul>
<p><strong>long</strong>:</p>
<ul>
<li>默认值为0L</li>
<li><code>long a = 100000L</code></li>
</ul>
<p><strong>float</strong>:</p>
<ul>
<li>默认值是0.0f</li>
<li><code>float f1 = 234.5f</code></li>
</ul>
<p><strong>double</strong>:</p>
<ul>
<li>默认值是0.0d</li>
<li><code>double d1 = 123.4</code></li>
</ul>
<p><strong>booleam</strong>:</p>
<ul>
<li>true/flase</li>
</ul>
<p><strong>char</strong>:</p>
<ul>
<li>单一的16位Unicode字符</li>
<li>可以存储任何字符</li>
</ul>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p><strong>final</strong></p>
<ul>
<li><strong>final变量的对象引用不能改变，但是里面的值可以改变</strong></li>
<li>final方法可以被自类继承，但是不可以被修改</li>
<li>final类不能被继承</li>
</ul>
<p><strong>synchronized</strong></p>
<ul>
<li>被声明的方法同一时间只能被一个线程访问</li>
</ul>
<p><strong>volatile</strong></p>
<ul>
<li>修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值，当成员变量发生变化时，会强制线程将变化值写回共享内存</li>
<li>保证任何时刻，两个不同的线程总是看到某个成员变量的同一个值<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        active = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 代码</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        active = <span class="keyword">false</span>; <span class="comment">// 第二行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">如果是一个线程调用run()方法，另一个线程调用stop()方法，run中一旦拿到了active=true就一直循环，即使调用了stop()方法</div><div class="line">但是如果用volatile，当调用stop方法的时候就会去改共享内存中的active=false，run就会退出循环</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="强制类型转化"><a href="#强制类型转化" class="headerlink" title="强制类型转化"></a>强制类型转化</h2><ul>
<li>不能用php、python的类似<code>(int)&quot;12&quot;</code>转化<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> intA = <span class="number">10</span>;</div><div class="line">String strB = <span class="string">"12"</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> c = Integer.parseInt(strB);</div><div class="line">String d = String.valueOf(intA);</div><div class="line"><span class="keyword">boolean</span> b = <span class="keyword">new</span> Boolean(<span class="string">"true"</span>).booleanValue();</div><div class="line"></div><div class="line"><span class="keyword">double</span> d = <span class="number">42.5</span>;</div><div class="line">String doubleString = <span class="string">""</span> + d;</div><div class="line">String doubleString2 = Double.toString(d);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T extends Animal&gt; <span class="function"><span class="keyword">void</span> <span class="title">takeThing</span><span class="params">(ArrayList&lt;T&gt; list)</span>     <span class="comment">// 任何animal的子类的ArrayList都可以</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeThing</span><span class="params">(ArrayList&lt;Animal&gt; list)</span>           <span class="comment">// 只有animal的ArrayList可以，子类都不可以</span></div></pre></td></tr></table></figure>
<h2 id="拆箱和装箱"><a href="#拆箱和装箱" class="headerlink" title="拆箱和装箱"></a>拆箱和装箱</h2><ul>
<li><p>对于<code>Integer</code>对象而言，如果在<code>-128~127</code>之间，被装箱后会被放在内存中重用；如果超过范围，会重新分配内存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Integer i1 = <span class="number">100</span>;</div><div class="line">Integer i2 = <span class="number">100</span>;</div><div class="line">i1 == i2    <span class="comment">// true</span></div><div class="line">i1.equals(i2)       <span class="comment">// true</span></div><div class="line"></div><div class="line">Integer i3 = <span class="number">1000</span>;</div><div class="line">Integer i4 = <span class="number">1000</span>;</div><div class="line">i3 == i4        <span class="comment">// false</span></div><div class="line">i3.equals(i4)       <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>当整型赋值给<code>Integer</code>对象的时候，自动装箱；将<code>Integer</code>对象赋值给整型时，自动拆箱</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer i1 = <span class="number">128</span>;       <span class="comment">// 装箱，相当于 Integer.valueOf(128)</span></div><div class="line"><span class="keyword">int</span> t = i1;             <span class="comment">// 拆箱 相当于i1.intValue()</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span>[] name = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span>[] name = &#123;v0, v1, v2, v3, ..., vk&#125;;</div></pre></td></tr></table></figure>
<h2 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">double</span> element: myList) &#123;      <span class="comment">// 声明类型</span></div><div class="line">    <span class="comment">// TO-DO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组作为函数参数、数组作为函数的返回值"><a href="#数组作为函数参数、数组作为函数的返回值" class="headerlink" title="数组作为函数参数、数组作为函数的返回值"></a>数组作为函数参数、数组作为函数的返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">&#125;</div><div class="line">printArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] list) &#123;</div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[list.length];</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String s[][] = <span class="keyword">new</span> String[<span class="number">2</span>][];</div><div class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">2</span>];           <span class="comment">// 第一行是长度为2的String数组</span></div><div class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">3</span>];           <span class="comment">// 第二行是长度为3的String数组</span></div><div class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"Good"</span>);      <span class="comment">// 第一行第一列赋值Good</span></div><div class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> String(<span class="string">"hello"</span>);      <span class="comment">// 第二行第三列赋值hello</span></div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul>
<li>如果子类的构造方法没有显示调用<code>super()</code>，系统会自动隐式调用父类的无参构造函数，<strong>如果父类没有无参构造方法就会编译错误</strong></li>
<li>如果父类只有有参构造方法，子类必须显式调用该构造方法</li>
<li><code>this()</code>调用该类中形参相同的构造方法</li>
</ul>
<h2 id="引用类型和对象"><a href="#引用类型和对象" class="headerlink" title="引用类型和对象"></a>引用类型和对象</h2><ul>
<li>方法的调用根据引用类型来决定<strong>（可以将引用类型的子类赋值给引用类型）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Animal a = <span class="keyword">new</span> Animal();    <span class="comment">// Animal对象</span></div><div class="line">Animal b = <span class="keyword">new</span> Dog();       <span class="comment">// Dog对象</span></div><div class="line"></div><div class="line">a.move();       <span class="comment">// 执行Animal类的方法</span></div><div class="line">b.move();       <span class="comment">// 执行Dog类的方法</span></div><div class="line">b.bark();       <span class="comment">// 编译错误，引用类型Animal没有bark方法</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="多态的虚方法"><a href="#多态的虚方法" class="headerlink" title="多态的虚方法"></a>多态的虚方法</h2><ul>
<li>当引用为父类，对象为子类的时候，引用<strong>调用的方法会先去检查父类是否有此方法，没有编译错误；有的话调用</strong><code>子类的方法</code></li>
<li>编译的时候，编译器用引用的类的方法验证；运行的使用调用的是对象的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Salary是Employee的子类</span></div><div class="line">Salary s = <span class="keyword">new</span> Salary(<span class="string">"员工 A"</span>, <span class="string">"背景"</span>, <span class="number">3</span>, <span class="number">3600.00</span>);</div><div class="line">Employee e = <span class="keyword">new</span> Salary(<span class="string">"员工 B"</span>, <span class="string">"上海"</span>, <span class="number">2</span>, <span class="number">2400.0</span>);</div><div class="line">s.mailCheck();</div><div class="line">e.mailCheck();      <span class="comment">// 当Employee有mailCheck方法时，调用Salary的mailCheck方法</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h2><ul>
<li>接口中的方法默认为<code>public abstract</code></li>
<li>接口中的变量默认为<code>public static final</code>，且变量必须被赋值</li>
</ul>
<h2 id="泛型-1"><a href="#泛型-1" class="headerlink" title="泛型"></a>泛型</h2><ul>
<li><p>一般情况</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] arrName)</span> </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接收某个类的子类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">returnMax</span><span class="params">(T x, T y, T z)</span> </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类型通配符</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">(List&lt;? extends Number&gt; data)</span> </span>&#123;</div><div class="line">    <span class="comment">//TODO</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    name.add(<span class="string">"hello"</span>);</div><div class="line">    method(data.get(<span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p><strong>所有创建的方法都要涉及调用Thread的start方法，只是第一种方法在实现类中调用了</strong></p>
<h3 id="1-实现Runnable接口"><a href="#1-实现Runnable接口" class="headerlink" title="1. 实现Runnable接口"></a>1. 实现Runnable接口</h3><ul>
<li>必须重写<code>start</code>方法，方法里要调用Thread类的<code>start方法</code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Thread t;</div><div class="line">    <span class="keyword">private</span> String threadName;</div><div class="line"></div><div class="line">    className(String name) &#123;</div><div class="line">        threadName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, threadName);</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">void</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        className R1 = <span class="keyword">new</span> className(<span class="string">"thread1"</span>);</div><div class="line">        R1.start();</div><div class="line"></div><div class="line">        className R2 = <span class="keyword">new</span> className(<span class="string">"thread2"</span>);</div><div class="line">        R2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-继承Thread类"><a href="#2-继承Thread类" class="headerlink" title="2. 继承Thread类"></a>2. 继承Thread类</h3><ul>
<li>继承类中必须重写<code>run</code>方法，也必须调用<code>start()</code>方法才能执行</li>
<li>如果重写了<code>start</code>方法，方法里要调用Thread类的<code>start方法</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadClass</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String threadName;</div><div class="line">    <span class="keyword">private</span> Thread t;</div><div class="line"></div><div class="line">    threadClass(String name) &#123;</div><div class="line">        threadName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"thread start"</span>);</div><div class="line">        t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, threadName);</div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有关Java的基础知识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://nancelglap.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python核心编程</title>
    <link href="https://nancelglap.github.io/2018/05/27/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    <id>https://nancelglap.github.io/2018/05/27/python核心编程/</id>
    <published>2018-05-27T00:56:12.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python核心编程第三版相关知识</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>正则表达式</p>
</blockquote>
<ol>
<li>在匹配模式发生之前，正则表达式模式必须编译成正则表达式对象，因为正则表达式在执行过程中进行多次比较操作，因此要使用预编译<strong>re.compile()</strong></li>
<li><em>re.match()</em>返回的是一个匹配对象，要用<em>group()</em>显示成功的匹配；不能匹配字符串（不能找pattern在其中的）</li>
<li><em>re.search()</em>会从左到右搜索匹配的字符串，返回第一个匹配成功的，<strong>配合group()使用</strong></li>
<li><p>使用括号匹配时将括号的内容放到元组中,配合<strong>group()/group()s</strong>使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">'(\w\w\w)-(\d\d\d)'</span>, <span class="string">'abc-123'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()</div><div class="line"><span class="string">'abc-123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</div><div class="line">(<span class="string">'abc'</span>, <span class="string">'123'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p><em>re.sub(pattern, substring, string)/re.subn()</em>匹配替换相应字符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">'[ae]'</span>, <span class="string">'X'</span>, <span class="string">'abcdef'</span>)</div><div class="line"><span class="string">'XbcdXf'</span></div></pre></td></tr></table></figure>
</li>
<li><p><em>os.popen(command, ‘r’)</em>获取command输出的内容作为迭代对象，配合<em>with … as …</em>使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> os.popen(<span class="string">'who'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> eachLine <span class="keyword">in</span> f:</div><div class="line">        print(re.split(<span class="string">r'\s\s+ | \t'</span>, eachLine.strip()))</div></pre></td></tr></table></figure>
</li>
<li><p><em>with … as …</em>不管在处理文件过程中是否发生异常，都能保证 with 语句执行完毕后已经关闭了打开的文件句柄(<em>f.close()</em>)</p>
</li>
<li><p>生成随机数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange()</div><div class="line">randrange(<span class="number">100</span>)      <span class="comment"># 生成一百以内的随机数</span></div><div class="line">randrange(<span class="number">1</span>, <span class="number">10</span>)    <span class="comment"># 生成1-9的随机数</span></div></pre></td></tr></table></figure>
</li>
<li><p>随机生成26个小写字母中的一个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase <span class="keyword">as</span> lc       <span class="comment"># lc是一个包含26个字母的字符串</span></div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice                      <span class="comment"># 随机返回序列中的一个元素</span></div><div class="line"></div><div class="line">choice(lc)</div></pre></td></tr></table></figure>
</li>
<li><p>用指定字符串连接各个元素<em>string.join()</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'--'</span>.join(choice(lc) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">7</span>))      <span class="comment"># 随机选择7个字母用'--'相连</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>TCP/UDP 网络编程</p>
</blockquote>
<ol>
<li><p>TCP服务端</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"></div><div class="line">HOST = <span class="string">''</span></div><div class="line">PORT = <span class="number">21567</span></div><div class="line">BUFSIZE = <span class="number">1024</span></div><div class="line">ADDR = (HOST, PORT)</div><div class="line"></div><div class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</div><div class="line">tcpSerSock.bind(ADDR)</div><div class="line">tcpSerSock.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    print(<span class="string">'waiting for connection...'</span>)</div><div class="line">    tcpCliSock, addr = tcpSerSock.accept()</div><div class="line">    print(<span class="string">'connected from:'</span>, addr)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = tcpCliSock.recv(BUFSIZE)     <span class="comment"># 阻塞程序，一直等待客户端传来信息</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        tcpCliSock.send(bytes(<span class="string">'[%s] %s'</span> % (bytes(ctime(), <span class="string">'gbk'</span>), data),<span class="string">'gbk'</span>))</div><div class="line"></div><div class="line">    tcpCliSock.close()</div><div class="line">tcpSerSock.close()</div></pre></td></tr></table></figure>
</li>
<li><p>TCP客户端程序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</div><div class="line"></div><div class="line">HOST = <span class="string">'127.0.0.1'</span></div><div class="line">PORT = <span class="number">21567</span></div><div class="line">BUFSIZE = <span class="number">1024</span></div><div class="line">ADDR = (HOST, PORT)</div><div class="line"></div><div class="line">tcpCliSock = socket(AF_INET, SOCK_STREAM)</div><div class="line">tcpCliSock.connect(ADDR)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    data = input(<span class="string">'&gt; '</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    tcpCliSock.send(bytes(data, <span class="string">'utf-8'</span>)</div><div class="line">    data = tcpCliSock.recv(BUFSIZE)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(data.decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">tcpCliSock.close()</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python核心编程第三版相关知识&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django+uwsgi+nginx部署</title>
    <link href="https://nancelglap.github.io/2018/03/30/Django-uwsgi-nginx%E9%83%A8%E7%BD%B2/"/>
    <id>https://nancelglap.github.io/2018/03/30/Django-uwsgi-nginx部署/</id>
    <published>2018-03-30T06:24:59.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于ubuntu部署Django</p>
</blockquote>
<a id="more"></a>
<h3 id="一、装Django"><a href="#一、装Django" class="headerlink" title="一、装Django"></a><strong>一、装Django</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install django==1.8</span></div></pre></td></tr></table></figure>
<h3 id="二、装uWSGI"><a href="#二、装uWSGI" class="headerlink" title="二、装uWSGI"></a><strong>二、装uWSGI</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo pip install uwsgi</span></div></pre></td></tr></table></figure>
<h3 id="三、测试uWSGI"><a href="#三、测试uWSGI" class="headerlink" title="三、测试uWSGI"></a><strong>三、测试uWSGI</strong></h3><p><code>项目根目录/项目名/wsgi.py</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo uwsgi --http 0.0.0.0:8000 --wsgi-file wsgi.py</div></pre></td></tr></table></figure></p>
<p>访问ip</p>
<p>如果端口占用，列出程序pid号，再杀掉所有占用端口的程序<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> lsof -i :8000</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo <span class="built_in">kill</span> -9 pid</span></div></pre></td></tr></table></figure></p>
<h3 id="四、配置nginx"><a href="#四、配置nginx" class="headerlink" title="四、配置nginx"></a><strong>四、配置nginx</strong></h3><p>1、拷贝配置文件到项目根目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cp /etc/nginx/site-available/default /var/www/project/destiny.conf</span></div></pre></td></tr></table></figure></p>
<p>2、确保有<code>/etc/nginx/uwsgi_params</code>文件，没有的话根据连接获取</p>
<p>3、修改配置文件为以下<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> localhost;</div><div class="line">    <span class="attribute">charset</span>     utf-<span class="number">8</span>;</div><div class="line">    <span class="attribute">access_log</span>      /var/www/project/log/nginx_access.log;</div><div class="line">    <span class="attribute">error_log</span>       /var/www/project/log/nginx_error.log;</div><div class="line">    <span class="attribute">client_max_body_size</span> <span class="number">75M</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="attribute">location</span> /static &#123;</div><div class="line">        <span class="attribute">alias</span> /var/www/project/project/static;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">include</span>     /etc/nginx/uwsgi_params;</div><div class="line">        <span class="attribute">uwsgi_pass</span>  <span class="number">127.0.0.1:9090</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>location /static</code>中的<code>/static</code>是自己定义的项目引用静态文件时，浏览器中显示的静态资源所在的根目录名;这样的话，用户在浏览器中查看到的所有image、css或js资源都是处在<code>http://127.0.0.1/static</code>下的</li>
<li><code>location /</code>是指访问项目根目录时，nginx要做的事。其中需要指定 uwsgi_params文件的绝对路径，上面已经提到了</li>
<li><code>127.0.0.1:9090</code>是指uWSGI绑定的监听地址</li>
</ul>
<h3 id="五、将目录权限给nginx"><a href="#五、将目录权限给nginx" class="headerlink" title="五、将目录权限给nginx"></a><strong>五、将目录权限给nginx</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo chown -R www-data:www-data /var/www/project</span></div></pre></td></tr></table></figure>
<h3 id="六、在项目跟目录建立uWSGI配置文件uwsgi-ini"><a href="#六、在项目跟目录建立uWSGI配置文件uwsgi-ini" class="headerlink" title="六、在项目跟目录建立uWSGI配置文件uwsgi.ini"></a><strong>六、在项目跟目录建立uWSGI配置文件<code>uwsgi.ini</code></strong></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">[uwsgi]</span></div><div class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9090</span></div><div class="line"><span class="attr">chdir</span>=/var/www/project</div><div class="line"><span class="attr">module</span>=project.wsgi</div><div class="line"><span class="attr">master</span> = <span class="literal">true</span>         </div><div class="line"><span class="attr">processes</span>=<span class="number">2</span></div><div class="line"><span class="attr">threads</span>=<span class="number">2</span></div><div class="line"><span class="attr">max-requests</span>=<span class="number">2000</span></div><div class="line"><span class="attr">chmod-socket</span>=<span class="number">664</span></div><div class="line"><span class="attr">vacuum</span>=<span class="literal">true</span></div><div class="line"><span class="attr">daemonize</span> = /var/www/project/log/uwsgi.log</div></pre></td></tr></table></figure>
<h3 id="七、去掉-etc-nginx-nginx-conf注释"><a href="#七、去掉-etc-nginx-nginx-conf注释" class="headerlink" title="七、去掉/etc/nginx/nginx.conf注释"></a><strong>七、去掉<code>/etc/nginx/nginx.conf</code>注释</strong></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*.conf;  </div><div class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span>*;</div></pre></td></tr></table></figure>
<h3 id="八、启动uWSGI"><a href="#八、启动uWSGI" class="headerlink" title="八、启动uWSGI"></a><strong>八、启动uWSGI</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo uwsgi --ini /var/www/project/uwsgi.ini</span></div></pre></td></tr></table></figure>
<h3 id="九、拷贝mime-type"><a href="#九、拷贝mime-type" class="headerlink" title="九、拷贝mime.type"></a><strong>九、拷贝<code>mime.type</code></strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo cp /etc/nginx/mime.types /var/www/mime.types</span></div></pre></td></tr></table></figure>
<h3 id="十、启动nginx"><a href="#十、启动nginx" class="headerlink" title="十、启动nginx"></a><strong>十、启动nginx</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo service nginx stop</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo -c /var/www/project/destiny.conf</span></div></pre></td></tr></table></figure>
<p><code>-c</code> 表示加载配置文件启动</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于ubuntu部署Django&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://nancelglap.github.io/categories/nginx/"/>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/nginx/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
      <category term="uwsgi" scheme="https://nancelglap.github.io/tags/uwsgi/"/>
    
      <category term="nginx" scheme="https://nancelglap.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Django开发相关</title>
    <link href="https://nancelglap.github.io/2018/03/25/Django%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2018/03/25/Django开发相关/</id>
    <published>2018-03-25T08:42:26.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于Django实际开发的一些问题</p>
</blockquote>
<a id="more"></a>
<h3 id="更新代码后重启uwsgi和nginx才生效"><a href="#更新代码后重启uwsgi和nginx才生效" class="headerlink" title="更新代码后重启uwsgi和nginx才生效"></a>更新代码后重启uwsgi和nginx才生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo killall -9 uwsgi</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo service nginx stop</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo uwsgi --ini /var/www/sponsor/uwsgi.ini</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo nginx -c /var/www/sponsor/destiny.conf</span></div></pre></td></tr></table></figure>
<h3 id="解决json-dumps-中文变成乱码问题"><a href="#解决json-dumps-中文变成乱码问题" class="headerlink" title="解决json.dumps()中文变成乱码问题"></a>解决json.dumps()中文变成乱码问题</h3><p>给<code>json.dumps</code>加第二个参数<code>ensure_ascii=False</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">"name"</span>:request.POST.get(<span class="string">'name'</span>)&#125;, ensure_ascii=<span class="keyword">False</span>))</div></pre></td></tr></table></figure>
<h3 id="MySQL增"><a href="#MySQL增" class="headerlink" title="MySQL增"></a>MySQL增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># views.py</span></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</div><div class="line">        nickname = request.POST.get(<span class="string">'nickname'</span>, <span class="string">''</span>)</div><div class="line">        avatar = request.POST.get(<span class="string">'avatar'</span>, <span class="string">'www.baidu.com'</span>)</div><div class="line">        counts = request.POST.get(<span class="string">'counts'</span>, <span class="string">'0'</span>)</div><div class="line">        bg = request.POST.get(<span class="string">'bg'</span>, <span class="string">'www.baidu.com'</span>)</div><div class="line">        info = request.POST.get(<span class="string">'info'</span>, <span class="string">''</span>)</div><div class="line">        sex = request.POST.get(<span class="string">'sex'</span>, <span class="string">'unknow'</span>)</div><div class="line">        openid = request.POST.get(<span class="string">'openid'</span>, <span class="string">'sdjhf343rfjsdhkjf'</span>)</div><div class="line">        province = request.POST.get(<span class="string">'province'</span>, <span class="string">'unknow'</span>)</div><div class="line">        city = request.POST.get(<span class="string">'city'</span>, <span class="string">'unknow'</span>)</div><div class="line"></div><div class="line">        input = &#123;</div><div class="line">            <span class="string">"nickname"</span> : nickname,</div><div class="line">            <span class="string">"avatar"</span> : avatar,</div><div class="line">            <span class="string">"counts"</span> : counts,</div><div class="line">            <span class="string">"bg"</span> : bg,</div><div class="line">            <span class="string">"info"</span> : info,</div><div class="line">            <span class="string">"sex"</span> : sex,</div><div class="line">            <span class="string">"openid"</span> : openid,</div><div class="line">            <span class="string">"province"</span> : province,</div><div class="line">            <span class="string">"city"</span> : city</div><div class="line">        &#125;</div><div class="line">        message = User.objects.create(**input)</div><div class="line">        input[<span class="string">'id'</span>] = message.id</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(input, ensure_ascii=<span class="keyword">False</span>))</div></pre></td></tr></table></figure>
<h3 id="使用log"><a href="#使用log" class="headerlink" title="使用log"></a>使用log</h3><ol>
<li>在<code>setting.py</code>中增加以下配置</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">LOGGING = &#123;</div><div class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'formatters'</span>: &#123;</div><div class="line">        <span class="string">'verbose'</span>: &#123;</div><div class="line">            <span class="string">'format'</span>: <span class="string">'[%(asctime)s] [%(levelname)s] %(message)s'</span></div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'handlers'</span>: &#123;</div><div class="line">        <span class="string">'console'</span>:&#123;</div><div class="line">            <span class="string">'level'</span>:<span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'file'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'logging.FileHandler'</span>,</div><div class="line">            <span class="string">'filename'</span>: <span class="string">'/Users/Nancelglap/codes/python/sponsor/log/app_log.log'</span>,   <span class="comment"># 自己的log文件路径</span></div><div class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'email'</span>: &#123;</div><div class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</div><div class="line">            <span class="string">'class'</span>: <span class="string">'django.utils.log.AdminEmailHandler'</span>,</div><div class="line">            <span class="string">'include_html'</span> : <span class="keyword">True</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'loggers'</span>: &#123;</div><div class="line">        <span class="string">'django'</span>: &#123;     <span class="comment"># 使用的时候会用到</span></div><div class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file'</span>, <span class="string">'email'</span>],</div><div class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</div><div class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">"django"</span>)    <span class="comment"># 在setting中loggers里面的名字</span></div><div class="line">logger.info(<span class="string">"some messages"</span>)</div></pre></td></tr></table></figure>
<h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><ol>
<li><p>装一下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install redis</div></pre></td></tr></table></figure>
</li>
<li><p>用一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line">pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</div><div class="line">r = redis.Redis(connection_pool=pool)</div></pre></td></tr></table></figure>
</li>
<li><p>具体操作参考连接</p>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.cnblogs.com<span class="regexp">/melonjiang/</span>p<span class="regexp">/5342505.html</span></div></pre></td></tr></table></figure>
<h3 id="序列化和遍历QuerySet"><a href="#序列化和遍历QuerySet" class="headerlink" title="序列化和遍历QuerySet"></a>序列化和遍历QuerySet</h3><p><strong>Object神tm不能遍历，要先序列化，再遍历插入数组（写到Base类里面复用）</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRank</span><span class="params">(request)</span>:</span></div><div class="line">    info = User.objects.order_by(<span class="string">'-counts'</span>)</div><div class="line">    info = serializers.serialize(<span class="string">"json"</span>, info)[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line">    info = eval(info)           <span class="comment"># 换成字典 </span></div><div class="line"></div><div class="line">    data = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info)):       <span class="comment"># 遍历字典 插入数组</span></div><div class="line">        data.append(info[i][<span class="string">'fields'</span>])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于Django实际开发的一些问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django Admin</title>
    <link href="https://nancelglap.github.io/2018/03/25/Django-Admin/"/>
    <id>https://nancelglap.github.io/2018/03/25/Django-Admin/</id>
    <published>2018-03-25T02:37:02.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Django Admin</p>
</blockquote>
<a id="more"></a>
<h3 id="自定义后台表单显示"><a href="#自定义后台表单显示" class="headerlink" title="自定义后台表单显示"></a>自定义后台表单显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># admin.py</span></div><div class="line"></div><div class="line"><span class="comment"># 基本显示</span></div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Poll</div><div class="line">admin.site.register(Poll)</div><div class="line"></div><div class="line"><span class="comment"># 改变表单顺序</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    fields = [<span class="string">'pub_date'</span>, <span class="string">'question'</span>]</div><div class="line"></div><div class="line">admin.site.register(Poll, PollAdmin)</div><div class="line"></div><div class="line"><span class="comment"># 自己定义模块</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    fieldsets = [</div><div class="line">        (<span class="keyword">None</span>,               &#123;<span class="string">'fields'</span>: [<span class="string">'question'</span>]&#125;),</div><div class="line">        (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>]&#125;),</div><div class="line">    ]</div><div class="line"></div><div class="line">admin.site.register(Poll, PollAdmin)</div></pre></td></tr></table></figure>
<h3 id="添加关联对象"><a href="#添加关联对象" class="headerlink" title="添加关联对象"></a>添加关联对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Choice</div><div class="line"></div><div class="line">admin.site.register(Choice)</div></pre></td></tr></table></figure>
<h3 id="显示字段"><a href="#显示字段" class="headerlink" title="显示字段"></a>显示字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    list_display = (<span class="string">'field1'</span>, <span class="string">'field2'</span>)</div></pre></td></tr></table></figure>
<h3 id="增加时间筛选"><a href="#增加时间筛选" class="headerlink" title="增加时间筛选"></a>增加时间筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    list_filter = [<span class="string">'pub_date'</span>]</div></pre></td></tr></table></figure>
<h3 id="增加搜索功能"><a href="#增加搜索功能" class="headerlink" title="增加搜索功能"></a>增加搜索功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    search_fields = [<span class="string">'question'</span>]</div></pre></td></tr></table></figure>
<h3 id="增加date-hierarchy"><a href="#增加date-hierarchy" class="headerlink" title="增加date hierarchy"></a>增加date hierarchy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></div><div class="line">    ...</div><div class="line">    date_hierarchy = <span class="string">'pub_date'</span></div></pre></td></tr></table></figure>
<h3 id="自定义后台界面"><a href="#自定义后台界面" class="headerlink" title="自定义后台界面"></a>自定义后台界面</h3><p>1.复制源代码<code>django/contrib/admin/templates/admim/**.html</code>到项目根目录的<code>/templates/admin</code>（自己创建）修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> python -c "import sys;sys.path=sys.path[1:];import django;print(django.__path__)"</div></pre></td></tr></table></figure></p>
<p>2.给项目增加模板路径，修改<code>setting.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TEMPLATES = [</div><div class="line">    &#123;</div><div class="line">        ...</div><div class="line">        <span class="string">'DIRS'</span>: [</div><div class="line">            BASE_DIR + <span class="string">'/templates'</span>,    <span class="comment"># 加上这一行</span></div><div class="line">        ],</div><div class="line">        ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Django Admin&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/Django/"/>
    
      <category term="admin" scheme="https://nancelglap.github.io/categories/Django/admin/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django QuerySet</title>
    <link href="https://nancelglap.github.io/2018/03/23/django/"/>
    <id>https://nancelglap.github.io/2018/03/23/django/</id>
    <published>2018-03-23T03:03:51.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Django QuerySet</p>
</blockquote>
<a id="more"></a>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><ol>
<li>编辑<code>setting.py</code><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'databaseName'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'userName'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.创建和迁移数据库到项目<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations</span></div><div class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></div><div class="line"><span class="meta"></span></div><div class="line">$<span class="bash"> python manage.py createsuperuser</span></div></pre></td></tr></table></figure></p>
<p>3.运行测试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver 0.0.0.0:8000</span></div></pre></td></tr></table></figure></p>
<p>4.访问<code>127.0.0.0:8000/admin</code></p>
<h3 id="创建应用以及创建表和model"><a href="#创建应用以及创建表和model" class="headerlink" title="创建应用以及创建表和model"></a>创建应用以及创建表和model</h3><p>1.创建应用，以下命令会创建一个polls目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp polls</span></div></pre></td></tr></table></figure></p>
<p>2.修改<code>models.py</code>，创建表</p>
<p>3.编辑<code>setting.py</code>，在<code>INSTALL_APPS</code>中加入之前<code>startapp</code>的应用名<code>polls</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALL_APPS = (</div><div class="line">    ...,</div><div class="line">    <span class="string">'polls'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>4.运行<code>migrate</code>生成表，以下生成<code>prefix_className</code>的表，className为model中声明的类名<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations prefix</span></div><div class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></div></pre></td></tr></table></figure></p>
<h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><ol>
<li><code>setting.py</code>的<code>USE_TZ</code>设为<code>False</code></li>
<li><code>setting.py</code>的<code>TIME_ZONE</code>设为<code>Asia/Shanghai</code></li>
</ol>
<h3 id="给model实例编写方法"><a href="#给model实例编写方法" class="headerlink" title="给model实例编写方法"></a>给model实例编写方法</h3><p>1.在<code>models.py</code>中编写方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class Poll(models.Model):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>2.在<code>shell</code>交互中示例<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python manage<span class="selector-class">.py</span> shell</div><div class="line"></div><div class="line">&gt;&gt;&gt; from polls<span class="selector-class">.models</span> import Poll</div><div class="line">&gt;&gt;&gt; <span class="selector-tag">p</span> = Poll<span class="selector-class">.objects</span><span class="selector-class">.get</span>(pk=<span class="number">1</span>)</div><div class="line">&gt;&gt;&gt; <span class="selector-tag">p</span>.was_published_recently()</div><div class="line">True</div></pre></td></tr></table></figure></p>
<h3 id="model的关联"><a href="#model的关联" class="headerlink" title="model的关联"></a>model的关联</h3><p>1.如果在model中创建了<code>ForeignKey</code>的关联，可以使用<code>QuerySet</code>增加关联<br>2.如果有<code>ForeignKey</code>字段，自动给数据库增加为<code>关联model_id</code>的字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poll</span><span class="params">(models.Model)</span>:</span></div><div class="line">    question = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</div><div class="line">    ...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></div><div class="line">    poll = models.ForeignKey(Poll)</div><div class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</div><div class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p = Poll.objects.get(pk=1)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.create(choice_text = <span class="string">'Not much'</span>, votes = 0)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.create(choice_text = <span class="string">'The sky'</span>, votes = 0)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p.choice_set.all()</span></div><div class="line">[&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;]</div></pre></td></tr></table></figure>
<h3 id="操作queryset获取数据库信息"><a href="#操作queryset获取数据库信息" class="headerlink" title="操作queryset获取数据库信息"></a>操作queryset获取数据库信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash">&gt;&gt; from polls.models import Poll</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.utils import timezone</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; current_year = timezone.now().year</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; p = Poll.objects.filter(pub_date__year=current_year)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q = Poll.objects.filter(question__startswith=<span class="string">'what'</span>)</span></div></pre></td></tr></table></figure>
<p>筛选所有相应时间的集合<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Poll<span class="selector-class">.objects</span><span class="selector-class">.filter</span>(pub_date__lte=<span class="string">"2018-03-24 08:00:10"</span>).values()</div></pre></td></tr></table></figure></p>
<h3 id="格式化时间输出"><a href="#格式化时间输出" class="headerlink" title="格式化时间输出"></a>格式化时间输出</h3><p>如果输出的<code>datetime</code>时间后面有小数点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Poll.objects.get(pk=<span class="number">1</span>).values()[<span class="string">'pub_date'</span>].strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="queryset查询"><a href="#queryset查询" class="headerlink" title="queryset查询"></a>queryset查询</h3><ol>
<li><p>计数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'lzy'</span>).count()</div></pre></td></tr></table></figure>
</li>
<li><p>查询大于:<code>field__gt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__gt = <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询小于:<code>field__lt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__lt = <span class="number">10</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询大于且小于:<code>field__lt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__lt = <span class="number">10</span>, id__gt = <span class="number">1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询符合数组条件:<code>field__in</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__in=[<span class="number">11</span>, <span class="number">22</span> ,<span class="number">33</span>])    <span class="comment"># 获取id等于11，22，33数据</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询不符合数组条件:<code>field__in</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.exclude(id__in=[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>查询字段包含:<code>field__contains</code>,<code>icontains</code>大小写不敏感</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.modelName.objects.filter(name__contains=<span class="string">"ven"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>查询指定范围:<code>field__range</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(id__range=[<span class="number">1</span>, <span class="number">5</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>查询按顺序排列:<code>queryset.order_by()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).order_by(<span class="string">'id'</span>)  <span class="comment"># asc 从小到大</span></div><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).order_by(<span class="string">'-id'</span>)  <span class="comment"># desc 从大到小</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询限制:分片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.all()[<span class="number">10</span>:<span class="number">20</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="queryset增，删，改"><a href="#queryset增，删，改" class="headerlink" title="queryset增，删，改"></a>queryset增，删，改</h3><blockquote>
<p>增</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1</span></div><div class="line">models.modelName.create(field1=<span class="string">'content'</span>, field2=<span class="string">'content2'</span>)    </div><div class="line"></div><div class="line"><span class="comment"># 2</span></div><div class="line">obj = models.modelName(field1=<span class="string">'content'</span>, field2=<span class="string">'content2'</span>)</div><div class="line">obj.save()</div><div class="line"></div><div class="line"><span class="comment"># 3</span></div><div class="line">dic = &#123;<span class="string">'field1'</span>: <span class="string">'xx'</span>, <span class="string">'filed2'</span>: <span class="string">'00'</span>&#125;</div><div class="line">models.modelName.objects.create(**dic)</div></pre></td></tr></table></figure>
<blockquote>
<p>删</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).delete()</div></pre></td></tr></table></figure>
<blockquote>
<p>改</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">models.modelName.objects.filter(name=<span class="string">'ven'</span>).update(filed = <span class="string">'content'</span>)</div><div class="line"></div><div class="line">obj = models.modelName.objects.get(id=<span class="number">1</span>)</div><div class="line">obj.field = <span class="string">'content'</span></div><div class="line">obj.save()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Django QuerySet&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
      <category term="Django" scheme="https://nancelglap.github.io/categories/python/Django/"/>
    
    
      <category term="Django" scheme="https://nancelglap.github.io/tags/Django/"/>
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>IoC和DI</title>
    <link href="https://nancelglap.github.io/2018/03/18/IoC%E5%92%8CDI/"/>
    <id>https://nancelglap.github.io/2018/03/18/IoC和DI/</id>
    <published>2018-03-18T02:32:33.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>控制反转和依赖注入容器</p>
</blockquote>
<a id="more"></a>
<h3 id="IoC（控制反转）"><a href="#IoC（控制反转）" class="headerlink" title="IoC（控制反转）"></a>IoC（控制反转）</h3><ul>
<li>当类里面需要实现另一个类的时候，将最高层的类不变，其中的类去实现一个接口<code>interface</code></li>
<li>这样最高层的类就不再依赖于特定的类，而是依赖抽象的接口</li>
<li>以下代码同样可用<code>__construct()</code>方法改写</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 接口</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 高层</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@var</span> IDeviceWriter</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $writer;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 可改为__construct()方法</div><div class="line">     * <span class="doctag">@param</span> IDeviceWriter $writer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWriter</span><span class="params">($writer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;writer = $writer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;writer-&gt;saveToDevice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 低层，软盘存储</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FloppyWriter</span> <span class="keyword">implements</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 低层，USB盘存储</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsbDiskWriter</span> <span class="keyword">implements</span> <span class="title">IDeviceWriter</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToDevice</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$biz = <span class="keyword">new</span> Business();</div><div class="line">$biz-&gt;setWriter(<span class="keyword">new</span> UsbDiskWriter());</div><div class="line">$biz-&gt;save(); <span class="comment">// UsbDiskWriter::saveToDevice</span></div><div class="line"></div><div class="line">$biz-&gt;setWriter(<span class="keyword">new</span> FloppyWriter());</div><div class="line">$biz-&gt;save(); <span class="comment">// FloppyWriter::saveToDevice</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;控制反转和依赖注入容器&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="OOP" scheme="https://nancelglap.github.io/tags/OOP/"/>
    
      <category term="php" scheme="https://nancelglap.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>tornado</title>
    <link href="https://nancelglap.github.io/2018/03/06/tornado/"/>
    <id>https://nancelglap.github.io/2018/03/06/tornado/</id>
    <published>2018-03-06T01:47:07.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与tornado相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>initialize()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"><span class="keyword">import</span> tornado.web</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self, db)</span>:</span></div><div class="line">        self.db = db</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        story_id = self.get_argument(<span class="string">"story_id"</span>)</div><div class="line">        self.write(<span class="string">"story_id: %s, and the db is %s"</span> % (story_id, self.db))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = tornado.web.Application([</div><div class="line">        (<span class="string">r"/"</span>, MainHandler, dict(db = <span class="string">"mysql"</span>))</div><div class="line">    ])</div><div class="line">    app.listen(<span class="number">8888</span>)</div><div class="line">    tornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure>
<ul>
<li>实例<code>Application</code>中第三个参数将<code>dict</code>里的参数传给<code>initialize</code>方法，访问相应url时自动调用<code>initialize</code>方法</li>
</ul>
<blockquote>
<p>prepare()</p>
</blockquote>
<ul>
<li>在每个请求的最开始被调用，在<code>get/post</code>等方法之前</li>
</ul>
<blockquote>
<p>on_finish()</p>
</blockquote>
<ul>
<li>在一个请求结束后被调用，复写用来<code>执行清理，日志记录</code>等</li>
<li>响应被送到客户端后才调用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与tornado相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="framework" scheme="https://nancelglap.github.io/categories/framework/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="tornado" scheme="https://nancelglap.github.io/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>composer自动加载</title>
    <link href="https://nancelglap.github.io/2018/01/30/composer%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/"/>
    <id>https://nancelglap.github.io/2018/01/30/composer自动加载/</id>
    <published>2018-01-30T03:28:05.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果<code>psr-4</code>规定如下（自动加载/project/app下的文件）</p>
<ul>
<li><code>&quot;App\\&quot;: &quot;app/&quot;</code>只负责自动加载到<code>/project/app/</code>，并且被自动加载的文件要<code>在这个文件夹下</code></li>
<li>如果要在规定的文件夹子文件夹下自动加载，命名空间要加上子文件夹名<code>/project/app/Hello</code></li>
<li>被加载文件名要与类名一致</li>
<li>引用被自动加载的文件时要new完整的namespace名<code>$hello = new App\Hello\hello();</code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"autoload": &#123;</div><div class="line">         "psr-4": &#123;</div><div class="line">             "App\\": "app/"</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>用于自动加载的类的文件名和类名要一样</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// haha.php </span></div><div class="line"><span class="comment">// 存在/project/app/Hello这个文件夹</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Hello</span>;</div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">haha</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"this is hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>用自动加载的文件new相应类时，使用命名空间相同的名称</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// index.php （项目根目录）</span></div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/vendor/autoload.php'</span>;</div><div class="line"></div><div class="line">$hello = <span class="keyword">new</span> App\Hello\haha();</div><div class="line">$hello-&gt;index();        <span class="comment">// 输出 this is hello</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果&lt;code&gt;psr-4&lt;/code&gt;规定如下（自动加载/project/app下的文件）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;App\\&amp;quot;: &amp;quot;app/&amp;quot;&lt;/code&gt;只负责自动加载到&lt;code&gt;/project/app/&lt;/
    
    </summary>
    
    
      <category term="composer" scheme="https://nancelglap.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>mac/linux 命令</title>
    <link href="https://nancelglap.github.io/2018/01/12/mac-linux-%E5%91%BD%E4%BB%A4/"/>
    <id>https://nancelglap.github.io/2018/01/12/mac-linux-命令/</id>
    <published>2018-01-12T07:18:33.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>mac/linux 终端命令</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>mac查看端口占用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> lsof -i:端口号</span></div></pre></td></tr></table></figure>
<blockquote>
<p>开redis</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> redis-server</span></div></pre></td></tr></table></figure>
<blockquote>
<p>开php-fpm</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> php-fpm</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;mac/linux 终端命令&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://nancelglap.github.io/tags/linux/"/>
    
      <category term="terminal" scheme="https://nancelglap.github.io/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>mac nginx</title>
    <link href="https://nancelglap.github.io/2018/01/12/mac-nginx/"/>
    <id>https://nancelglap.github.io/2018/01/12/mac-nginx/</id>
    <published>2018-01-12T01:30:49.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>配置文件路径</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>nginx</div></pre></td></tr></table></figure>
<blockquote>
<p>根目录路径</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/var/</span>www</div></pre></td></tr></table></figure>
<blockquote>
<p>配置下载文件</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span> / &#123;</div><div class="line">    <span class="attribute">if</span> (<span class="variable">$request_filename</span> <span class="regexp">~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)</span>&#123;</div><div class="line">        <span class="attribute">add_header</span> Content-Disposition: <span class="string">'attachment;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</div><div class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;配置文件路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
    
      <category term="nginx" scheme="https://nancelglap.github.io/tags/nginx/"/>
    
      <category term="mac" scheme="https://nancelglap.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>mysql 命令相关</title>
    <link href="https://nancelglap.github.io/2017/11/08/mysql-%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2017/11/08/mysql-命令相关/</id>
    <published>2017-11-08T13:15:37.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>mysql命令相关</p>
</blockquote>
<a id="more"></a>
<h3 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h3><p>找到<code>/etc/mysql/my.cnf</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"><span class="section"></span></div><div class="line">[mysql]</div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"><span class="section"></span></div><div class="line">[mysqld]</div><div class="line"><span class="attr">character-set-server</span>=utf8</div></pre></td></tr></table></figure></p>
<h3 id="设置可插入emoji"><a href="#设置可插入emoji" class="headerlink" title="设置可插入emoji"></a>设置可插入emoji</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER DATABASE 数据库名称 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</div><div class="line">ALTER TABLE 数据表名称 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div><div class="line">数据表名称 CHANGE 字段列名称 VARCHAR(n) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div></pre></td></tr></table></figure>
<h3 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table tableName alter column col set default value;</div></pre></td></tr></table></figure>
<h3 id="设为可空"><a href="#设为可空" class="headerlink" title="设为可空"></a>设为可空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table tableName modify col varchar(100) null;</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into tableName (col1, col2..) values (&apos;value1&apos;, &apos;value2&apos;...), [(&apos;value1&apos;, &apos;value2&apos;...)];</div></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update tableName set col = &apos;value&apos; where col = &apos;value&apos;;</div></pre></td></tr></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from tableName where col = &apos;value&apos;;</div></pre></td></tr></table></figure>
<h3 id="清空表-id从1开始"><a href="#清空表-id从1开始" class="headerlink" title="清空表(id从1开始)"></a>清空表(id从1开始)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truncate table tableName;</div></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE info(</div><div class="line">   id INT UNSIGNED AUTO_INCREMENT,</div><div class="line">   phone VARCHAR(20) NOT NULL,</div><div class="line">   name VARCHAR(20) NOT NULL,</div><div class="line">   sex VARCHAR(10) NOT NULL,</div><div class="line">   department VARCHAR(10) NOT NULL,</div><div class="line">   PRIMARY KEY (id)</div><div class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE tableName CHANGE oldName newName TYPE;</div></pre></td></tr></table></figure>
<h3 id="SQL注入：查看表信息"><a href="#SQL注入：查看表信息" class="headerlink" title="SQL注入：查看表信息"></a>SQL注入：查看表信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT title, slogan, id FROM series WHERE outBg like &quot;%baidu%&quot; UNION (SELECT TABLE_NAME, TABLE_SCHEMA, 3 FROM information_schema.tables);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;mysql命令相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://nancelglap.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据备份和还原</title>
    <link href="https://nancelglap.github.io/2017/10/11/mysql%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F/"/>
    <id>https://nancelglap.github.io/2017/10/11/mysql数据备份和还原/</id>
    <published>2017-10-11T05:20:11.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>数据备份</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysqldump -u root -p database table1 table2 ... &gt; ~/Documents/admin_menu.sql</span></div></pre></td></tr></table></figure>
<blockquote>
<p>数据还原</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p database &lt; ~/Documents/quanzi.sql</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/t
    
    </summary>
    
      <category term="mysql" scheme="https://nancelglap.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫</title>
    <link href="https://nancelglap.github.io/2017/09/29/python-%E7%88%AC%E8%99%AB/"/>
    <id>https://nancelglap.github.io/2017/09/29/python-爬虫/</id>
    <published>2017-09-29T02:40:45.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 爬虫相关内容</p>
</blockquote>
<a id="more"></a>
<h3 id="用-urllib-库爬html页面"><a href="#用-urllib-库爬html页面" class="headerlink" title="用 urllib 库爬html页面"></a>用 urllib 库爬html页面</h3><hr>
<ul>
<li><code>urllib.request.urlencode(dict)</code> 将字典转换为 <code>key1=value1&amp;key2=value2</code> 的字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"> </div><div class="line">data=&#123;&#125;</div><div class="line">data[<span class="string">'wd'</span>]=<span class="string">'Nancelglap'</span></div><div class="line"> </div><div class="line">url_values=urllib.parse.urlencode(data)</div><div class="line">url=<span class="string">"http://www.baidu.com/s?"</span></div><div class="line">full_url=url+url_values</div><div class="line"> </div><div class="line">data=urllib.request.urlopen(full_url).read()</div><div class="line">data=data.decode(<span class="string">'UTF-8'</span>)</div><div class="line">print(data)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 爬虫相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="spider" scheme="https://nancelglap.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>python 连接mysql</title>
    <link href="https://nancelglap.github.io/2017/09/26/python-%E8%BF%9E%E6%8E%A5mysql/"/>
    <id>https://nancelglap.github.io/2017/09/26/python-连接mysql/</id>
    <published>2017-09-26T12:52:41.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装MySQL驱动"><a href="#安装MySQL驱动" class="headerlink" title="安装MySQL驱动"></a>安装MySQL驱动</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install mysql-connector==2.1.4</span></div></pre></td></tr></table></figure>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><hr>
<ul>
<li>先 <code>connect</code>，后创建 <code>cursor</code>，再用 <code>cursor.execute(sql)</code> 执行增删改查</li>
<li>只要创建了 <code>conn</code> 和 <code>cursor</code> 就要调用 <code>conn.close()</code>, <code>cursor.close()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mysql.connector</div><div class="line"></div><div class="line">conn = mysq.connector.connect(user=<span class="string">'root'</span>, password=<span class="string">'password'</span>, database=<span class="string">'test'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 创建表</span></div><div class="line">cursor.execute(<span class="string">'CREATE TABLE user (id varchar(20) primary key, name varchar(20))'</span>)</div><div class="line"><span class="comment"># 插入记录</span></div><div class="line">cursor.execute(<span class="string">'INSERT INTO user (id, name) values (%s, %s)'</span>, [<span class="string">'1'</span>, <span class="string">'Nancelglap'</span>])</div><div class="line"><span class="comment"># 影响的行数</span></div><div class="line">row = cursor.rowcount</div><div class="line"></div><div class="line"><span class="comment"># 提交事务:</span></div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line"></div><div class="line"><span class="comment"># 运行查询:</span></div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(<span class="string">'SELECT * FROM user WHERE id = %s'</span>, (<span class="string">'1'</span>,))</div><div class="line"></div><div class="line"><span class="comment"># 拿到的是一个list，里面的元素是tuple</span></div><div class="line">values = cursor.fetchall()</div><div class="line"></div><div class="line"><span class="comment"># 关闭 Cursor 和 Connection</span></div><div class="line">cursor.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装MySQL驱动&quot;&gt;&lt;a href=&quot;#安装MySQL驱动&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL驱动&quot;&gt;&lt;/a&gt;安装MySQL驱动&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python 内建模块</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E5%86%85%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-内建模块/</id>
    <published>2017-09-24T12:12:52.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 内建模块使用</p>
</blockquote>
<a id="more"></a>
<h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><hr>
<blockquote>
<p>获取当前日期和时间</p>
<ul>
<li><code>atetime</code>是模块，<code>datetime</code>模块还包含一个<code>datetime类</code></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now() <span class="comment"># 获取当前datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(now)</div><div class="line"><span class="number">2015</span><span class="number">-05</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">07.198690</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(now))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">datetime</span>.<span class="title">datetime</span>'&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>获取指定日期和时间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(dt)</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime 转换为 timestamp</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>) <span class="comment"># 用指定日期时间创建datetime</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.timestamp() <span class="comment"># 把datetime转换为timestamp</span></div><div class="line"><span class="number">1429417200.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>timestamp 转换为 datetime </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">1429417200.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t))</div><div class="line"><span class="number">2015</span><span class="number">-04</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">00</span></div></pre></td></tr></table></figure>
<blockquote>
<p>datetime加减</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(hours=<span class="number">10</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now - timedelta(days=<span class="number">1</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">57</span>, <span class="number">3</span>, <span class="number">540997</span>)</div></pre></td></tr></table></figure>
<h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><hr>
<ul>
<li>可以用取属性的方法获得<code>tuple</code></li>
<li>它具备<code>tuple</code>的不变性</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><hr>
<ul>
<li>实现插入和删除操作的<code>双向列表</code>，适合用于队列和栈</li>
<li>实现<code>append()</code>和<code>pop()</code>，还支持<code>appendleft()</code>和<code>popleft()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">'x'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">'y'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q</div><div class="line">deque([<span class="string">'y'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span>])</div></pre></td></tr></table></figure>
<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><hr>
<ul>
<li>使用<code>dict</code>时，如果希望引用的<code>key</code>不存在时，返回一个默认值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">'N/A'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key1'</span>] <span class="comment"># key1存在</span></div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'key2'</span>] <span class="comment"># key2不存在，返回默认值</span></div><div class="line"><span class="string">'N/A'</span></div></pre></td></tr></table></figure>
<h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><hr>
<blockquote>
<p>Get</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line"><span class="keyword">with</span> request.urlopen(<span class="string">'https://api.douban.com/v2/book/2129650'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, data.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 以下为输出的数据</span></div><div class="line">Status: <span class="number">200</span> OK</div><div class="line">Server: nginx</div><div class="line">Date: Tue, <span class="number">26</span> May <span class="number">2015</span> <span class="number">10</span>:<span class="number">02</span>:<span class="number">27</span> GMT</div><div class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></div><div class="line">Content-Length: <span class="number">2049</span></div><div class="line">Connection: close</div><div class="line">Expires: Sun, <span class="number">1</span> Jan <span class="number">2006</span> <span class="number">01</span>:<span class="number">00</span>:<span class="number">00</span> GMT</div><div class="line">Pragma: no-cache</div><div class="line">Cache-Control: must-revalidate, no-cache, private</div><div class="line">X-DAE-Node: pidl1</div><div class="line">Data: &#123;<span class="string">"rating"</span>:&#123;<span class="string">"max"</span>:<span class="number">10</span>,<span class="string">"numRaters"</span>:<span class="number">16</span>,<span class="string">"average"</span>:<span class="string">"7.4"</span>,<span class="string">"min"</span>:<span class="number">0</span>&#125;,<span class="string">"subtitle"</span>:<span class="string">""</span>,<span class="string">"author"</span>:[<span class="string">"廖雪峰编著"</span>],<span class="string">"pubdate"</span>:<span class="string">"2007-6"</span>,<span class="string">"tags"</span>:[&#123;<span class="string">"count"</span>:<span class="number">20</span>,<span class="string">"name"</span>:<span class="string">"spring"</span>,<span class="string">"title"</span>:<span class="string">"spring"</span>&#125;...&#125;</div></pre></td></tr></table></figure>
<ul>
<li>往<code>Request</code>对象添加HTTP头部信息，将请求伪装成浏览器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"></div><div class="line">req = request.Request(<span class="string">'http://www.douban.com/'</span>)</div><div class="line">req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span>)</div><div class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">    print(<span class="string">'Status:'</span>, f.status, f.reason)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</div><div class="line">        print(<span class="string">'%s: %s'</span> % (k, v))</div><div class="line">    print(<span class="string">'Data:'</span>, f.read().decode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>Post</p>
</blockquote>
<ul>
<li>如果要发送<code>POST</code>请求，把参数<code>data</code>以bytes形式传入</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'模拟登陆微博'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 内建模块使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 正则表达式</title>
    <link href="https://nancelglap.github.io/2017/09/24/python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://nancelglap.github.io/2017/09/24/python-正则表达式/</id>
    <published>2017-09-24T11:48:49.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 正则表达式相关</p>
</blockquote>
<a id="more"></a>
<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><hr>
<ul>
<li><code>d{3}</code>表示匹配3个数字，例如<code>&#39;010&#39;</code></li>
<li><code>\d{3,8}</code>表示3-8个数字，例如<code>&#39;1234567&#39;</code></li>
<li><code>*</code>表示任意个字符（包括0个），</li>
<li><code>+</code>表示至少一个字符</li>
<li><code>?</code>表示0个或1个字符</li>
<li><code>{n}</code>表示n个字符</li>
<li><code>{n,m}</code>表示n-m个字符</li>
<li><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头</li>
<li><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束</li>
</ul>
<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><hr>
<ul>
<li>用<code>r</code>参数可以不考虑转义问题</li>
<li><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match对象</code>，否则返回<code>None</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010-12345'</span>)</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^\d&#123;3&#125;\-\d&#123;3,8&#125;$'</span>, <span class="string">'010 12345'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><hr>
<ul>
<li>按多个字符切割字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>, <span class="string">'a,b;; c  d'</span>)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><hr>
<ul>
<li><code>m.group(index)</code></li>
<li>0永远为原字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">9</span>), match=<span class="string">'010-12345'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div></pre></td></tr></table></figure>
<h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><hr>
<ul>
<li>默认匹配尽可能多的字符串</li>
<li>以下例子<code>0*</code>只能匹配空字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure>
<ul>
<li>加一个<code>?</code>让<code>\d+</code>采用费贪婪匹配:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>, <span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</div></pre></td></tr></table></figure>
<h3 id="预编译正则表达式"><a href="#预编译正则表达式" class="headerlink" title="预编译正则表达式"></a>预编译正则表达式</h3><hr>
<ul>
<li>如果要正则表达式要使用很多次，可以先编译</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-808'</span>).groups</div><div class="line">(<span class="string">'010'</span>, <span class="string">'808'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 正则表达式相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="Regular Expression" scheme="https://nancelglap.github.io/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>python 多进程和多线程</title>
    <link href="https://nancelglap.github.io/2017/09/21/python-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://nancelglap.github.io/2017/09/21/python-多进程和多线程/</id>
    <published>2017-09-21T02:16:08.000Z</published>
    <updated>2019-01-22T14:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>python 多进程和多线程编程</p>
</blockquote>
<a id="more"></a>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块 <code>Pcoess</code> 类代表一个进程对象</li>
<li><code>start()</code> 方法启动</li>
<li><code>join()</code> 方法等待子进程结束后再继续往下运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 子进程要执行的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="comment"># 代码运行时已经是子进程的pid</span></div><div class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 代码运行时是父进程的pid</span></div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</div><div class="line">    print(<span class="string">'Child process will start.'</span>)</div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'Child process end.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>进程池</code>：如果要启动大量子进程，用进程池批量创建子进程</li>
<li>一个<code>p.apply_async()</code>只能处理一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</div><div class="line">    start = time.time()</div><div class="line">    time.sleep(random.random() * <span class="number">3</span>)</div><div class="line">    end = time.time()</div><div class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</div><div class="line">    p = Pool()      <span class="comment"># 默认大小为电脑CPU的核数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        p.apply_async(long_time_task, args=(i,))</div><div class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</div><div class="line">    p.close()</div><div class="line">    p.join()</div><div class="line">    print(<span class="string">'All subprocesses done.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>subprocesses</code> 模块启动一个子进程，控制输入和输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在python代码运行 ls -a，和命令行直接运行的效果一样</span></div><div class="line"><span class="keyword">import</span> subprocesses</div><div class="line"></div><div class="line">r = subprocesses.call([<span class="string">'ls'</span>, <span class="string">'-a'</span>])</div><div class="line">print(<span class="string">'Exit code:'</span>, r)</div></pre></td></tr></table></figure>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><hr>
<ul>
<li><code>multiprocessing</code> 模块提供<code>Queue</code>、<code>Pipes</code>等方式交换数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</div><div class="line"><span class="keyword">import</span> os, time, random</div><div class="line"></div><div class="line"><span class="comment"># 写数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</div><div class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</div><div class="line">        q.put(value)</div><div class="line">        time.sleep(random.random())</div><div class="line"></div><div class="line"><span class="comment"># 读数据进程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></div><div class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        value = q.get(<span class="keyword">True</span>)</div><div class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></div><div class="line">    q = Queue()</div><div class="line">    pw = Process(target=write, args=(q,))</div><div class="line">    pr = Process(target=read, args=(q,))</div><div class="line">    <span class="comment"># 启动子进程pw，写入:</span></div><div class="line">    pw.start()</div><div class="line">    <span class="comment"># 启动子进程pr，读取:</span></div><div class="line">    pr.start()</div><div class="line">    <span class="comment"># 等待pw结束:</span></div><div class="line">    pw.join()</div><div class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></div><div class="line">    pr.terminate()</div></pre></td></tr></table></figure>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><hr>
<ul>
<li>使用 <code>threading</code> 模块，启动一个线程就是创建一个<code>Thread</code>实例，然后调用<code>start()</code>开始执行</li>
<li><code>threading.current_thread()</code> 返回当前线程的实例</li>
<li>主线程实例的名字叫<code>MainThread</code>，子线程的命名可以作为创建<code>Thread</code>实例时第二个参数传入</li>
<li>如果子线程不起名字，默认命名为<code>Thread-1</code>，<code>Thread-2</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 新线程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div><div class="line"></div><div class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</div><div class="line">t.start()</div><div class="line">t.join()</div><div class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure>
<ul>
<li>高级语言的一条语句在CPU执行时是若干条语句，当两个线程同时运行进行数据交互时，不会按顺序执行，会造成结果错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 假定这是你的银行存款:</span></div><div class="line">balance = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment"># 先存后取，结果应该为0:</span></div><div class="line">    <span class="keyword">global</span> balance</div><div class="line">    balance = balance + n</div><div class="line">    balance = balance - n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        change_it(n)</div><div class="line"></div><div class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</div><div class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t1.join()</div><div class="line">t2.join()</div><div class="line">print(balance)</div><div class="line"><span class="comment"># t1，t2交替执行，不一定是预期结果</span></div></pre></td></tr></table></figure>
<ul>
<li>用<code>threading.Lock()</code>解决</li>
<li>当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止</li>
<li>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">balance = <span class="number">0</span></div><div class="line">lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">        <span class="comment"># 先要获取锁:</span></div><div class="line">        lock.acquire()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># 放心地改吧:</span></div><div class="line">            change_it(n)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># 改完了一定要释放锁:</span></div><div class="line">            lock.release()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;python 多进程和多线程编程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://nancelglap.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nancelglap.github.io/tags/python/"/>
    
      <category term="process" scheme="https://nancelglap.github.io/tags/process/"/>
    
  </entry>
  
</feed>
