<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nancelglap</title>
  <subtitle>不想正经</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nancelglap.github.io/"/>
  <updated>2017-06-19T11:04:19.000Z</updated>
  <id>https://nancelglap.github.io/</id>
  
  <author>
    <name>Nancelglap</name>
    <email>1037218107@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel ACL</title>
    <link href="https://nancelglap.github.io/2017/06/16/Laravel-ACL/"/>
    <id>https://nancelglap.github.io/2017/06/16/Laravel-ACL/</id>
    <published>2017-06-16T08:13:41.000Z</published>
    <updated>2017-06-19T11:04:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Laravel 实现 Access Control Lists</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>ACL权限</p>
</blockquote>
<p>1、生成测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* modelFactory，生成用户自己的文章</div><div class="line">*/</div><div class="line"><span class="string">'user_id'</span> =&gt; factory(App\User::class)-&gt;create()-&gt;id,</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>AuthServiceProvider</code></em> 中的 <em><code>boot</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line"></div><div class="line">    $gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">            <span class="comment">//登录来的用户id必须等于文章的user_id才有权限查看</span></div><div class="line">            <span class="keyword">return</span> $user-&gt;id === $post-&gt;user_id;  <span class="comment">//$user为登录进来的用户，laravel自动检测</span></div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 对上述代码进行优化</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//AuthServiceProvider.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line"></div><div class="line">    $gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> $user-&gt;owns($post);</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//User.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">owns</span><span class="params">($post)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id == $post-&gt;user_id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>controller</code></em> 中应用认证<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $post = Post::findOrFail($id);</div><div class="line">    Auth::loginUsingId(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(Gate::denies(<span class="string">'show-post'</span>, $post))&#123;   <span class="comment">//show-post为在AuthServiceProvider中定义的名称</span></div><div class="line">        abort(<span class="number">403</span>, <span class="string">'Sorry'</span>);       <span class="comment">//如果认证失败就返回403页面</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果不用上面if方法，可以用以下  </span></div><div class="line">    <span class="keyword">$this</span>-&gt;authorize(<span class="string">'show-post'</span>, $post);   </div><div class="line">    <span class="keyword">return</span> $post-&gt;title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>blade</code></em> 中应用认证（<em><code>@can()标签</code></em>）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义了 'show-post' 后只有传进来的$post符合验证规则才会显示标签内内容 --&gt;</span></div><div class="line">@can('show-post', $post)</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">@endcan</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现多个ACL权限</p>
</blockquote>
<p>1、创建一个 与相应 <em><code>model</code></em> 对应的 <em><code>policy</code></em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:policy</span> <span class="selector-tag">policyName</span></div></pre></td></tr></table></figure></p>
<p>2、编写 <em><code>app\Policies\policyName</code></em>，在里面增加函数完成权限操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">(User $user, Post $post)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $user-&gt;owns($post);      <span class="comment">//owns在User的model中定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、启用 <em><code>policy</code></em>：在<em><code>AuthServiceProvider</code></em> 中的 <em><code>$policies</code></em> 数组中注册<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $policies = [</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在Controller中用Gate::denies('method', $post)</div><div class="line">    * 根据第二个参数的类决定用哪个policy验证</div><div class="line">    * 再根据第一个参数用相应policy的method方法验证</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="string">'App\Post'</span> =&gt; <span class="string">'App\Policies\PolicyName'</span>,</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>4、运用 <em><code>policy</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 去掉AuthServiceProvider中的以下部分</div><div class="line">*/</div><div class="line">$gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> $user-&gt;owns($post);</div><div class="line">    &#125;)；</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 修改Controller中的方法</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $post = Post::findOrFail($id);</div><div class="line">    Auth::loginUsingId(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//method为$post类对应的policyName中的验证函数</span></div><div class="line">    <span class="keyword">if</span>(Gate::denies(<span class="string">'method'</span>, $post))&#123;   </div><div class="line">        abort(<span class="number">403</span>, <span class="string">'Sorry'</span>);       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 如果blade中有<span class="doctag">@can</span>标签，将参数改为验证函数名</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<blockquote>
<p>创建model和表</p>
</blockquote>
<p>1、创建 <em><code>Permission</code></em> 和 <em><code>Role</code></em> model<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//权限</span></div><div class="line">php artisan make:model Permission</div><div class="line"></div><div class="line"><span class="comment">//角色（规定某种权限）</span></div><div class="line">php artisan make:model Role</div></pre></td></tr></table></figure></p>
<p>2、创建相应的表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_roles_table --create=roles</div></pre></td></tr></table></figure></p>
<p>3、编写 <em><code>migration</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Schema::create(<span class="string">'roles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">        $table-&gt;string(<span class="string">'name'</span>);     <span class="comment">//admin, member</span></div><div class="line">        $table-&gt;string(<span class="string">'label'</span>)-&gt;nullable();    <span class="comment">//desription of name</span></div><div class="line">        $table-&gt;timestamps();  </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Schema::create(<span class="string">'permissions'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">        $table-&gt;string(<span class="string">'name'</span>);     <span class="comment">//admin, member</span></div><div class="line">        $table-&gt;string(<span class="string">'label'</span>)-&gt;nullable();    <span class="comment">//desription of name</span></div><div class="line">        $table-&gt;timestamps();  </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 关联 roles 和 permissions 表</div><div class="line">    */</div><div class="line">    Schema::create(<span class="string">'permissions_role'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;integer(<span class="string">'permission_id'</span>)-&gt;unsigned();</div><div class="line">        $table-&gt;integer(<span class="string">'role_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">        <span class="comment">//创建外键</span></div><div class="line">        $table-&gt;foreign(<span class="string">'permission_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'permissions'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">        $table-&gt;foreign(<span class="string">'role_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'roles'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line"></div><div class="line">        $table-&gt;primary([<span class="string">'permission_id'</span>, <span class="string">'role_id'</span>]);  <span class="comment">//联合主键，只要两条数据两个字段不一样就行</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 关联 roles 和 users 表</div><div class="line">    */</div><div class="line">    Schema::create(<span class="string">'role_user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">        $table-&gt;integer(<span class="string">'role_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">        <span class="comment">//创建外键</span></div><div class="line">        $table-&gt;foreign(<span class="string">'user_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'users'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">        $table-&gt;foreign(<span class="string">'role_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'roles'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line"></div><div class="line">        $table-&gt;primary([<span class="string">'user_id'</span>, <span class="string">'role_id'</span>]);    <span class="comment">//联合主键，只要两条数据两个字段不一样就行</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、执行 <em><code>php artisan migrate</code></em></p>
<blockquote>
<p>创建表之间的多对多关系</p>
</blockquote>
<ul>
<li>user: 用户，用户自己注册的账户，通过与role表的联系赋予用户角色（角色表与permission联系赋予用户权限）</li>
<li>role：角色（admin, user等），用来描述user在该项目中的角色</li>
<li>permissions: 权限，用来描述一个角色拥有的权限，比如edit_form</li>
</ul>
<p>1、修改 <em><code>model</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Permission</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">roles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Role::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Role</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">permissions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Permission::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">givePermission</span><span class="params">(Permission $permission)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;permissions()-&gt;save($permission);</div><div class="line">    <span class="comment">//通过 $role-&gt;givePermission($permission) 给角色权限</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* User</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">roles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Role::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、进入 <em><code>tinker</code></em> 创建一个 <em><code>role</code></em> 角色和一个 <em><code>permission</code></em> 权限<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">php artisan tinker</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建 role 为 admin</div><div class="line">*/</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">$role=<span class="keyword">new</span> Role;</div><div class="line">$role-&gt;name=<span class="string">"admin"</span>;    <span class="comment">//角色名</span></div><div class="line">$role-&gt;label=<span class="string">"Admin"</span>;   <span class="comment">//角色描述</span></div><div class="line">$role-&gt;save();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建 permission 为 edit_form</div><div class="line">*/</div><div class="line">$permssion = <span class="keyword">new</span> Permission;</div><div class="line">$permission-&gt;name = <span class="string">"edit_form"</span>;    <span class="comment">//权限名</span></div><div class="line">$permission-&gt;label = <span class="string">"Edit the form"</span>;       <span class="comment">//权限解释</span></div><div class="line">$permission-&gt;save();</div></pre></td></tr></table></figure></p>
<p>创建 <code>权限</code> 和 <code>角色</code> 后在 <em><code>permission_role</code></em> 中并没有将两个相关联</p>
<p>3、关联 <code>权限</code> 和 <code>角色</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接着上面的tinker界面</span></div><div class="line">$role-&gt;givePermission($permission);     <span class="comment">//关系表中会生成自动关联数据</span></div></pre></td></tr></table></figure></p>
<p>4、定义 <em><code>权限</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* AuthServiceProvider</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;getPermissions() <span class="keyword">as</span> $permission) &#123;</div><div class="line">        $gate-&gt;define($permissions-&gt;name, <span class="function"><span class="keyword">function</span><span class="params">(User $user)</span> <span class="title">use</span> <span class="params">($permission)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> $user-&gt;hasRole($permission-&gt;roles);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getPermissions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> Permission::with(<span class="string">'roles'</span>)-&gt;get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasRole</span><span class="params">($role)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在其他地方使用，如果传hasRole('admin')，既传进来的是字符串</div><div class="line">    */</div><div class="line">    <span class="keyword">if</span>(is_string($role)) &#123;</div><div class="line">        <span class="comment">//判断user的所有role中是否存在name为$role的</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;roles-&gt;contains(<span class="string">'name'</span>, $role);     </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 本例中使用，传进来的是roles的Collection</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="comment">// 1、判断user的role是否有与permission的role相同的</span></div><div class="line">    <span class="comment">// 2、count返回 &gt;0 表明有用户有这个权限，取反再取反返回真</span></div><div class="line">    <span class="comment">// 3、count返回 0 表明用户没有这个权限，取反再取反返回假</span></div><div class="line">    <span class="comment">// 4、注意roles不要加括号，intersect方法处理的是Collection</span></div><div class="line">    <span class="keyword">return</span> !! $role-&gt;intersect(<span class="keyword">$this</span>-&gt;roles)-&gt;count();   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、<em><code>blade</code></em> 应用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 AuthServiceProvider 中已经foreach注册了权限--&gt;</span></div><div class="line">@can('权限名')</div><div class="line">...</div><div class="line">@endcan</div></pre></td></tr></table></figure></p>
<p><strong>6、示例：赋予用户一个角色，让他拥有一定权限</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">php artisan tinker</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">$user = User::find(<span class="number">1</span>);</div><div class="line">$role = Role::find(<span class="number">1</span>);</div><div class="line"></div><div class="line">$user-&gt;roles()-&gt;save($role);</div></pre></td></tr></table></figure></p>
<p><strong>7、应用实例：当用户注册时候自动赋予某个角色（角色和权限已经先在数据库定义好关系）</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在 Controller 中</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(RegisterRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    $user = User::create($data);</div><div class="line">    $role = Role::where(<span class="string">'name'</span>, <span class="string">'ordinary_user'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 给注册用户 ordinary_user 这个角色</span></div><div class="line">    <span class="comment">// 他的权限就是 ordinary_user 拥有的权限（在数据库预先定义好）</span></div><div class="line">    $user-&gt;roles()-&gt;save($role);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用 Middleware 实现后台管理</p>
</blockquote>
<p><strong>部分实现条件参考上面内容</strong></p>
<p>1、创建 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:middleware NameOfMiddleware</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>middleware</code></em> 的 <em><code>handle</code></em> 方法中实现代码逻辑<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//$request-&gt;user()就是Auth::user()作用</span></div><div class="line">    <span class="keyword">if</span>($request-&gt;user() &amp;&amp; $request-&gt;user()-&gt;isAdmin()) &#123;</div><div class="line">        <span class="keyword">return</span> $next($request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//没通过认证就重定向回首页</span></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 到 User model 中声明 isAdmin()方法</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAdmin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasRole(<span class="string">'admin'</span>);     <span class="comment">//hasRole参考上面内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、注册 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* app\Http\Kernel.php</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $routeMiddleware = [</div><div class="line">    ...</div><div class="line">    <span class="string">'name'</span> =&gt; \App\Http\Middleware\NameOfMiddleware::class,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>4、使用 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 方法一：在 Route 中使用</div><div class="line">* name 是在注册时规定的名称</div><div class="line">*/</div><div class="line">Route::get(<span class="string">'/'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'name'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 方法二：在 Controller 中使用</div><div class="line">* 在 __construct() 中使用</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//name 是在注册时规定的名称</span></div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'name'</span>);  </div><div class="line"></div><div class="line">    <span class="comment">//指定只有几个方法运用middleware</span></div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'name'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'store'</span>, <span class="string">'update'</span>]]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Laravel 实现 Access Control Lists&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="ACL" scheme="https://nancelglap.github.io/tags/ACL/"/>
    
      <category term="authorize" scheme="https://nancelglap.github.io/tags/authorize/"/>
    
      <category term="Middleware" scheme="https://nancelglap.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 项目实战相关</title>
    <link href="https://nancelglap.github.io/2017/06/12/Laravel-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2017/06/12/Laravel-项目实战相关/</id>
    <published>2017-06-12T13:41:08.000Z</published>
    <updated>2017-06-20T00:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与 Laravel 实际项目相关内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>在Controller中重定向Controller中的方法</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> redirect()-&gt;action(<span class="string">'NameController@method'</span>, [<span class="string">'param'</span> =&gt; <span class="string">'value'</span>]);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>在 Controller 中使用 middleware </p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'create'</span>, <span class="string">'store'</span>, <span class="string">'edit'</span>, <span class="string">'update'</span>]]);   <span class="comment">//只用在四种方法上</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* app\Http\Middleware\Authenticate.php</div><div class="line">*/</div><div class="line"><span class="keyword">return</span> redirect()-&gt;guest(<span class="string">'返回的路由'</span>);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>更新数据内容</p>
</blockquote>
<h3 id="将原来的内容填入编辑表单中（使用Form-model）"><a href="#将原来的内容填入编辑表单中（使用Form-model）" class="headerlink" title="将原来的内容填入编辑表单中（使用Form::model）"></a>将原来的内容填入编辑表单中（使用Form::model）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* edit.blade.php</div><div class="line">*/</div><div class="line">&#123;&#123; Form::model($comment, [<span class="string">'method'</span> =&gt; <span class="string">'post'</span>, <span class="string">'url'</span> =&gt; <span class="string">'/comment/'</span>.$comment-&gt;id]) &#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 点击更改的url'/comment/edit/$comment-&gt;id'，</div><div class="line">* Route::post('/comment/edit/&#123;id&#125;')</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="更新数据方法"><a href="#更新数据方法" class="headerlink" title="更新数据方法"></a>更新数据方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$comment = comment::findOrFail($id);</div><div class="line">$comment-&gt;update($request-&gt;all());</div></pre></td></tr></table></figure>
<h3 id="设置只有发表评论的人才能更新"><a href="#设置只有发表评论的人才能更新" class="headerlink" title="设置只有发表评论的人才能更新"></a>设置只有发表评论的人才能更新</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $comment = comment::findOrFail($id);</div><div class="line">    <span class="keyword">if</span>(Auth::user()-&gt;id !== $comment-&gt;user_id)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Blade</div><div class="line">*/</div><div class="line">@<span class="keyword">if</span>(Auth::check() &amp;&amp; Auth::user() -&gt; id == $comment-&gt;user_id)</div><div class="line">    ...</div><div class="line">@<span class="keyword">endif</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>实现评论一：创建表以及完成之间的联系</p>
</blockquote>
<p>1、<em><code>migration</code></em> 文件的设置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* comment表</div><div class="line">*/</div><div class="line">$table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">$table-&gt;text(<span class="string">'body'</span>);</div><div class="line">$table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'discussion_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line"><span class="comment">//创建外键</span></div><div class="line">$table-&gt;foreign(<span class="string">'user_id'</span>)</div><div class="line">     -&gt;references(<span class="string">'id'</span>)     <span class="comment">//连接的主键字段为id</span></div><div class="line">     -&gt;on(<span class="string">'users'</span>)      <span class="comment">//连接的表为users</span></div><div class="line">     -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;foreign(<span class="string">'discussion_id'</span>)</div><div class="line">     -&gt;references(<span class="string">'id'</span>)</div><div class="line">     -&gt;on(<span class="string">'discussions'</span>)</div><div class="line">     -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;timestamps();</div></pre></td></tr></table></figure></p>
<p>2、 <em><code>model</code></em> 文件建立联系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discussions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Discussion::class);   <span class="comment">//$user-&gt;disscussions拿到所有发布</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Comment::class);        <span class="comment">//$user-&gt;comments拿到所有评论</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Comment model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">disscussion</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Discussion model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Comment::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现评论二、存储评论 并 限制展示评论框</p>
</blockquote>
<p>1、评论存储要带上<strong>依附内容</strong>的 <em><code>id</code></em> 存入数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 1、评论提交的时候就要带上文章内容的id，可以用隐藏表单（数据库中要有这个字段）</div><div class="line">* 2、存入数据库带上评论用户的id</div><div class="line">*/</div><div class="line">&#123;!! Form::hidden(<span class="string">'id'</span>, $article-&gt;id) !!&#125;</div><div class="line"></div><div class="line">Comment::create(array_merge($request-&gt;all(), [<span class="string">'user_id'</span> =&gt; Auth::user()-&gt;id]));</div></pre></td></tr></table></figure></p>
<p>2、如果用户没有登录不展示评论框<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* blade </div><div class="line">*/</div><div class="line">@if(Auth::check())</div><div class="line">    ...     //展示评论框</div><div class="line">@else</div><div class="line">    &lt;a href="/user/login" class="btn btn-block btn-success"&gt;登录&lt;/a&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现下拉菜单</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--app.blade.php--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/bootstrap.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/style.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"dLabel"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"ture"</span>&gt;</span></div><div class="line">        &#123;&#123; Auth::user()-&gt;name &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dLabel"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 更换头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 更换密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 特别感谢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-sign-out"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/3.0.0-alpha1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>集成 markdown 编辑器</p>
</blockquote>
<p>1、在 <em><code>composer.json</code></em> 的require里加入，执行<em><code>composer update</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"yuanchao/laravel-5-markdown-editor"</span>: <span class="string">"dev-master"</span></div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>config/app.php</code></em> 的 <em><code>providers</code></em> 数组加入一条<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'YuanChao\Editor\EndaEditorServiceProvider'</span></div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>config/app.php</code></em> 的 <em><code>aliases</code></em> 数组加入一条<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'EndaEditor'</span> =&gt; <span class="string">'YuanChao\Editor\Facade\EndaEditorFacade'</span></div></pre></td></tr></table></figure></p>
<p>4、执行 <em><code>php artisan vendor:publish --tag=EndaEditor</code></em></p>
<p>5、修改需要编辑器的页面<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//引入编辑器代码，必须在引入头文件前引入jquery文件！！！！</div><div class="line">&lt;script src="//cdn.bootcss.com/jquery/3.0.0-alpha1/jquery.min.js"&gt;&lt;/script&gt; </div><div class="line">@include('editor::head')</div><div class="line"></div><div class="line">//创建一个 class 为 editor 的容器</div><div class="line">&lt;div class="editor"&gt;</div><div class="line">    &#123;!! Form::textarea('content', '', ['class' =&gt; 'form-control','id'=&gt;'myEditor']) !!&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="以下为配置图片上传"><a href="#以下为配置图片上传" class="headerlink" title="以下为配置图片上传"></a>以下为配置图片上传</h3><p>6、修改 <em><code>\config\editor.php</code></em>，并注册路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改config\editor.php配置</span></div><div class="line"><span class="string">'uploadUrl'</span> =&gt; <span class="string">'post/upload'</span>       <span class="comment">//放到PostsController中</span></div><div class="line"></div><div class="line"><span class="comment">//注册路由</span></div><div class="line">Route::post(<span class="string">'/post/upload'</span>, <span class="string">'PostsController@upload'</span>);</div></pre></td></tr></table></figure></p>
<p>7、在 <em><code>PostsController</code></em> 中创建 <em>upload</em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">EndaEditor</span>;     <span class="comment">//在头部加上</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span>&#123;</div><div class="line">    $data = EndaEditor::uploadImgFile(<span class="string">'uploads'</span>);   <span class="comment">//上传目录为\public\uploads</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> json_encode($data);            </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、如果出现上传图片时候黑屏，删掉 <em><code>resource\views\vendor\editor\head.blade.php</code></em> 中的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"....bootstrap.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>引用 Markdown 和第三方库</p>
</blockquote>
<p>1、复制<em><code>https://github.com/SegmentFault/HyperDown</code></em> <em><code>Parser.php</code></em> 文件<br>2、创建一个 <strong>Class</strong> <em><code>app\Markdown\Parser.php</code></em>，将复制的代码粘贴进去，声明命名空间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Markdown</span>;</div></pre></td></tr></table></figure></p>
<p>3、创建一个 <strong>Class</strong> <em><code>app\Markdown\Markdown.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Markdown</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $parser;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Parser $parser)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;parser = $parser;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">markdown</span><span class="params">($text)</span></span></div><div class="line">    &#123;</div><div class="line">        $html = <span class="keyword">$this</span>-&gt;parser-&gt;makeHtml($text);</div><div class="line">        <span class="keyword">return</span> $html;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将新文件加载到autoload文件里面</span></div><div class="line">composer dump-autoload</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>Controller</code></em> 中引入 <em><code>Markdowwn</code></em> 类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Markdown</span>\<span class="title">Markdown</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $markdown;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Markdown $markdown)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;markdown = $markdown;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在某个展示方法中使用</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">    &#123;</div><div class="line">        $comment = comment::findOrFail($id);</div><div class="line">        $html = <span class="keyword">$this</span>-&gt;markdown-&gt;markdown($comment-&gt;content);</div><div class="line">        <span class="keyword">return</span> view(<span class="string">'show'</span>, compact(<span class="string">'comment'</span>, <span class="string">'html'</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>blade</code></em> 文件中输出内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; $html &#125;&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现收藏内容功能</p>
</blockquote>
<p>1、创建关系表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">php artisan make:model Favorite -m</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* migration</div><div class="line">*/</div><div class="line">$table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'article_id'</span>)-&gt;unsigned();</div></pre></td></tr></table></figure></p>
<p>2、建立多对多关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">favorites</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//第二个参数为关系表名，如果不传默认找article_user表</span></div><div class="line">    $thie-&gt;belongsToMany(Article::class, <span class="string">'favorites'</span>)-&gt;withTimestamps();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、展示内容（可以在 <em><code>Route</code></em> 完成，也可以在 <em><code>Controller</code></em> 中完成）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    $articles = Article::latest();</div><div class="line">    <span class="keyword">if</span>(Auth::check())</div><div class="line">    &#123;</div><div class="line">        $favorites = Favorites::where(<span class="string">'user_id'</span>, Auth::user()-&gt;id)</div><div class="line">                    -&gt;lists(<span class="string">'article_id'</span>)-&gt;toArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view(<span class="string">'index'</span>, compact(<span class="string">'articles'</span>, <span class="string">'favorites'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>4、在视图文件创建收藏模块<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@if(Auth::check())</div><div class="line">    @if(in_array($article_id, $favorites))</div><div class="line">        <span class="comment">&lt;!--取消收藏--&gt;</span></div><div class="line">        &#123;!! Form::open(['url' =&gt; '/path2']) !!&#125;</div><div class="line">        &#123;!! Form::hidden('article_id', $article-&gt;id) !!&#125;</div><div class="line">    @else</div><div class="line">        <span class="comment">&lt;!--收藏--&gt;</span></div><div class="line">        &#123;!! Form::open(['url' =&gt; '/path1']) !!&#125;</div><div class="line">        &#123;!! Form::hidden('article_id', $article-&gt;id) !!&#125;</div><div class="line">    @endif</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart &#123;&#123; in_array($article-&gt;id, $favorites? 'favorited' : 'not-favorited') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        &#123;!! Form::close() !!&#125;</div><div class="line">@endif</div><div class="line">    <span class="comment">&lt;!--展示内容--&gt;</span></div></pre></td></tr></table></figure></p>
<p>增加css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.favorited</span>, <span class="selector-tag">not-favorited</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.not-favorited</span>, <span class="selector-class">.favorited</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、完成 <strong>收藏内容</strong> 和 <strong>取消收藏</strong> 内容方法以及 <strong>登录保护</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);      <span class="comment">//只有用户登录才可以完成收藏和取消收藏</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    Auth::user()-&gt;favorites()-&gt;attach($request-&gt;get(<span class="string">'article_id'</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect()-&gt;back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancel_store</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    Auth::user()-&gt;favorites()-&gt;detach($request-&gt;get(<span class="string">'article_id'</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect()-&gt;back();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与 Laravel 实际项目相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="project" scheme="https://nancelglap.github.io/tags/project/"/>
    
      <category term="mixture" scheme="https://nancelglap.github.io/tags/mixture/"/>
    
  </entry>
  
  <entry>
    <title>laravel 用户注册登录相关</title>
    <link href="https://nancelglap.github.io/2017/06/11/laravel-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%9B%B8%E5%85%B3/"/>
    <id>https://nancelglap.github.io/2017/06/11/laravel-用户注册登录相关/</id>
    <published>2017-06-11T12:18:31.000Z</published>
    <updated>2017-06-19T11:22:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>laravel实现用户注册和登录以及用户信息相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>实现密码自动加密</p>
</blockquote>
<p>在 <em><code>user</code></em> 表中使用 <em><code>attribute</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span><span class="params">($password)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;attributes[<span class="string">'password'</span>] = Hash::make($password);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>登录</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* controller文件</div><div class="line">*/</div><div class="line"><span class="keyword">if</span>(Auth::attempt([</div><div class="line">    <span class="string">'email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),</div><div class="line">    <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>),        <span class="comment">//在model中定义了Attribute用Hash加密，所以不用在此不用加密</span></div><div class="line">    <span class="string">'is_confirmed'</span> =&gt; <span class="number">1</span></div><div class="line">]))</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>登出</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Auth::logout();</div><div class="line">JWToken::refresh();</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>提示登录错误信息</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Controller文件</div><div class="line">*/</div><div class="line">Session::flash('id', '错误信息');</div><div class="line"></div><div class="line">/**</div><div class="line">* blade文件</div><div class="line">*/</div><div class="line">@if(Session::has('id'))</div><div class="line">&lt;div class="alert alert-danger" role="alert"&gt;</div><div class="line">    &#123;&#123; Session::get('id') &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>信息错误后将用户填写的信息返回给原来的页面</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> redirect(<span class="string">'/user/login'</span>)-&gt;withInput();</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>修改错误提示</p>
</blockquote>
<p>打开 <em><code>resources\lang\en\validation.php</code></em> 修改 <em><code>custom</code></em> 数组<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下为当name为id的字段为空时提示“用户名不能为空”</span></div><div class="line"><span class="string">'custom'</span> =&gt; [</div><div class="line">    <span class="string">'name'</span> =&gt; [</div><div class="line">        <span class="string">'required'</span> =&gt; <span class="string">'用户名不能为空'</span></div><div class="line">    ]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>登录后blade显示用户信息</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span>(Auth::check())</div><div class="line">    &#123;&#123; Auth::user()-&gt;name &#125;&#125;</div><div class="line">@<span class="keyword">else</span></div><div class="line">    ...</div><div class="line">@<span class="keyword">endif</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>传统修改头像</p>
</blockquote>
<p>1、引用 <em><code>intervention/image</code></em> package<br><em><code>https://github.com/Intervention/image</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer <span class="keyword">require</span> intervention/image</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>config\app.php</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* $providers数组</div><div class="line">*/</div><div class="line">Intervention\Image\ImageServiceProvider::class</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* $aliases数组</div><div class="line">*/</div><div class="line"><span class="string">'Image'</span> =&gt; Intervention\Image\Facades\Image::class</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成文件</div><div class="line">*/</div><div class="line">php artisan vendor:publish --provider=<span class="string">"Intervention\Image\ImageServiceProviderLaravel5"</span></div></pre></td></tr></table></figure></p>
<p>3、表单<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;!! Form::open([<span class="string">'url'</span> =&gt; <span class="string">'/avatar'</span>, <span class="string">'files'</span>=&gt;<span class="keyword">true</span>]) !!&#125;</div><div class="line">&#123;!! Form::file(<span class="string">'avatar'</span>) !!&#125;</div><div class="line">&#123;!! Form::submit(<span class="string">'上传头像'</span>, [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-primary pull-right'</span>])!!&#125;</div><div class="line">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>controller</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Image</span>;      <span class="comment">//引用上面引入的package</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeAvatar</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $file = $requet-&gt;file(<span class="string">'avatar'</span>);</div><div class="line">    $path = <span class="string">'uploads/'</span>;     <span class="comment">//在public目录下创建一个uploads目录</span></div><div class="line">    $filename = time().$file-&gt;getClientOriginalName();</div><div class="line">    $file-&gt;move($path, $filename);</div><div class="line">    Image::make($path.$filename)-&gt;fit(<span class="number">200</span>)-&gt;save();     <span class="comment">//将图片修改为200 x 200大小的图片   </span></div><div class="line">    $user = User::find(Auth::user()-&gt;id);</div><div class="line">    $user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'path'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、给目录权限<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R <span class="number">777</span> uploads/</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>用 Ajax 完成修改头像 </p>
</blockquote>
<p><strong>实现上传头像过程按钮变化并在上传后自动更换头像</strong></p>
<p>1、在 <em><code>app.blade.php</code></em> 中引入文件，将文件放到 <em><code>public\js</code></em> 中<br><em><code>https://github.com/JellyBool/laravel-app</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"/js/jquery-2.1.4.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"/js/jquery.form.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>2、修改头像的 <em><code>blade</code></em> 文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;div class="text-center"&gt;</div><div class="line">        &lt;div id="validation-errors"&gt;&lt;/div&gt;</div><div class="line">        &lt;img src="&#123;&#123;Auth::user()-&gt;avatar&#125;&#125;" width="120" class="img-circle" id="user-avatar" alt=""&gt;</div><div class="line">        &#123;!! Form::open(['url'=&gt;'/avatar','files'=&gt;true,'id'=&gt;'avatar']) !!&#125;</div><div class="line">        &lt;div class="text-center"&gt;</div><div class="line">            &lt;button type="button" class="btn btn-success avatar-button" id="upload-avatar"&gt;上传新的头像&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &#123;!! Form::file('avatar',['class'=&gt;'avatar','id'=&gt;'image']) !!&#125;</div><div class="line">        &#123;!! Form::close() !!&#125;</div><div class="line">        &lt;div class="span5"&gt;</div><div class="line">            &lt;div id="output" style="display:none"&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">$(document).ready(function() &#123;</div><div class="line">            var options = &#123;</div><div class="line">                beforeSubmit:  showRequest,</div><div class="line">                success:       showResponse,</div><div class="line">                dataType: 'json'</div><div class="line">            &#125;;</div><div class="line">            $('#image').on('change', function()&#123;</div><div class="line">                $('#upload-avatar').html('正在上传...');</div><div class="line">                $('#upload').ajaxForm(options).submit();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    function showRequest() &#123;</div><div class="line">        $("#validation-errors").hide().empty();</div><div class="line">        $("#output").css('display','none');</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function showResponse(response)  &#123;</div><div class="line">        if(response.success == false)</div><div class="line">        &#123;</div><div class="line">            var responseErrors = response.errors;</div><div class="line">            $.each(responseErrors, function(index, value)</div><div class="line">            &#123;</div><div class="line">                if (value.length != 0)</div><div class="line">                &#123;</div><div class="line">                    $("#validation-errors").append('&lt;div class="alert alert-error"&gt;&lt;strong&gt;'+ value +'&lt;/strong&gt;&lt;div&gt;');</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            $("#validation-errors").show();</div><div class="line">        &#125; else &#123;</div><div class="line"></div><div class="line">          $('#user-avatar').attr('src',response.avatar);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>controller</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Image</span>;      <span class="comment">//引用上面引入的package</span></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Response</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Validator</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeAvatar</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $file = $requet-&gt;file(<span class="string">'avatar'</span>);</div><div class="line"></div><div class="line">    $input = <span class="keyword">array</span>(<span class="string">'image'</span> =&gt; $file);</div><div class="line">    $rules = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'image'</span> =&gt; <span class="string">'image'</span></div><div class="line">    );</div><div class="line">    $validator = Validator::make($input, $rules);</div><div class="line">    <span class="keyword">if</span> ( $validator-&gt;fails() ) &#123;</div><div class="line">        <span class="keyword">return</span> Response::json([</div><div class="line">            <span class="string">'success'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">            <span class="string">'errors'</span> =&gt; $validator-&gt;getMessageBag()-&gt;toArray()</div><div class="line">        ]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $path = <span class="string">'uploads/'</span>;     <span class="comment">//在public目录下创建一个uploads目录</span></div><div class="line">    $filename = time().$file-&gt;getClientOriginalName();</div><div class="line">    $file-&gt;move($path, $filename);</div><div class="line">    Image::make($path.$filename)-&gt;fit(<span class="number">200</span>)-&gt;save();     <span class="comment">//将图片修改为200 x 200大小的图片   </span></div><div class="line">    $user = User::find(Auth::user()-&gt;id);</div><div class="line">    $user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Response::json([</div><div class="line">            <span class="string">'success'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">            <span class="string">'avatar'</span> =&gt; asset($path.$filename),</div><div class="line">        ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现上传头像的裁剪</p>
</blockquote>
<p>1、引入 <em><code>Jcrop</code></em> 文件（<em><code>\public\css\jquery.Jcrop.css</code></em> 和 <em><code>\public\js\jquery.Jcrop.min.js</code></em>）<br><em><code>https://github.com/JellyBool/laravel-app</code></em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/jquery.Jcrop.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery.Jcrop.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>blade</code></em> 中引入一个bootstrap的 <em><code>model</code></em>（注意创建路由指向方法为cropAvatar）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line">                    &#123;!! Form::open( [ 'url' =&gt; ['/crop/api'], 'method' =&gt; 'POST', 'onsubmit'=&gt;'return checkCoords();','files' =&gt; true ] ) !!&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"color: #ffffff"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>裁剪头像<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crop-image-wrapper"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">img</span></span></div><div class="line">                                        <span class="attr">src</span>=<span class="string">"/images/default-avatar.png"</span></div><div class="line">                                        <span class="attr">class</span>=<span class="string">"ui centered image"</span> <span class="attr">id</span>=<span class="string">"cropbox"</span> &gt;</div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"photo"</span> <span class="attr">name</span>=<span class="string">"photo"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"x"</span> <span class="attr">name</span>=<span class="string">"x"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"y"</span> <span class="attr">name</span>=<span class="string">"y"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"w"</span> <span class="attr">name</span>=<span class="string">"w"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"h"</span> <span class="attr">name</span>=<span class="string">"h"</span> /&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>裁剪头像<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    &#123;!! Form::close() !!&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、实现 <em><code>controller</code></em> 中的函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 为了实现裁剪后才将图片保存，去掉传统头像上传的 *`changeAvatar`* 方法中的三行</div><div class="line">* 修改 Response::json</div><div class="line">*/</div><div class="line">$user = User::find(Auth::user()-&gt;id);</div><div class="line">$user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">$user-&gt;save();</div><div class="line"></div><div class="line"><span class="keyword">return</span> Response::json([</div><div class="line">        <span class="string">'success'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">        <span class="string">'avatar'</span> =&gt; asset($path.$filename),</div><div class="line">        <span class="string">'image'</span> =&gt; $path.$filename      <span class="comment">//让js中的photo变量为图片路径</span></div><div class="line">    ]);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 增加 cropAvatar函数</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> fuction cropAvatar(Request $request)</div><div class="line">&#123;</div><div class="line">    $photo = $request-&gt;get(<span class="string">'photo'</span>);     <span class="comment">//在js文件中photo变量已经设为图片路径</span></div><div class="line">    $width = (int) $request-&gt;get(<span class="string">'w'</span>);</div><div class="line">    $heigth = (int) $request-&gt;get(<span class="string">'h'</span>);</div><div class="line">    $xAlign = (int) $request-&gt;get(<span class="string">'x'</span>);</div><div class="line">    $yAlign = (int) $request-&gt;get(<span class="string">'y'</span>);</div><div class="line"></div><div class="line">    Image::make($photo)-&gt;crop($width, $height, $xAlign, $yAlign)-&gt;save();</div><div class="line"></div><div class="line">    $user = Auth::user();</div><div class="line"></div><div class="line">    <span class="comment">//给 blade &lt;img src&gt; 处理路径最前面要带上斜杠，所以要使用asset方法，用http方式补全</span></div><div class="line">    $user-&gt;avatar = asset($photo);     </div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'user/avatar'</span>);     <span class="comment">//用户更换头像页面</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>blade</code></em> 文件（前部分代码看传统上传中的blade文件）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 修改blade文件中的ShowResponse方法，将else部分换为以下部分，并加入两个函数</div><div class="line">*/</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> cropBox = $(<span class="string">"#cropbox"</span>);</div><div class="line">    cropBox.attr(<span class="string">'src'</span>,response.avatar);</div><div class="line">    $(<span class="string">'#photo'</span>).val(response.image);        <span class="comment">//让blade提交表单时候photo变量为图片路径</span></div><div class="line">    $(<span class="string">'#upload-avatar'</span>).html(<span class="string">'更换新头像'</span>);</div><div class="line">    $(<span class="string">'#exampleModal'</span>).modal(<span class="string">'show'</span>);</div><div class="line">    cropBox.Jcrop(&#123;</div><div class="line">        aspectRatio: <span class="number">1</span>,</div><div class="line">        onSelect: updateCoords,</div><div class="line">        setSelect: [<span class="number">120</span>,<span class="number">120</span>,<span class="number">10</span>,<span class="number">10</span>]</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'.jcrop-holder img'</span>).attr(<span class="string">'src'</span>,response.avatar);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span><span class="params">(c)</span></span></div><div class="line">&#123;</div><div class="line">    $(<span class="string">'#x'</span>).val(c.x);</div><div class="line">    $(<span class="string">'#y'</span>).val(c.y);</div><div class="line">    $(<span class="string">'#w'</span>).val(c.w);</div><div class="line">    $(<span class="string">'#h'</span>).val(c.h);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCoords</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (parseInt($(<span class="string">'#w'</span>).val())) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    alert(<span class="string">'请选择图片.'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现第三方登录</p>
</blockquote>
<p><em><code>https://github.com/overtrue/socialite</code></em></p>
<p><strong>示例github</strong><br>1、到github注册一个Application <em><code>setting -&gt; Applications -&gt; Register new application</code></em><br>2、填写信息：<code>callback url</code>为请求成功后跳转的地址<br>3、引用package<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer <span class="keyword">require</span> <span class="string">"overtrue/socialite:~1.0"</span></div></pre></td></tr></table></figure></p>
<p>4、注册路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'/login'</span>, <span class="string">'LoginController@github'</span>);     <span class="comment">//认证</span></div><div class="line">Route::get(<span class="string">'/github/login'</span>, <span class="string">'LoginController@githubLogin'</span>);     <span class="comment">//获取信息</span></div></pre></td></tr></table></figure></p>
<p>5、完成认证和获取信息方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $config = [</div><div class="line">    <span class="string">'github'</span> =&gt; [</div><div class="line">        <span class="string">'client_id'</span>     =&gt; <span class="string">'your-app-id'</span>,</div><div class="line">        <span class="string">'client_secret'</span> =&gt; <span class="string">'your-app-secret'</span>,</div><div class="line">        <span class="string">'redirect'</span>      =&gt; <span class="string">'github注册的callback url'</span>,</div><div class="line">    ],</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">github</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 该方法检查client_id和client_secret是否一致</div><div class="line">    * 一致就返回授权用户的信息给callback url</div><div class="line">    */</div><div class="line">    $socialite = <span class="keyword">new</span> SocialiteManager(<span class="keyword">$this</span>-&gt;config);</div><div class="line">    <span class="keyword">return</span> $socialite-&gt;driver(<span class="string">'github'</span>)-&gt;redirect();    <span class="comment">//跳转到github验证页面</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">githubLogin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $socialite = <span class="keyword">new</span> SocialiteManager(<span class="keyword">$this</span>-&gt;config);</div><div class="line">    $githubUser = $socialite-&gt;driver(<span class="string">'gtihub'</span>)-&gt;user();</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * $githubUser为授权用户的信息</div><div class="line">    * $githubUser-&gt;getId();</div><div class="line">    * $githubUser-&gt;getNickname();</div><div class="line">    * $githubUser-&gt;getName();</div><div class="line">    * $githubUser-&gt;getEmail();</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现用户名或邮箱登录</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1、login为要验证的表单id</span></div><div class="line">    <span class="comment">// 2、验证是邮箱还是用户名</span></div><div class="line">    $option = filter_var($request-&gt;get(<span class="string">'login'</span>), FILTER_VALIDATE_EMAIL) ? <span class="string">'email'</span>:<span class="string">'name'</span>;</div><div class="line">    $request-&gt;merge([$option =&gt; $request-&gt;get(<span class="string">'login'</span>)]);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(Auth::attempt($request-&gt;only($option, <span class="string">'password'</span>)))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//验证通过后的代码...</span></div><div class="line">        <span class="keyword">return</span> ...;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//验证不通过的处理</span></div><div class="line">    ...;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;laravel实现用户注册和登录以及用户信息相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="user" scheme="https://nancelglap.github.io/tags/user/"/>
    
      <category term="register" scheme="https://nancelglap.github.io/tags/register/"/>
    
      <category term="login" scheme="https://nancelglap.github.io/tags/login/"/>
    
      <category term="profile" scheme="https://nancelglap.github.io/tags/profile/"/>
    
  </entry>
  
  <entry>
    <title>laravel Request常用规则</title>
    <link href="https://nancelglap.github.io/2017/06/11/laravel-Request%E5%B8%B8%E7%94%A8%E8%A7%84%E5%88%99/"/>
    <id>https://nancelglap.github.io/2017/06/11/laravel-Request常用规则/</id>
    <published>2017-06-11T12:09:33.000Z</published>
    <updated>2017-06-19T11:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&#39;name&#39; =&gt; &#39;required|min:3&#39;</code><br><code>&#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;</code>  规定 <em><code>users</code></em> 表的 <em><code>email</code></em> 字段必须为唯一<br><code>password =&gt; &#39;required|min:6|confirmed&#39;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;required|min:3&amp;#39;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;#39;email&amp;#39; =&amp;gt; &amp;#39;required|email|unique:users,email&amp;#39;&lt;/co
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="request" scheme="https://nancelglap.github.io/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>laravel 表的联系</title>
    <link href="https://nancelglap.github.io/2017/06/11/laravel-%E8%A1%A8%E7%9A%84%E8%81%94%E7%B3%BB/"/>
    <id>https://nancelglap.github.io/2017/06/11/laravel-表的联系/</id>
    <published>2017-06-11T07:45:36.000Z</published>
    <updated>2017-06-19T11:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>设置laravel 数据表之间的联系</p>
</blockquote>
<a id="more"></a>
<p>1、创建一个跟用户联系的表，用 <em><code>user_id</code></em> ， <em><code>last_user_id</code></em> 作为外键<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Comment表</div><div class="line">*/</div><div class="line">$table -&gt; increments(<span class="string">'id'</span>);</div><div class="line">$table -&gt; string(<span class="string">'title'</span>);</div><div class="line">$table -&gt; text(<span class="string">'body'</span>);</div><div class="line">$table -&gt; integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table -&gt; integer(<span class="string">'last_user_id'</span>)-&gt;unsigned();</div><div class="line">$table -&gt; foreign(<span class="string">'user_id'</span>)-&gt;references(<span class="string">'id'</span>)-&gt;on(<span class="string">'users'</span>)-&gt;onDelete(<span class="string">'cascade'</span>);   <span class="comment">//规定user_id为users表id字段的连接</span></div><div class="line">$table -&gt; timestamps();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* users表</div><div class="line">*/</div><div class="line">$table -&gt; increments(<span class="string">'id'</span>);</div><div class="line">$table -&gt; string(<span class="string">'name'</span>);</div><div class="line">$table -&gt; string(<span class="string">'avatar'</span>);     <span class="comment">//用户头像url</span></div><div class="line">$table -&gt; string(<span class="string">'email'</span>)-&gt;unique();</div><div class="line">$table -&gt; string(<span class="string">'password'</span>, <span class="number">60</span>);</div><div class="line">$table -&gt; remremberToken();</div><div class="line">$table -&gt; timestamps();</div></pre></td></tr></table></figure></p>
<p>2、创建 <em><code>users</code></em> 表测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\User::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> $password;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'name'</span> =&gt; $faker-&gt;name,</div><div class="line">        <span class="string">'email'</span> =&gt; $faker-&gt;unique()-&gt;safeEmail,</div><div class="line">        <span class="string">'avatar'</span> =&gt; $faker-&gt;imageUrl(<span class="number">256</span>, <span class="number">256</span>),</div><div class="line">        <span class="string">'password'</span> =&gt; $password ?: $password = bcrypt(<span class="string">'secret'</span>),</div><div class="line">        <span class="string">'remember_token'</span> =&gt; str_random(<span class="number">10</span>),</div><div class="line">    ];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(user::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<p>3、创建 <em><code>comments</code></em> 表测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\comment::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    $user_ids = \App\User::pluck(<span class="string">'id'</span>)-&gt;toArray();      <span class="comment">//将users表中的id拿出来作为数组</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'title'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'body'</span> =&gt; $faker-&gt;paragraph,</div><div class="line">        <span class="string">'user_id'</span> =&gt; $faker-&gt;randomElement($user_ids),</div><div class="line">        <span class="string">'last_user_id'</span> =&gt; ($faker-&gt;randomElement($user_ids))[<span class="number">0</span>],</div><div class="line">    ];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(comment::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在model中建立关系</p>
</blockquote>
<p>1、修改 <em><code>users</code></em> 表model文件，使用Eloquent Relationship<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(comment::class);      <span class="comment">//使用$user-&gt;comments()获取用户所有评论</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>comment</code></em> 表model文件，使用Eloquent Relationship<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//默认外键为user_id，如果有自定义外键作为第二个参数传入</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);       <span class="comment">//使用$comment-&gt;user()获取评论的用户</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>多对多关系</p>
</blockquote>
<p><strong>belongsToMany()第二个参数为两个表关系的表名，如果没有三四个参数，关系表的两个字段为model1_id, model2_id（小写），model1为belongsToMany所在的model</strong></p>
<p>1、创建第三方关联表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$table-&gt;integer(<span class="string">'article_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'tag_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">$table-&gt;foreign(<span class="string">'article_id'</span>)</div><div class="line">      -&gt;references(<span class="string">'id'</span>) </div><div class="line">      -&gt;on(<span class="string">'articless'</span>)</div><div class="line">      -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;foreign(<span class="string">'tag_id'</span>)</div><div class="line">      -&gt;references(<span class="string">'id'</span>) </div><div class="line">      -&gt;on(<span class="string">'tags'</span>)</div><div class="line">      -&gt;onDelete(<span class="string">'cascade'</span>);</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>model</code></em> 文件中声明多对多关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Article</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Tag</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">articles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Article::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、建立关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 比如在Controller中</div><div class="line">* 以下操作都会在第三方表中自动生成数据</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//将 articles 表 id 为3的与 tags 表 id 为2的绑定</span></div><div class="line">$article = App\Article::find(<span class="number">3</span>);</div><div class="line">$article-&gt;tags()-&gt;attach(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//将 articles 表 id 为3的与 tags 表 id 为2的解除绑定</span></div><div class="line">$article = App\Article::find(<span class="number">3</span>);</div><div class="line">$article-&gt;tags()-&gt;detach(<span class="number">2</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;设置laravel 数据表之间的联系&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="database" scheme="https://nancelglap.github.io/tags/database/"/>
    
      <category term="table" scheme="https://nancelglap.github.io/tags/table/"/>
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>laravel 用户确认邮箱</title>
    <link href="https://nancelglap.github.io/2017/06/10/laravel-%E7%94%A8%E6%88%B7%E7%A1%AE%E8%AE%A4%E9%82%AE%E7%AE%B1/"/>
    <id>https://nancelglap.github.io/2017/06/10/laravel-用户确认邮箱/</id>
    <published>2017-06-10T02:57:00.000Z</published>
    <updated>2017-06-19T11:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用laravel完成用户确认邮箱完成认证</p>
</blockquote>
<a id="more"></a>
<p>1、在 <em><code>composer.json</code></em> 中加入以下内容并执行 <em><code>composer update</code></em><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"require"</span>: &#123;</div><div class="line">    ... ,</div><div class="line">    <span class="string">"guzzlehttp/guzzle"</span>: <span class="string">"~5.3|~6.0"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、用 <em><code>MandDrill</code></em> driver来发送邮件，在mandrill注册后拿到 <em><code>secret_key</code></em>（也可以用sendcloud）<br>3、配置 <em><code>.env</code></em> 文件<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">MAIL_DRIVER</span>=mandrill</div><div class="line"><span class="attr">MANDRILL_SECRET</span>=拿到的secret key</div></pre></td></tr></table></figure></p>
<p>4、配置 <em><code>mail.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'from'</span> =&gt; [<span class="string">'address'</span> =&gt; <span class="string">'发送email的邮箱'</span>, <span class="string">'name'</span> =&gt; <span class="string">'名字'</span>]</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>migration</code></em> 文件中给表增加两个字段，并在 <em><code>model</code></em> 文件中将字段加入 <em><code>$fillable</code></em> 数组中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* migration文件</div><div class="line">*/</div><div class="line">$table-&gt;string(<span class="string">'confirm_code'</span>, <span class="number">64</span>);</div><div class="line">$table-&gt;integer(<span class="string">'is_confirmed'</span>)-&gt;default(<span class="number">0</span>);    <span class="comment">//0代表没激活，1代表已激活</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* model文件</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $fillable = [... , <span class="string">'confirm_code'</span>];</div></pre></td></tr></table></figure></p>
<p>6、用 <em><code>ModelFactory</code></em> 添加测试信息（测试用，可跳过）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在ModelFactory文件中加入</div><div class="line">*/</div><div class="line"><span class="string">'confirm_code'</span> =&gt; str_random(<span class="number">48</span>),</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 用php artisan tinker生成数据</div><div class="line">*/</div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(modelName::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<p>7、编写 <em><code>Controller</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(yourRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    $data = [</div><div class="line">        <span class="string">'confirm_code'</span> =&gt; str_random(<span class="number">48</span>),</div><div class="line">    ]</div><div class="line"></div><div class="line">    $user = modelName::create(array_merge($request-&gt;all(), $data));</div><div class="line"></div><div class="line">    $subject = <span class="string">'内容'</span>;</div><div class="line">    $view = <span class="string">'email.register'</span>;       <span class="comment">//传views\email\register.blade.php</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendTo($user, $subject, $view, $data);       <span class="comment">//在后面生成sendTo方法</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data = [])</span></span></div><div class="line">&#123;</div><div class="line">    Mail::queue($view, $data, <span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($user, $subject)</span></span>&#123;</div><div class="line">        $message-&gt;to($user-&gt;email)-&gt;subject($subject);      <span class="comment">//$user-&gt;email为用户注册填写的email</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、编写 <em><code>Controller</code></em> ：文件当用户点击链接时的处理函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">confirmEmail</span><span class="params">($confirm_code)</span></span></div><div class="line">&#123;</div><div class="line">    $user = User::where(<span class="string">'confirm_code'</span>, $confirm_code)-&gt;first();</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(is_null($user)) &#123;</div><div class="line">        <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果有查找到用户将认证设置为1，并再生成一个confirm_code确保下次点击url时无效</span></div><div class="line">    $user-&gt;is_confirmed = <span class="number">1</span>;</div><div class="line">    $user-&gt;confirm_code = str_random(<span class="number">48</span>);</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'user/login'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>9、<em><code>生成发送给用户的url</code></em> 和 <em><code>设置路由</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在视图中生成url</div><div class="line">*/</div><div class="line">&lt;a href=<span class="string">"&#123;&#123; url('verify/'. $confirm_code) &#125;&#125;"</span>&gt;Click To Confirm&lt;/a&gt;  <span class="comment">//sendTo函数包含$confirm_code参数</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成路由</div><div class="line">*/</div><div class="line">Route::get(<span class="string">'verify/&#123;confirm_code&#125;'</span>, <span class="string">'nameController@confirmEmail'</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>重构邮件发送类(用event)并集成 SendCloud 邮件服务</p>
</blockquote>
<h3 id="一、重构邮件发送类"><a href="#一、重构邮件发送类" class="headerlink" title="一、重构邮件发送类"></a>一、重构邮件发送类</h3><p>1、在 <em><code>model</code></em> 中定义方法取代 <em><code>modelName::create()</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(array $array)</span>       //<span class="title">array</span>为用户数据构成的数组</span></div><div class="line">&#123;</div><div class="line">    $user = <span class="keyword">static</span>::create($array);</div><div class="line"></div><div class="line">    event(<span class="keyword">new</span> EventName($user));    <span class="comment">//触发事件完成listener中handle方法内容</span></div><div class="line">    <span class="keyword">return</span> $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>event</code></em> 文件中修改 <em><code>__construct</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $user;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>listener</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendWelcomeEmail</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $mailer;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserMailer $mailer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;mailer = $mailer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;mailer-&gt;welcome($event-&gt;user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>App</code></em> 下创建 <em><code>Mailer\Mailer.php</code></em> （注意namespace是 <em><code>App\Mailer</code></em> ）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data=[])</span></span></div><div class="line">&#123;</div><div class="line">    Mail::queue($view, $data, <span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($user, $subject)</span></span>&#123;</div><div class="line">        $message-&gt;to($user-&gt;email)-&gt;subject($subject);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、因为所有邮件发送都会调用到源生的 <em><code>Mail</code></em>，所以将 <em><code>Mailer</code></em> 作为父类继承：创建一个 <em><code>Mailer\UserMailer</code></em>（namespace为 <em><code>App\UserMailer</code></em>）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMailer</span> <span class="keyword">extends</span> <span class="title">Mailer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($user)</span></span></div><div class="line">    &#123;</div><div class="line">        $subject = <span class="string">"Welcome to xxx"</span>;</div><div class="line">        $view = <span class="string">"emails.welcome"</span>;       <span class="comment">//创建views\emails\welcome.blade.php</span></div><div class="line">        $data = [<span class="string">'name'</span> =&gt; $user-&gt;name, <span class="string">'toekn'</span> =&gt; $user-&gt;token];       <span class="comment">//token为confirmed_code</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span> -&gt; sendTo($user, $subject, $view, $data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="集成-SendCloud-服务"><a href="#集成-SendCloud-服务" class="headerlink" title="集成 SendCloud 服务"></a>集成 SendCloud 服务</h3><p>1、配置 <em><code>mail.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'from'</span> =&gt; [<span class="string">'address'</span> =&gt; <span class="string">'发送email的邮箱'</span>, <span class="string">'name'</span> =&gt; <span class="string">'名字'</span>]</div></pre></td></tr></table></figure></p>
<p>2、配置 <em><code>.env</code></em><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SENDCLOUD_API_USER</span>= SendCloud 上的 API_USER</div><div class="line"><span class="attr">SENDCLOUD_API_KEY</span>= SendCloud 上的 API_KEY</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>Mailer\Mailer.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $url = <span class="string">'http://api.sendcloud.net/apiv2/mail/sendtemplate'</span>;    <span class="comment">//一定要加这一行</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data=[])</span></span></div><div class="line">&#123;</div><div class="line">    $vars = json_encode([<span class="string">'to'</span> =&gt; [$user-&gt;email], <span class="string">'sub'</span> =&gt; $data]);</div><div class="line">    $param = [</div><div class="line">        <span class="string">'apiUser'</span>            =&gt; env(<span class="string">'SENDCLOUD_API_USER'</span>), <span class="comment"># 使用api_user和api_key进行验证</span></div><div class="line">        <span class="string">'apiKey'</span>             =&gt; env(<span class="string">'SENDCLOUD_API_KEY'</span>),</div><div class="line">        <span class="string">'from'</span>               =&gt; config(<span class="string">'mail'</span>)[<span class="string">'from'</span>][<span class="string">'address'</span>], <span class="comment"># 发信人，用正确邮件地址替代</span></div><div class="line">        <span class="string">'fromName'</span>           =&gt; config(<span class="string">'mail'</span>)[<span class="string">'from'</span>][<span class="string">'name'</span>],</div><div class="line">        <span class="string">'xsmtpapi'</span>           =&gt; $vars,</div><div class="line">        <span class="string">'subject'</span>            =&gt; $subject,</div><div class="line">        <span class="string">'templateInvokeName'</span> =&gt; $view,</div><div class="line">        <span class="string">'respEmailId'</span>        =&gt; <span class="string">'true'</span></div><div class="line">    ];</div><div class="line">    $sendData = http_build_query($param);</div><div class="line">    $options = [</div><div class="line">        <span class="string">'http'</span> =&gt; [</div><div class="line">            <span class="string">'method'</span>  =&gt; <span class="string">'POST'</span>,</div><div class="line">            <span class="string">'header'</span>  =&gt; <span class="string">'Content-Type: application/x-www-form-urlencoded'</span>,</div><div class="line">            <span class="string">'content'</span> =&gt; $sendData</div><div class="line">        ]];</div><div class="line">    $context = stream_context_create($options);</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;url, FILE_TEXT, $context);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>Mailer\UserMailer.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($user)</span></span></div><div class="line">&#123;</div><div class="line">    $subject = <span class="string">'邮箱确认'</span>;      <span class="comment">//必须跟SendCloud上的邮件标题一样</span></div><div class="line">    $view = <span class="string">'welcome'</span>;         <span class="comment">//必须跟SendCloud上的调用名称一样</span></div><div class="line">    $data = [<span class="string">'%name%'</span> =&gt; [$user-&gt;name],<span class="string">'%token%'</span> =&gt; [str_random(<span class="number">40</span>)]];      <span class="comment">//SendCloud将%var%作为参数</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendTo($user, $subject, $view, $data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用laravel完成用户确认邮箱完成认证&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="mail" scheme="https://nancelglap.github.io/tags/mail/"/>
    
      <category term="SendCloud" scheme="https://nancelglap.github.io/tags/SendCloud/"/>
    
  </entry>
  
  <entry>
    <title>PHP单元测试</title>
    <link href="https://nancelglap.github.io/2017/06/09/PHP%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://nancelglap.github.io/2017/06/09/PHP单元测试/</id>
    <published>2017-06-09T12:01:58.000Z</published>
    <updated>2017-06-19T11:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与php单元测试相关内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>laravel下创建一个简单的单元测试</p>
</blockquote>
<p>1、在 <em><code>tests\Unit</code></em> 目录下创建一个如 <em><code>NameTest</code></em> 的文件<br>2、让类继承于 <em><code>phpUnit</code></em> 类，<strong>引用被测试的类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用于用于测试App\Product.php中的Product类中的name()方法是否返回'Mac'</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassName</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> <span class="keyword">extends</span> \<span class="title">PHPUnit_Framework_TestCase</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/** <span class="doctag">@test</span> */</span>		<span class="comment">//一定要声明为test，并且按照此行格式写</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a_product_has_a_name</span> <span class="params">()</span>		//声明函数名用`<span class="title">_</span>`分开	</span></div><div class="line">	&#123;</div><div class="line">		$product = <span class="keyword">new</span> Product(<span class="string">'Mac'</span>);</div><div class="line"></div><div class="line">		<span class="keyword">$this</span>-&gt;assertEquals(<span class="string">'Mac'</span>, $product-&gt;name());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、运行测试 <em><code>vendor/bin/phpunit</code></em> 或 <em><code>phpunit</code></em>，如果只运行单个测试文件<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit <span class="comment">--filter=NameTest</span></div></pre></td></tr></table></figure></p>
<p>4、解决单元测试代码重用问题：加入 <em><code>setUp</code></em> 函数（在每个函数执行之前都会先执行 <em><code>setUp</code></em> 函数内的内容）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	...;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Laravel测试Eloquent Model</p>
</blockquote>
<p>1、在 <em><code>tests/Unit</code></em> 下创建文件，并继承laravel的测试类<em><code>TestCase</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;		<span class="comment">//防止每次测试都产生数据</span></div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_method</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		factory(Article::class, <span class="number">3</span>)-&gt;create();		<span class="comment">//先在ModelFactory加入生成数据代码</span></div><div class="line">		factory(Article::class)-&gt;create([<span class="string">'reads'</span> =&gt; <span class="number">10</span>]);		<span class="comment">//增加一条信息，read字段为10</span></div><div class="line">		$mostPopular = factory(Article::class)-&gt;create([<span class="string">'reads'</span> =&gt; <span class="string">'20'</span>]);</div><div class="line"></div><div class="line">		$articles = Article::trending();	<span class="comment">//该方法按reads大小降序排列文章</span></div><div class="line">		</div><div class="line">		<span class="keyword">$this</span>-&gt;assertEquals($mostPopular-&gt;id, $articles-&gt;first()-&gt;id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>model</code></em> 中编写相应方法（用到 <em><code>queryScope</code></em> ）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeTrending</span><span class="params">($query)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> $query-&gt;orderBy(<span class="string">'reads'</span>, <span class="string">'desc'</span>)-&gt;get();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与php单元测试相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="https://nancelglap.github.io/categories/php/"/>
    
    
      <category term="phpunit" scheme="https://nancelglap.github.io/tags/phpunit/"/>
    
      <category term="test" scheme="https://nancelglap.github.io/tags/test/"/>
    
      <category term="debug" scheme="https://nancelglap.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>php命名空间和自动加载</title>
    <link href="https://nancelglap.github.io/2017/06/08/php%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/"/>
    <id>https://nancelglap.github.io/2017/06/08/php命名空间和自动加载/</id>
    <published>2017-06-08T08:33:09.000Z</published>
    <updated>2017-06-19T11:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解决包含 <em><code>Class</code></em> 要用多个 <em><code>require</code></em> 问题</p>
</blockquote>
<a id="more"></a>
<h3 id="1、在项目目录下创建-composer-json-文件，加入以下内容"><a href="#1、在项目目录下创建-composer-json-文件，加入以下内容" class="headerlink" title="1、在项目目录下创建 composer.json 文件，加入以下内容"></a>1、在项目目录下创建 <em><code>composer.json</code></em> 文件，加入以下内容</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"autoload"</span>:&#123;</div><div class="line">		<span class="string">"psr-4"</span>:&#123;</div><div class="line">			<span class="string">"namespace的名\\"</span>:<span class="string">"实际路径名/"</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、在要被加载的文件加入"><a href="#2、在要被加载的文件加入" class="headerlink" title="2、在要被加载的文件加入"></a>2、在要被加载的文件加入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">namespace</span>的名;</div></pre></td></tr></table></figure>
<h3 id="3、生成-autoload-文件并加载"><a href="#3、生成-autoload-文件并加载" class="headerlink" title="3、生成 autoload 文件并加载"></a>3、生成 <em><code>autoload</code></em> 文件并加载</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">composer dump-autoload</span></div></pre></td></tr></table></figure>
<h3 id="4、在加载其他文件的文件中加入"><a href="#4、在加载其他文件的文件中加入" class="headerlink" title="4、在加载其他文件的文件中加入"></a>4、在加载其他文件的文件中加入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">namespace</span>的名\<span class="title">Class</span>文件名;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决包含 &lt;em&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/em&gt; 要用多个 &lt;em&gt;&lt;code&gt;require&lt;/code&gt;&lt;/em&gt; 问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="https://nancelglap.github.io/categories/php/"/>
    
    
      <category term="php" scheme="https://nancelglap.github.io/tags/php/"/>
    
      <category term="namespace" scheme="https://nancelglap.github.io/tags/namespace/"/>
    
      <category term="require" scheme="https://nancelglap.github.io/tags/require/"/>
    
      <category term="autoload" scheme="https://nancelglap.github.io/tags/autoload/"/>
    
  </entry>
  
  <entry>
    <title>vim常用操作</title>
    <link href="https://nancelglap.github.io/2017/06/07/vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://nancelglap.github.io/2017/06/07/vim常用操作/</id>
    <published>2017-06-07T03:53:47.000Z</published>
    <updated>2017-06-19T11:05:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>插入</p>
</blockquote>
<p>在当前位置前插入：<em>i</em><br>在当前行首插入：<em>I</em><br>在当前位置后插入：<em>a</em><br>在当前行尾插入：<em>A</em><br>在当前行之后插入一行：<em>o</em><br>在当前行之前插入一行：<em>O</em></p>
<blockquote>
<p>跳转</p>
</blockquote>
<p>跳到到行尾：<em>$</em><br>跳到到行首：<em>0</em><br>跳到n行：<em>nG</em><br>跳到文本末尾：<em>G</em><br>向下翻页：<em>Control + f</em><br>向上翻页：<em>Control + b</em><br>下一个单词：<em>w</em><br>上一个单词：<em>b</em><br>下一行行首：<em>+</em><br>上一行行首：<em>-</em></p>
<blockquote>
<p>删除</p>
</blockquote>
<p>删除到行首：<em>d$</em><br>删除到行尾：<em>D</em><br>删除光标字符：<em>x</em><br>删除光标后的单词：<em>de</em> </p>
<blockquote>
<p>复制粘贴</p>
</blockquote>
<p>复制当前行：<em>yy</em><br>复制从光标到行尾的内容：<em>y$</em><br>复制从光标到行首的内容：<em>y^</em><br>粘贴到光标右侧：<em>p</em><br>粘贴到光标左侧：<em>P</em></p>
<blockquote>
<p>查找</p>
</blockquote>
<p>查找：<em>/content</em>（ <em>n</em> 跳到下一个内容 ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;插入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当前位置前插入：&lt;em&gt;i&lt;/em&gt;&lt;br&gt;在当前行首插入：&lt;em&gt;I&lt;/em&gt;&lt;br&gt;在当前位置后插入：&lt;em&gt;a&lt;/em&gt;&lt;br&gt;在当前行尾插入：&lt;em&gt;A&lt;/em&gt;&lt;br&gt;在当前行之后插入一行
    
    </summary>
    
      <category term="vim" scheme="https://nancelglap.github.io/categories/vim/"/>
    
    
      <category term="vim" scheme="https://nancelglap.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Model Factory</title>
    <link href="https://nancelglap.github.io/2017/06/06/Model-Factory/"/>
    <id>https://nancelglap.github.io/2017/06/06/Model-Factory/</id>
    <published>2017-06-06T01:24:32.000Z</published>
    <updated>2017-06-19T11:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>运用 <em><code>Model Factory</code></em> 本地化并且创建数据库数据</p>
</blockquote>
<p><strong>可生成的字段：<code>https://github.com/fzaninotto/Faker</code></strong></p>
<hr>
<blockquote>
<p>一、用tinker生成 </p>
</blockquote>
<p>1、在 <code>database\factories</code> 中创建或使用文件，根据上述网址添加字段<br>2、本地化（使用中文创建数据）：修改 <em><code>App\Providers\AppServiceProvider.php</code></em> 的 <em><code>boot</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Generator</span> <span class="title">as</span> <span class="title">FakerGenerator</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">FakerFacotry</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//singleton方法：启动laravel项目的时候，该方法将写在里面的类返回单例模式给Laravel全局使用</span></div><div class="line">   <span class="keyword">$this</span>-&gt;app-&gt;singleton(FakerGenerator::class, <span class="function"><span class="keyword">Function</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> FakerFacotry::create(<span class="string">'zh_CN'</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">php artisan tinker      <span class="comment">//进入tinker</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(ModelName::class, num)-&gt;make()      <span class="comment">//num为要生成的数据个数，make方法只生成数据不加入数据库</span></div><div class="line">factory(ModelName::class, num)-&gt;create()    <span class="comment">//num为要生成的数据个数，create方法将生成的数据加入数据库</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、用DB Seed生成</p>
</blockquote>
<p>1、生成 <em><code>seeder</code></em> 文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:seeder</span> <span class="selector-tag">FileName</span></div></pre></td></tr></table></figure></p>
<p>2、改 <em><code>database\seeds\FileName</code></em> 中的 <em><code>run</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    factory(\App\ModelName::class, num)-&gt;create();  <span class="comment">//num为要创建的数据条数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、因为执行 <em><code>php artisan db:seed</code></em> 默认执行 <em><code>DatabaseSeeder</code></em> 文件，故要在该文件加入以下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;call(FileName::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
<p>4、执行<em><code>php artisan db:seed</code></em></p>
<h3 id="如果要生成一个另一个表的数据"><a href="#如果要生成一个另一个表的数据" class="headerlink" title="如果要生成一个另一个表的数据"></a>如果要生成一个另一个表的数据</h3><p>1、在ModelFactory中增加<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\ModelName::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> $password;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="comment">//'name' =&gt; $faker-&gt;name,</span></div><div class="line">        <span class="comment">//'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,</span></div><div class="line">        <span class="comment">//'password' =&gt; $password ?: $password = bcrypt('secret'),</span></div><div class="line">        <span class="comment">//'remember_token' =&gt; str_random(10),</span></div><div class="line">        <span class="string">'title'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'intro'</span> =&gt; $faker-&gt;paragraph,</div><div class="line">        <span class="string">'time'</span> =&gt; $faker-&gt;dateTime,</div><div class="line">        <span class="string">'image'</span> =&gt; $faker-&gt;imageUrl,</div><div class="line">    ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>2、在<em><code>DatabaseSeeder</code></em> 文件加入以下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;call(FileName::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;运用 &lt;em&gt;&lt;code&gt;Model Factory&lt;/code&gt;&lt;/em&gt; 本地化并且创建数据库数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;可生成的字段：&lt;code&gt;https://github.com/fzaninotto/
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="database" scheme="https://nancelglap.github.io/tags/database/"/>
    
      <category term="data" scheme="https://nancelglap.github.io/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Event</title>
    <link href="https://nancelglap.github.io/2017/06/04/Laravel-Event/"/>
    <id>https://nancelglap.github.io/2017/06/04/Laravel-Event/</id>
    <published>2017-06-04T03:00:56.000Z</published>
    <updated>2017-06-19T11:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当触发某个事件时自动完成一系列的操作</p>
</blockquote>
<a id="more"></a>
<p>1、如果要修改新 <em><code>Event</code></em> 的名称，修改 <em><code>EventProvider.php</code></em> 中的 <em><code>listen</code></em> 数组<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $listen = [</div><div class="line">    <span class="string">'App\Events\NewEventName1'</span> =&gt; [</div><div class="line">        <span class="string">'App\Listeners1\ListenersName1'</span>,</div><div class="line">        <span class="string">'App\Listeners1\ListenersName2'</span>,</div><div class="line">        ...</div><div class="line">    ],</div><div class="line">    <span class="string">'App\Events\NewEventName2'</span> =&gt; [</div><div class="line">        <span class="string">'App\Listeners2\ListenersName1'</span>,</div><div class="line">        <span class="string">'App\Listeners2\ListenersName2'</span>,</div><div class="line">        ...</div><div class="line">    ],</div><div class="line">    ...</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>2、到 <em><code>listener</code></em> <strong>监听</strong>文件中的 <em><code>handle</code></em> 函数编写当事件触发时要执行的操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、触发事件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event(<span class="keyword">new</span> \App\Events\EventName());</div></pre></td></tr></table></figure></p>
<blockquote>
<p>引用功能模块</p>
</blockquote>
<p>1、<strong>引入模块功能</strong>，修改 <em><code>__construct()</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListenerName</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Filesystem $filesystem)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;filesystem = $filesystem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、<strong>编写处理操作</strong>，修改 <em><code>handle</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;filesystem-&gt;method();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>示例：触发用户事件</p>
</blockquote>
<p>1、更改 <em><code>Event</code></em> 文件中的 <em><code>__construct()</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventName</span> <span class="keyword">extends</span> <span class="title">Event</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">public</span> $user;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span>     //接收事件发生时传来的用户数据参数</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、更改 <em><code>listener</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    $event-&gt;user-&gt;name;     <span class="comment">//由Event文件传来的数据，引用用户名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>Route</code></em> 触发事件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$user = \App\User::find(<span class="number">1</span>);     </div><div class="line">event(<span class="keyword">new</span> \App\Events\EventName($user));    <span class="comment">//在Event文件编写了__construct()，所以传用户数据进去能进行以后操作</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>用event优化用户注册</p>
</blockquote>
<p>1、在 <em><code>model</code></em> 中定义方法取代 <em><code>modelName::create()</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(array $array)</span>       //<span class="title">array</span>为用户数据构成的数组</span></div><div class="line">&#123;</div><div class="line">    $user = <span class="keyword">static</span>::create($array);</div><div class="line"></div><div class="line">    event(<span class="keyword">new</span> EventName($user));    <span class="comment">//触发事件完成listener中handle方法内容</span></div><div class="line">    <span class="keyword">return</span> $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>event</code></em> 文件中修改 <em><code>__construct</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $user;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>listener</code></em> 文件中修改 <em><code>handle</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> $event-&gt;user-&gt;email;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当触发某个事件时自动完成一系列的操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="Event" scheme="https://nancelglap.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 向 Container 添加自定义类</title>
    <link href="https://nancelglap.github.io/2017/06/03/Laravel-%E5%90%91-Container-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
    <id>https://nancelglap.github.io/2017/06/03/Laravel-向-Container-添加自定义类/</id>
    <published>2017-06-03T02:10:52.000Z</published>
    <updated>2017-06-19T11:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、通过 <em><code>php artisan make:provider ProviderName</code></em> 创建一个 <em><code>provider</code></em></p>
<p>2、在 <em><code>app</code></em> 创建一个新的目录，目录创建新的<strong>类文件</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace App\directoryName</div><div class="line"></div><div class="line">class className &#123;</div><div class="line">    public function fname () </div><div class="line">    &#123;</div><div class="line">        ...;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在新建的 <em><code>provider</code></em> 中的 <em><code>register</code></em> 函数绑定全局自己自定义的类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassName();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、（放入IOC中，可以在任何地方使用 <em><code>app(&#39;name&#39;)</code></em>实现 <code>3</code> 中的类）在 <em><code>config\app.php</code></em> 的 <em><code>provider</code></em> 数组中增加新建的 <em><code>provider</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span> =&gt; [</div><div class="line">    ...</div><div class="line">    App\Providers\NewServiceProvider::class;        <span class="comment">//NewServiceProvider为新建的provider文件名</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>laravel</code></em> 的 <strong>任何地方</strong>可以调用类已经类里面的方法（<em><code>app</code></em> 内的参数名必须是在新 <em><code>provider</code></em> 的 <em><code>register</code></em> 函数中绑定的通过 <em><code>app</code></em> 绑定的名字）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在web.php中调用</span></div><div class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    $var = app(<span class="string">'name'</span>);     <span class="comment">//实例化了一个ClassName对象</span></div><div class="line">    $var-&gt;fname();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、通过 &lt;em&gt;&lt;code&gt;php artisan make:provider ProviderName&lt;/code&gt;&lt;/em&gt; 创建一个 &lt;em&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;2、在 &lt;em&gt;&lt;code&gt;app&lt;/code&gt;&lt;/em
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Http状态码</title>
    <link href="https://nancelglap.github.io/2017/06/01/Http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://nancelglap.github.io/2017/06/01/Http状态码/</id>
    <published>2017-06-01T03:05:30.000Z</published>
    <updated>2017-06-19T11:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Http常用状态码</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>2**：成功处理请求的状态代码 </p>
</blockquote>
<p><em><code>200</code></em>   （成功）        服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 </p>
<p><em><code>201</code></em>   （已创建）      请求成功并且服务器创建了新的资源。 </p>
<p><em><code>202</code></em>   （已接受）      服务器已接受请求，但尚未处理。 </p>
<p><em><code>203</code></em>   （非授权信息）   服务器已成功处理了请求，但返回的信息可能来自另一来源。 </p>
<p><em><code>204</code></em>   （无内容）      服务器成功处理了请求，但没有返回任何内容。 </p>
<p><em><code>206</code></em>   （部分内容）    服务器成功处理了部分 GET 请求。</p>
<blockquote>
<p>3**：要完成请求，需要进一步操作</p>
</blockquote>
<p><em><code>300</code></em>   （多种选择）      针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </p>
<p><em><code>301</code></em>   （永久移动）      请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p>
<p><em><code>303</code></em>   （查看其他位置）      请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p>
<p><em><code>304</code></em>   （未修改）      自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </p>
<p><em><code>305</code></em>   （使用代理）      请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </p>
<p><em><code>302</code></em>   （临时移动）      服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<p><em><code>307</code></em>   （临时重定向）      服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<blockquote>
<p>4**：请求错误</p>
</blockquote>
<p><em><code>400</code></em>   （错误请求）      服务器不理解请求的语法。 </p>
<p><em><code>401</code></em>   （未授权）      请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </p>
<p><em><code>403</code></em>   （禁止）      服务器拒绝请求。</p>
<p><em><code>404</code></em>   （未找到）      服务器找不到请求的网页。</p>
<p><em><code>405</code></em>   （方法禁用）      禁用请求中指定的方法。 </p>
<p><em><code>406</code></em>   （不接受）      无法使用请求的内容特性响应请求的网页。 </p>
<p><em><code>407</code></em>   （需要代理授权）      此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p>
<p><em><code>408</code></em>   （请求超时）      服务器等候请求时发生超时。 </p>
<p><em><code>409</code></em>   （冲突）      服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </p>
<p><em><code>410</code></em>   （已删除）      如果请求的资源已永久删除，服务器就会返回此响应。</p>
<p><em><code>411</code></em>   （需要有效长度）      服务器不接受不含有效内容长度标头字段的请求。 </p>
<p><em><code>412</code></em>   （未满足前提条件）      服务器未满足请求者在请求中设置的其中一个前提条件。 </p>
<p><em><code>413</code></em>   （请求实体过大）      服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </p>
<p><em><code>414</code></em>   （请求的 URI 过长）      请求的 URI（通常为网址）过长，服务器无法处理。 </p>
<p><em><code>415</code></em>   （不支持的媒体类型）      请求的格式不受请求页面的支持。 </p>
<p><em><code>416</code></em>   （请求范围不符合要求）      如果页面无法提供请求的范围，则服务器会返回此状态代码。 </p>
<p><em><code>417</code></em>   （未满足期望值）      服务器未满足”期望”请求标头字段的要求。</p>
<blockquote>
<p>5**：服务器错误</p>
</blockquote>
<p><em><code>500</code></em>   （服务器内部错误）  服务器遇到错误，无法完成请求。 </p>
<p><em><code>501</code></em>   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 </p>
<p><em><code>502</code></em>   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 </p>
<p><em><code>503</code></em>   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </p>
<p><em><code>504</code></em>   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </p>
<p><em><code>505</code></em>   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Http常用状态码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Http" scheme="https://nancelglap.github.io/categories/Http/"/>
    
    
      <category term="Http" scheme="https://nancelglap.github.io/tags/Http/"/>
    
      <category term="project" scheme="https://nancelglap.github.io/tags/project/"/>
    
      <category term="status code" scheme="https://nancelglap.github.io/tags/status-code/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://nancelglap.github.io/2017/05/30/PhpStorm/"/>
    <id>https://nancelglap.github.io/2017/05/30/PhpStorm/</id>
    <published>2017-05-30T13:32:47.000Z</published>
    <updated>2017-06-19T11:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: PhpStorm<br>date: 2017-05-30 21:32:47<br>tags:</p>
<ul>
<li>ide</li>
<li>PhpStorm<br>categories: </li>
<li>phpstorm</li>
</ul>
<hr>
<blockquote>
<p>PhpStorm快捷键等</p>
</blockquote>
<a id="more"></a>
<p>一、通用类<br>1、*<code>Command + Shift + A</code>：搜索配置项（搜索<code>keymap</code>改快捷键）<br>2、<code>Command + P</code>：文件之间跳转<br>3、<code>Command + B</code>：查看类的关系<br>4、<code>Command + Control + S</code>：查看类里面的方法等</p>
<p>二、编辑类<br>1、<code>Command + Delete</code>：删除光标行<br>2、<code>Shift + Delete</code>：删除光标后面所有内容<br>3、<code>Control + Delete</code>：删除光标前面所有内容<br>4、<code>Control + Shift + Delete</code>：删除光标所在单词<br>5、<code>Command + Shift+ D</code>：复制当前行到下一行<br>6、<code>Command + D</code>：逐个选相同的词（多点编辑）<br>7、<code>Command + Control + D</code>：全选相同的词（多点编辑）<br>8、<code>Command + G</code>：选中下一个光标所在一样的词<br>9、<code>Command + Shift + G</code>：选中上一个光标所在一样的词</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: PhpStorm&lt;br&gt;date: 2017-05-30 21:32:47&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ide&lt;/li&gt;
&lt;li&gt;PhpStorm&lt;br&gt;categories: &lt;/li&gt;
&lt;li&gt;phpstorm&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;PhpStorm快捷键等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你站住项目进度</title>
    <link href="https://nancelglap.github.io/2017/05/20/%E4%BD%A0%E7%AB%99%E4%BD%8F%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/"/>
    <id>https://nancelglap.github.io/2017/05/20/你站住项目进度/</id>
    <published>2017-05-20T13:00:50.000Z</published>
    <updated>2017-06-11T14:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>你站住后台项目进度记录<br><a id="more"></a><br>5.20</p>
</blockquote>
<h2 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a><strong>已完成</strong></h2><p>1、初步了解微信小程序语法内容<br>2、了解JWT替代原session完成登录机制<br>3、写完了用户登录的AuthController</p>
<h2 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a><strong>待完成</strong></h2><p>1、各个接口编写<br>2、数据库的创建<br>3、继续了解小程序语法，做简单的测试<br>4、服务器的部署，http转https</p>
<blockquote>
<p>5.23</p>
</blockquote>
<h2 id="已完成-1"><a href="#已完成-1" class="headerlink" title="已完成"></a><strong>已完成</strong></h2><p>1、完成JWT替代原session完成登录机制<br>2、了解JWT整个验证流程</p>
<h2 id="待完成-1"><a href="#待完成-1" class="headerlink" title="待完成"></a><strong>待完成</strong></h2><p>1、其他接口的编写<br>2、了解小程序语法，做简单测试<br>3、服务器的部署，http转https</p>
<blockquote>
<p>5.24</p>
</blockquote>
<h2 id="已完成-2"><a href="#已完成-2" class="headerlink" title="已完成"></a><strong>已完成</strong></h2><p>1、完成JWT中间件验证<br>2、写完几个api接口</p>
<h2 id="待完成-2"><a href="#待完成-2" class="headerlink" title="待完成"></a><strong>待完成</strong></h2><p>1、用户编辑接口（点击删除删除信息）<br>2、了解小程序语法，做简单测试<br>3、服务器的部署，http转https</p>
<blockquote>
<p>5.25</p>
</blockquote>
<h2 id="已完成-3"><a href="#已完成-3" class="headerlink" title="已完成"></a><strong>已完成</strong></h2><p>1、将 <em><code>token</code></em> 放入 <em><code>header</code></em> 中完成 <em><code>jwt</code></em> 中间件的验证</p>
<h2 id="待完成-3"><a href="#待完成-3" class="headerlink" title="待完成"></a><strong>待完成</strong></h2><p>1、其他接口编写<br>2、用户编辑接口<br>3、了解小程序语法，做简单测试<br>4、买服务器，服务器部署，http转https</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你站住后台项目进度记录&lt;br&gt;
    
    </summary>
    
    
      <category term="ustopmoving" scheme="https://nancelglap.github.io/tags/ustopmoving/"/>
    
      <category term="你站住" scheme="https://nancelglap.github.io/tags/%E4%BD%A0%E7%AB%99%E4%BD%8F/"/>
    
      <category term="loading" scheme="https://nancelglap.github.io/tags/loading/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序相关文档</title>
    <link href="https://nancelglap.github.io/2017/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/"/>
    <id>https://nancelglap.github.io/2017/05/20/微信小程序相关文档/</id>
    <published>2017-05-20T01:58:03.000Z</published>
    <updated>2017-06-19T11:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与小程序相关网站</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>文档类</p>
</blockquote>
<p><strong>微信小程序官方文档：</strong><code>https://mp.weixin.qq.com/debug/wxadoc/dev/</code><br><strong>&lt;简书&gt;小程序开发专栏：</strong><code>http://www.jianshu.com/c/dfdc2bbd1315</code><br><strong>W3Cschool文档：</strong><code>http://www.w3cschool.cn/weixinapp/weixinapp-app.html</code></p>
<blockquote>
<p>各功能实现</p>
</blockquote>
<p><strong>功能合集：</strong><code>http://weixin1024.cn/forum.php?mod=viewthread&amp;tid=1027&amp;extra=page%3D1</code></p>
<blockquote>
<p>小程序账号申请</p>
</blockquote>
<p><strong>&lt;有道云笔记&gt;：</strong><code>http://note.youdao.com/share/?id=744b94b02c28321c8f930e1f495624e5&amp;type=note#/</code></p>
<blockquote>
<p>项目案例</p>
</blockquote>
<p><strong>项目列表：</strong><code>http://blog.csdn.net/qq137722697/article/details/52988719</code><br><strong>小黄车小程序：</strong><code>http://www.jianshu.com/p/68e3b8927a77</code><br><strong><github>项目：</github></strong><code>http://www.cnblogs.com/tuyile006/p/6268961.html</code></p>
<blockquote>
<p>登录注册实现</p>
</blockquote>
<h2 id="维护用户登录态可以用JWT完成"><a href="#维护用户登录态可以用JWT完成" class="headerlink" title="维护用户登录态可以用JWT完成"></a><strong>维护用户登录态可以用JWT完成</strong></h2><p>1、注意设置JWT过去时间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$payload = [</div><div class="line">            <span class="string">'email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),</div><div class="line">            <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>)，</div><div class="line">            <span class="string">'exp'</span> =&gt; time()+<span class="number">60</span>*<span class="number">60</span>   <span class="comment">//设置token过期时间</span></div><div class="line">        ];</div><div class="line">$token = JWTAuth::attempt($payload)</div></pre></td></tr></table></figure></p>
<p><strong>&lt;简书&gt;后台登录文章：</strong><code>http://www.jianshu.com/p/6096e8522c4c</code><br><strong><csdn>注册登录实现：</csdn></strong><code>http://blog.csdn.net/qq_19558705/article/details/65935818?utm_source=gold_browser_extension</code></p>
<blockquote>
<p>http站点转https站点</p>
</blockquote>
<p><strong>在nginx服务器下配置和安装阿里云购买的SSL证书：</strong><code>http://sanwen.net/a/hmdfcoo.html</code></p>
<blockquote>
<p>request请求(前端后台数据交互)</p>
</blockquote>
<p><strong>request请求：</strong><code>http://blog.csdn.net/qq_19558705/article/details/60783448</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与小程序相关网站&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Wechat" scheme="https://nancelglap.github.io/categories/Wechat/"/>
    
    
      <category term="Mini Programes" scheme="https://nancelglap.github.io/tags/Mini-Programes/"/>
    
      <category term="Wechat" scheme="https://nancelglap.github.io/tags/Wechat/"/>
    
  </entry>
  
  <entry>
    <title>PHP 面向对象编程</title>
    <link href="https://nancelglap.github.io/2017/05/14/PHP-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://nancelglap.github.io/2017/05/14/PHP-面向对象编程/</id>
    <published>2017-05-14T08:19:52.000Z</published>
    <updated>2017-06-19T11:04:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>PHP 面向对象相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>final关键字</p>
</blockquote>
<h2 id="final关键字只能用来标记类和方法"><a href="#final关键字只能用来标记类和方法" class="headerlink" title="final关键字只能用来标记类和方法"></a><strong>final关键字只能用来标记类和方法</strong></h2><p><strong>1、final标记的类不能被继承</strong><br><strong>2、final标记的方法不能被子类覆盖，是最终版本</strong></p>
<blockquote>
<p>__call()方法</p>
</blockquote>
<h2 id="当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来"><a href="#当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来" class="headerlink" title="当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来"></a><strong>当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($function_name, $args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> $function_name;</div><div class="line">        print_r($args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> test();</div><div class="line">$test -&gt; hello(<span class="string">'you'</span>, <span class="string">'are'</span>, <span class="string">'sb'</span>);</div><div class="line"></div><div class="line"><span class="comment">//程序不会退出继续执行</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"11111"</span>;</div></pre></td></tr></table></figure>
<p>上述的输出结果为<code>hello Array([0] =&gt; you [1] =&gt; are [2] =&gt; sb)</code></p>
<blockquote>
<p>static 和 const</p>
</blockquote>
<h2 id="1、static"><a href="#1、static" class="headerlink" title="1、static"></a>1、static</h2><p>（1）<strong>static的成员在类第一次被加载的时候分配空间，被实例化的对象共用，属于类，无法用<code>$this</code>访问</strong><br>（2）在类内部访问<code>static成员</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>::$变量名      <span class="comment">//有'$'</span></div></pre></td></tr></table></figure></p>
<p>（3）在类外部访问<code>static成员</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName::$变量名     <span class="comment">//有'$'</span></div></pre></td></tr></table></figure></p>
<h2 id="2、const"><a href="#2、const" class="headerlink" title="2、const"></a>2、const</h2><p>（1）<strong>const为在类内部定义常量的方法</strong><br>（2）在类内部访问<code>const属性</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>::变量名       <span class="comment">//没有'$'</span></div></pre></td></tr></table></figure></p>
<p>（3）在类外部访问<code>const属性</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName::变量名      <span class="comment">//没有'$'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>trait</p>
</blockquote>
<p><strong>解决代码重用问题</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">trait</span> NameTrait &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="string">'something'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className1</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">NameTrait</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className2</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">NameTrait</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> ClassName1()-&gt;fun();</div><div class="line"><span class="keyword">new</span> ClassName2()-&gt;fun();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>public、protected、private</p>
</blockquote>
<p><strong>protected方法不能直接在继承的类的对象中访问，要在继承类中重新定义一个方法里面调用 <em><code>$this-&gt;method</code></em></strong><br>1、public声明的成员可以在<em>任何位置</em>调用<br>2、protected声明的成员只有在<em>类的内部</em>还有<em>子类</em>中可以调用<br>3、private声明的成员只有在<em>类的内部</em>可以调用<br>4、调用方法为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span> -&gt; name;      <span class="comment">//调用成员属性</span></div><div class="line"><span class="keyword">$this</span> -&gt; <span class="function"><span class="keyword">function</span><span class="params">()</span></span>;    <span class="comment">//调用成员方法</span></div></pre></td></tr></table></figure></p>
<h2 id="注：子类的权限只能大于等于父类"><a href="#注：子类的权限只能大于等于父类" class="headerlink" title="注：子类的权限只能大于等于父类"></a><strong>注：子类的权限只能大于等于父类</strong></h2><blockquote>
<p>接口（Interface）</p>
</blockquote>
<h2 id="定义：类里面所有的方法都为抽象方法的类称为接口"><a href="#定义：类里面所有的方法都为抽象方法的类称为接口" class="headerlink" title="定义：类里面所有的方法都为抽象方法的类称为接口"></a><strong>定义：类里面所有的方法都为抽象方法的类称为接口</strong></h2><p><strong>1、接口内不能声明变量，但可以声明常量constant</strong><br><strong>2、所有成员都是public权限</strong><br><strong>3、声明接口使用关键字<code>interface</code></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">One</span> </span>&#123;</div><div class="line">    <span class="comment">//定义一个常量</span></div><div class="line">    <span class="keyword">const</span> constant = <span class="string">'constant value'</span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个抽象方法"fun1"</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义了抽象方法"fun2"</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>4、定义接口的子类实现接口中全部抽象方法使用关键字<code>implements</code></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Three</span> <span class="keyword">implements</span> <span class="title">One</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>5、子类必须实现所有的抽象方法才能被实例化</strong><br><strong>6、一个类可以实现多个接口</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Four</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span>, ... </span>&#123;</div><div class="line">    <span class="comment">//必须把所有接口中的方法都实现才可以实例化对象</span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>7、在继承一个类的同时实现多个接口，先继承再实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Four</span> <span class="keyword">extends</span> <span class="title">ClassName1</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span>, ... </span>&#123;</div><div class="line">    <span class="comment">//所有接口中的方法都要实现才可以实例化对象</span></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>面向接口编程</p>
</blockquote>
<p>在需要用到<strong>类作为参数</strong>的方法中将<strong>接口</strong>作为参数，过后传参数只需要传一个<strong>实现的接口的对象</strong>就可以<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 创建一个接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">($message)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 实现接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">class1</span> <span class="keyword">implements</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 实现接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">class2</span> <span class="keyword">implements</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建一个类</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $hello;</div><div class="line"></div><div class="line">    <span class="comment">//参数为接口</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(hello $hello)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;hello = $hello;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $message = <span class="string">"Nancelglap"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;hello-&gt;show($message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当要切换类的时候就不用再更改construct方法中的hello接口，直接改实例化对象的类名</span></div><div class="line">$demo = <span class="keyword">new</span> Controller(<span class="keyword">new</span> class1);</div><div class="line">$demo -&gt; show();</div><div class="line"></div><div class="line">$demo = <span class="keyword">new</span> Controller(<span class="keyword">new</span> class2);</div><div class="line">$demo -&gt; show();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PHP 面向对象相关&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="https://nancelglap.github.io/categories/php/"/>
    
    
      <category term="php" scheme="https://nancelglap.github.io/tags/php/"/>
    
      <category term="OOP" scheme="https://nancelglap.github.io/tags/OOP/"/>
    
      <category term="面向对象" scheme="https://nancelglap.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Git相关</title>
    <link href="https://nancelglap.github.io/2017/05/13/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>https://nancelglap.github.io/2017/05/13/git相关操作/</id>
    <published>2017-05-13T07:33:41.000Z</published>
    <updated>2017-06-19T11:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>与git相关的内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>Git配置</p>
</blockquote>
<p>一、增加配置项<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span>/<span class="keyword">system</span> 配置名 <span class="string">"值"</span></div></pre></td></tr></table></figure></p>
<p>1、如果只在当前项目增加配置<br>    （1）切换到当前项目<br>    （2）<code>git config 配置名 &quot;值&quot;</code><br>1、<em><code>--global</code></em> 将配置放到home目录下<em>（<code>~/.gitconfig</code>）</em><br>2、<em><code>--system</code></em> 将配置放到<em><code>/etc/.gitconfig</code></em>中<br>3、<em><code>--local</code></em> 将配置放到每一个项目中<br>4、常用配置有<em><code>user.name</code></em>、<em><code>user.eamil</code></em>，<em><code>color.ui</code></em>，<em><code>core.editor</code></em></p>
<p>二、查看配置项<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">config</span> 配置名</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git基本工作流程</p>
</blockquote>
<p>1、查看修改状态<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git status</span></div></pre></td></tr></table></figure></p>
<p>2、初始化当前目录<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git init</span></div></pre></td></tr></table></figure></p>
<p>3、如果有文件修改，先加入 <em><code>staged area</code></em><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">add </span>文件名 / git <span class="keyword">add </span>.</div></pre></td></tr></table></figure></p>
<p>4、更新提交到 <em><code>staged area</code></em> 的内容（只修改没执行<code>git add</code>的不会更新）<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> commit -m <span class="string">"更新描述"</span></div></pre></td></tr></table></figure></p>
<p>5、查看 <em><code>commit</code></em> 的内容<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span>     <span class="comment">//按q退出</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>.gitignore</p>
</blockquote>
<p>将上传的文件内容加入此文件中，更新会忽略此文件<br>1、用PhpStorm编辑的，加入<em><code>.idea</code></em><br>2、用Mac系统的，加入<em><code>.DS_Store</code></em></p>
<blockquote>
<p>Git分支</p>
</blockquote>
<p><strong>想修改之前的bug，但是又不想将还没写完的新内容提交上去等</strong></p>
<p>1、查看分支<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git branch</span></div></pre></td></tr></table></figure></p>
<p>2、回到某个文件提交之前的内容<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="comment">-- app/Http/routes.php</span></div></pre></td></tr></table></figure></p>
<p>3、创建分支、切换到分支<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span><span class="keyword">BranchName</span></div><div class="line"><span class="symbol">git</span> checkout <span class="keyword">BranchName</span></div><div class="line"></div><div class="line"><span class="symbol">git</span> checkout -<span class="keyword">b </span><span class="keyword">BranchName </span> //创建分支并切换到该分支</div></pre></td></tr></table></figure></p>
<p>4、合并分支（在<em><code>matser</code></em>下操作）<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">merge</span> BranchName</div></pre></td></tr></table></figure></p>
<p>5、删除分支<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d <span class="keyword">BranchName</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git分支merge冲突的修改</p>
</blockquote>
<p><strong>当<em><code>master</code></em>和分支中同个文件修改存在冲突，则需要处理</strong></p>
<h2 id="必须是两个分支的文件都已经git-add和git-commit-m-quot-content-quot-操作"><a href="#必须是两个分支的文件都已经git-add和git-commit-m-quot-content-quot-操作" class="headerlink" title="必须是两个分支的文件都已经git add和git commit -m&quot;content&quot;操作"></a>必须是两个分支的文件都已经<em><code>git add</code></em>和<em><code>git commit -m&quot;content&quot;</code></em>操作</h2><p>1、切换到<em><code>master</code></em>，执行 <em><code>git merge BranchName</code></em>，会报有冲突</p>
<p>2、进入冲突文件，删掉不要的冲突内容，然后执行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> fileName</span></div><div class="line">git commit</div><div class="line"></div><div class="line">//进入到vim后保存退出</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git设置快捷键</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.s</span> status  <span class="comment">//设置后用 git s 替代 git status</span></div></pre></td></tr></table></figure>
<p><strong>全局设置快捷键</strong><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim ~<span class="string">/.zshrc</span></div><div class="line"></div><div class="line"><span class="string">//</span>加入以下内容</div><div class="line"><span class="keyword">alias</span> gs=<span class="string">"git status"</span>   <span class="string">//</span>设置后用 gs 替代 git status</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git stash</p>
</blockquote>
<p><strong>运用场景：如果在一个分支上开发一个模块同时，又要回到master中改bug，执行<em><code>git stash</code></em>可以将分支上的修改先放到一边，回到<em><code>master</code></em>中更新内容</strong></p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git stash <span class="built_in">list</span>      <span class="comment">//查看之前拿开的内容</span></div><div class="line">git stash <span class="built_in">apply</span> stash@&#123;num&#125;     <span class="comment">//恢复相应num的内容</span></div><div class="line">git stash pop       <span class="comment">//回复内容并删除，省略掉drop步骤</span></div><div class="line">git stash <span class="built_in">drop</span>      <span class="comment">//删掉list中拿开的内容</span></div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>1、将在 <em><code>master</code></em> 中修改好的合并到<strong>未完成</strong>的分支上<br>2、<em><code>master</code></em> 未融合<strong>未完成</strong>的分支的内容</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><strong>一、修改 <em><code>master</code></em> 上的内容，合并到分支上，但分支内容不合并到 <em><code>master</code></em> 上</strong></p>
<p>1、修改分支的内容</p>
<p>2、在分支执行 <em><code>git stash</code></em></p>
<p>3、在 <em><code>master</code></em> 分支中更改内容，改完之后<em><code>gaa</code></em>、<em><code>gc</code> “content”</em></p>
<p>4、回到 <em><code>master</code></em> 分支，执行<em><code>git merge BranchName</code></em> 合并</p>
<p><strong>二、继续完成分支上的内容，完成后合并到 <em><code>master</code></em></strong></p>
<p>1、<em><code>git checkout BranchName</code></em>切换到分支</p>
<p>2、<em><code>git stash apply</code></em> 或 <em><code>git stash pop</code></em> 拿回原来拿开的问题</p>
<p>3、继续写分支内容，写完然后 <em><code>gaa</code></em>、<em><code>gc</code> “content”</em></p>
<p>4、回到 <em><code>master</code></em> 分支，执行<em><code>git merge BranchName</code></em> 合并</p>
<blockquote>
<p>本地更新代码后更新到github上</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"描述内容"</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<blockquote>
<p>本地更新到远程服务器上</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"描述内容"</span>     <span class="comment">//只有更改文件的目录才会改描述内容</span></div><div class="line">git <span class="keyword">push</span></div><div class="line"></div><div class="line"><span class="comment">//切到服务器，进入项目目录</span></div><div class="line">cd <span class="regexp">/var/</span>www<span class="regexp">/laravel/</span></div><div class="line">git pull</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;与git相关的内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="https://nancelglap.github.io/categories/Git/"/>
    
    
      <category term="server" scheme="https://nancelglap.github.io/tags/server/"/>
    
      <category term="git" scheme="https://nancelglap.github.io/tags/git/"/>
    
      <category term="github" scheme="https://nancelglap.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>VPS上配置和域名解析</title>
    <link href="https://nancelglap.github.io/2017/05/13/VPS%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%92%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    <id>https://nancelglap.github.io/2017/05/13/VPS上配置和域名解析/</id>
    <published>2017-05-13T07:17:39.000Z</published>
    <updated>2017-06-19T11:05:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、更改-etc-nginx-sites-avaliable-default"><a href="#1、更改-etc-nginx-sites-avaliable-default" class="headerlink" title="1、更改/etc/nginx/sites-avaliable/default"></a><strong>1、更改<code>/etc/nginx/sites-avaliable/default</code></strong></h2><p>修改<code>server</code>中的<code>server_name</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">server_name</span> <span class="selector-tag">elective</span><span class="selector-class">.com</span> <span class="selector-tag">www</span><span class="selector-class">.elective</span><span class="selector-class">.com</span>;</div></pre></td></tr></table></figure></p>
<h2 id="2、重启nginx使配置文件生效"><a href="#2、重启nginx使配置文件生效" class="headerlink" title="2、重启nginx使配置文件生效"></a><strong>2、重启nginx使配置文件生效</strong></h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo service nginx restart</span></div></pre></td></tr></table></figure>
<h2 id="3、解析域名"><a href="#3、解析域名" class="headerlink" title="3、解析域名"></a><strong>3、解析域名</strong></h2><p>（1）复制IP地址<br>（2）打开dnspod进行域名解析<code>https://www.dnspod.cn/</code><br>（3）将记录类型为<code>A</code>的记录值修改为<code>IP地址</code><br>（4）复制上方的DNS修改内容，到<strong>godaddy</strong>网站<br><code>https://sg.godaddy.com/zh?isc=gennbacn29&amp;countrview=1&amp;currencytype=CNY&amp;mkwid=WFSMCUdy&amp;cvosrc=ppc.baidu</code><br>（5）到<code>mydomain</code>里修改<code>Nameservers</code>，<code>nameservers type</code>改为<code>Custom</code>，两个<code>Nameserver</code>内容粘贴刚才复制的两条内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、更改-etc-nginx-sites-avaliable-default&quot;&gt;&lt;a href=&quot;#1、更改-etc-nginx-sites-avaliable-default&quot; class=&quot;headerlink&quot; title=&quot;1、更改/etc/nginx/s
    
    </summary>
    
      <category term="laravel" scheme="https://nancelglap.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://nancelglap.github.io/tags/laravel/"/>
    
      <category term="VPS" scheme="https://nancelglap.github.io/tags/VPS/"/>
    
      <category term="server" scheme="https://nancelglap.github.io/tags/server/"/>
    
      <category term="Domain" scheme="https://nancelglap.github.io/tags/Domain/"/>
    
  </entry>
  
  <entry>
    <title>安装LEMP环境</title>
    <link href="https://nancelglap.github.io/2017/05/12/%E5%AE%89%E8%A3%85LEMP%E7%8E%AF%E5%A2%83/"/>
    <id>https://nancelglap.github.io/2017/05/12/安装LEMP环境/</id>
    <published>2017-05-12T12:04:53.000Z</published>
    <updated>2017-06-19T11:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在mac/linux上安装LEMP环境</p>
</blockquote>
<a id="more"></a>
<p>购买远程服务器VPS教程：<br><code>https://www.laravist.com/series/deploy-laravel-app-on-vps/episodes/1</code></p>
<h2 id="1、先登录远程服务器"><a href="#1、先登录远程服务器" class="headerlink" title="1、先登录远程服务器"></a><strong>1、先登录远程服务器</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@Ip</span> Address</div></pre></td></tr></table></figure>
<p>查看服务器（选择ubuntu14）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<h2 id="2、更新apt-get"><a href="#2、更新apt-get" class="headerlink" title="2、更新apt-get"></a><strong>2、更新apt-get</strong></h2><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>
<h2 id="3、安装语言包"><a href="#3、安装语言包" class="headerlink" title="3、安装语言包"></a><strong>3、安装语言包</strong></h2><p>避免系统语言引起的冲突问题<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> <span class="keyword">language</span>-pack-<span class="keyword">en</span>-base</div></pre></td></tr></table></figure></p>
<h2 id="4、设置语言"><a href="#4、设置语言" class="headerlink" title="4、设置语言"></a><strong>4、设置语言</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">locale-gen</span> <span class="selector-tag">en_US</span><span class="selector-class">.UTF-8</span></div></pre></td></tr></table></figure>
<h2 id="5、安装常用工具"><a href="#5、安装常用工具" class="headerlink" title="5、安装常用工具"></a><strong>5、安装常用工具</strong></h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install -y vim htop git    <span class="comment">//htop查看机器cup等用了多，git用于部署项目</span></div></pre></td></tr></table></figure>
<h2 id="6、安装php7（通过添加ppa方式安装）"><a href="#6、安装php7（通过添加ppa方式安装）" class="headerlink" title="6、安装php7（通过添加ppa方式安装）"></a><strong>6、安装php7（通过添加ppa方式安装）</strong></h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y software-properties-common</div><div class="line">sudo LC_ALL=en_US.UTF-8<span class="built_in"> add-apt-repository </span>ppa:ondrej/php</div><div class="line">sudo apt-get update</div><div class="line">apt-cache search php7.1    //查找php7.1包</div><div class="line"></div><div class="line">sudo apt-get install -y php7.1</div><div class="line">php -v      //查看版本</div><div class="line">sudo apt-get install -y php7.1-mysql</div><div class="line">sudo apt-get install -y php7.1-fpm</div><div class="line">sudo apt-get install -y php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</div></pre></td></tr></table></figure>
<h2 id="7、安装mysql"><a href="#7、安装mysql" class="headerlink" title="7、安装mysql"></a><strong>7、安装mysql</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> mysql-<span class="keyword">server</span><span class="number">-5.6</span></div></pre></td></tr></table></figure>
<h2 id="8、安装nginx"><a href="#8、安装nginx" class="headerlink" title="8、安装nginx"></a><strong>8、安装nginx</strong></h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install nginx</div></pre></td></tr></table></figure>
<h2 id="9、阿里云服务器用ip地址访问"><a href="#9、阿里云服务器用ip地址访问" class="headerlink" title="9、阿里云服务器用ip地址访问"></a><strong>9、阿里云服务器用ip地址访问</strong></h2><p><code>http://blog.csdn.net/qq_27211105/article/details/55668997</code><br><strong>增加安全组配置规则</strong><br>1、网卡类型：<em>公网</em><br>2、规则方向：<em>入方向</em><br>3、授权策略：<em>允许</em><br>4、协议类型：<em>TCP</em><br>5、端口范围：<em>80/80</em><br>6、授权类型：<em>地址段访问</em><br>7、授权对象：<em>0.0.0.0/0</em><br>8、优先级：<em>1</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在mac/linux上安装LEMP环境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="server" scheme="https://nancelglap.github.io/categories/server/"/>
    
    
      <category term="php" scheme="https://nancelglap.github.io/tags/php/"/>
    
      <category term="mysql" scheme="https://nancelglap.github.io/tags/mysql/"/>
    
      <category term="nginx" scheme="https://nancelglap.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
