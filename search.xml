<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[接口需要的参数]]></title>
      <url>/2017/08/25/%E6%8E%A5%E5%8F%A3%E9%9C%80%E8%A6%81%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目中接口需要的参数</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>提交评论接口</p>
</blockquote>
<p>1、被评论条目的 <code>id</code>（作为 <code>parent_id</code>）<br>2、评论所属文章或其他的 <code>id</code>（用 <code>attach</code> 与所属文章建立关系）</p>
]]></content>
      
        <categories>
            
            <category> api </category>
            
        </categories>
        
        
        <tags>
            
            <tag> api </tag>
            
            <tag> params </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs 用 async 控制并发]]></title>
      <url>/2017/08/19/nodejs-%E7%94%A8-async-%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用 async 函数控制 Node.js 的并发</p>
</blockquote>
<p><strong>async.map</strong> 异步还是根据延时进行<br><strong>async.mapSeries</strong> 一个完了才执行下一个<br><strong>async.mapLimit</strong> 并行执行，第二个参数为最多n个函数并行，只有当其中一个或多个完成的时候才可以继续并行</p>
<p>1、顺序执行，延时的异步操作仍在按队列机制进行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.map(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.1 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.1 handle: '</span> + item.name);</div><div class="line">        <span class="comment">// callback 为 async.map 的第三个参数，第一个参数为错误信息err, 第二个参数为按元素顺序汇总的结果</span></div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.1 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.1 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Jack</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Mike</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Freewind</span></div><div class="line"><span class="comment">// 54.569&gt; 1.1 enter: Test</span></div><div class="line"><span class="comment">// 54.629&gt; 1.1 handle: Test</span></div><div class="line"><span class="comment">// 54.679&gt; 1.1 handle: Mike</span></div><div class="line"><span class="comment">// 54.789&gt; 1.1 handle: Jack</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 handle: Freewind</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 err:</span></div><div class="line"><span class="comment">// 54.879&gt; 1.1 results: [ 'Jack!!!', 'Mike!!!', 'Freewind!!!', 'Test!!!'</span></div></pre></td></tr></table></figure></p>
<p>2、如果中途出错，立刻将错误，以及已经执行完成的结果汇总给最终callback，未执行完的将会在数组中占个空位<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.map(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.2 enter: '</span>, item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        lof(<span class="string">'1.2 handle: '</span> + item.name);</div><div class="line">        <span class="keyword">if</span>(item.name === <span class="string">'Jack'</span>) callback(<span class="string">'myerr'</span>);     <span class="comment">//传一个错误信息参数给最后的callback</span></div><div class="line">        <span class="keyword">else</span> callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);     <span class="comment">//传一个结果给最后callback，错误信息为null</span></div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.2 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.2 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 按延时顺序执行到错误才马上返回</span></div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Jack</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Mike</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Freewind</span></div><div class="line"><span class="comment">// 54.569&gt; 1.2 enter: Test</span></div><div class="line"><span class="comment">// 54.629&gt; 1.2 handle: Test</span></div><div class="line"><span class="comment">// 54.679&gt; 1.2 handle: Mike</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 handle: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 err: myerr</span></div><div class="line"><span class="comment">// 54.789&gt; 1.2 results: [ undefined, 'Mike!!!', , 'Test!!!' ]</span></div><div class="line"><span class="comment">// 54.879&gt; 1.2 handle: Freewind</span></div></pre></td></tr></table></figure></p>
<p>3、顺序执行，一个完了才到下一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.mapSeries(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.3 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.3 handle: '</span> + item.name);</div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.3 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.3 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 54.569&gt; 1.3 enter: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.3 handle: Jack</span></div><div class="line"><span class="comment">// 54.789&gt; 1.3 enter: Mike</span></div><div class="line"><span class="comment">// 54.899&gt; 1.3 handle: Mike</span></div><div class="line"><span class="comment">// 54.899&gt; 1.3 enter: Freewind</span></div><div class="line"><span class="comment">// 55.209&gt; 1.3 handle: Freewind</span></div><div class="line"><span class="comment">// 55.209&gt; 1.3 enter: Test</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 handle: Test</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 err:</span></div><div class="line"><span class="comment">// 55.269&gt; 1.3 results: [ 'Jack!!!', 'Mike!!!', 'Freewind!!!', 'Test!!!' ]</span></div></pre></td></tr></table></figure></p>
<p>4、顺序执行出错，把错误已经执行完的传给最终callback，未执行的忽略<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">dalay</span>:<span class="number">200</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Mike'</span>, <span class="attr">delay</span>: <span class="number">100</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Freewind'</span>, <span class="attr">delay</span>:<span class="number">300</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'Test'</span>, <span class="attr">dalay</span>:<span class="number">50</span>&#125;];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.mapSeries(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.4 enter: '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.4 handle: '</span> + item.name);</div><div class="line">        callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.4 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.4 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 47.616&gt; 1.4 enter: Jack</span></div><div class="line"><span class="comment">// 47.821&gt; 1.4 handle: Jack</span></div><div class="line"><span class="comment">// 47.821&gt; 1.4 enter: Mike</span></div><div class="line"><span class="comment">// 47.931&gt; 1.4 handle: Mike</span></div><div class="line"><span class="comment">// 47.931&gt; 1.4 err: myerr</span></div><div class="line"><span class="comment">// 47.932&gt; 1.4 results: [ 'Jack!!!', undefined ]</span></div></pre></td></tr></table></figure></p>
<p>5、并行执行，控制并行数量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.mapLimit(arr, <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>)</span>&#123;</div><div class="line">    log(<span class="string">'1.5 enter '</span> + item.name);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        log(<span class="string">'1.5 handle: '</span> + item.name);</div><div class="line">        <span class="keyword">if</span>(item.name === <span class="string">'Jack'</span>) callback(<span class="string">'myerr'</span>);</div><div class="line">        <span class="keyword">else</span> callback(<span class="literal">null</span>, item.name + <span class="string">'!!!'</span>);</div><div class="line">    &#125;, item.delay);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    log(<span class="string">'1.5 err: '</span>, err);</div><div class="line">    log(<span class="string">'1.5 results: '</span>, results);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//57.797&gt; 1.5 enter: Jack</span></div><div class="line"><span class="comment">//57.800&gt; 1.5 enter: Mike</span></div><div class="line"><span class="comment">//57.900&gt; 1.5 handle: Mike</span></div><div class="line"><span class="comment">//57.900&gt; 1.5 enter: Freewind</span></div><div class="line"><span class="comment">//58.008&gt; 1.5 handle: Jack</span></div><div class="line"><span class="comment">//58.009&gt; 1.5 err: myerr</span></div><div class="line"><span class="comment">//58.009&gt; 1.5 results: [ undefined, 'Mike!!!' ]</span></div><div class="line"><span class="comment">//58.208&gt; 1.5 handle: Freewind</span></div><div class="line"><span class="comment">//58.208&gt; 1.5 enter: Test</span></div><div class="line"><span class="comment">//58.273&gt; 1.5 handle: Test</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> async </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs 模块]]></title>
      <url>/2017/08/15/Nodejs-%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Nodejs模块</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>superagent</p>
</blockquote>
<p>用来发起 <code>get</code> 或者 <code>post</code> 请求<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install superagent --save</span></div></pre></td></tr></table></figure></p>
<p><code>http://visionmedia.github.io/superagent</code></p>
<blockquote>
<p>cheerio</p>
</blockquote>
<p>用来获取html元素内容（配合<code>superagent</code>使用）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install cheerio --save</span></div></pre></td></tr></table></figure></p>
<p><code>https://github.com/cheeriojs/cheerio</code></p>
<blockquote>
<p>superagent 配合 cheerio 写爬虫</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    superagent.get(<span class="string">'https://cnodejs.org/'</span>)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, sres</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="keyword">return</span> next(err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(sres.text);</div><div class="line">        <span class="keyword">var</span> items = [];</div><div class="line">        $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $element = $(element);</div><div class="line">            items.push(&#123;</div><div class="line">                <span class="attr">title</span>: $element.attr(<span class="string">'title'</span>),</div><div class="line">                <span class="attr">href</span>: $element.attr(<span class="string">'href'</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        res.send(items);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>eventproxy </p>
</blockquote>
<p>用来处理并发执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install eventproxy</span></div></pre></td></tr></table></figure></p>
<p>并发处理例子:<br><code>ep.all</code> 监听了三个事件，每当一个源的数据抓取完成时，就通过 <code>ep.emit()</code> 告诉 <code>ep</code> 自己，某某事件已经完成了。<br>只有当三个事件都完成的时候，才会调用末尾的回调函数统一处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eventproxy = <span class="built_in">require</span>(<span class="string">"eventproxy"</span>)</div><div class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</div><div class="line">ep.all(<span class="string">'data1_event'</span>, <span class="string">'data2_event'</span>, <span class="string">'data3_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data1, data2, data3</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> html = fuck(data1, data2, data3);</div><div class="line">    render(html);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$.get(<span class="string">'http://data1_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data1_event'</span>, data);</div><div class="line">&#125;);</div><div class="line">$.get(<span class="string">'http://data2_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data2_event'</span>, data);</div><div class="line">&#125;);</div><div class="line">$.get(<span class="string">'http://data3_source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    ep.emit(<span class="string">'data3_event'</span>, data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="重复异步协作"><a href="#重复异步协作" class="headerlink" title="重复异步协作"></a>重复异步协作</h4><p><code>https://github.com/JacksonTian/eventproxy#%E9%87%8D%E5%A4%8D%E5%BC%82%E6%AD%A5%E5%8D%8F%E4%BD%9C</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到 topicUrls 之后</span></div><div class="line"></div><div class="line"><span class="comment">// 得到一个 eventproxy 的实例</span></div><div class="line"><span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</div><div class="line"></div><div class="line"><span class="comment">// ep 重复监听 `topicUrls.length` 次 `topic_html` 事件并在所有事件完成后</span></div><div class="line"><span class="comment">// 再执行后面的回调函数</span></div><div class="line">ep.after(<span class="string">'topic_html'</span>, topicUrls.length, <span class="function"><span class="keyword">function</span>(<span class="params">topics</span>) </span>&#123;</div><div class="line">    <span class="comment">// topics 是个数组，包含 40 次 ep.emit('topic_html', pair) 中的 40 个 pair数组</span></div><div class="line"></div><div class="line">    <span class="comment">// map 函数为一个映射，topics 数组里的所有元素都按回调函数处理</span></div><div class="line">    topics = topics.map(<span class="function"><span class="keyword">function</span> (<span class="params">topicPair</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> topicUrl = topicPair[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> topicHtml = topicPair[<span class="number">1</span>];</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(topicHtml);</div><div class="line">        <span class="keyword">return</span> (&#123;</div><div class="line">            <span class="comment">// .text() 返回被选元素的文本内容</span></div><div class="line">            title: $(<span class="string">'.topic_full_title'</span>).text().trim(),</div><div class="line">            <span class="attr">href</span>: topicUrl,</div><div class="line">            <span class="comment">// .eq(0)：将匹配元素集指定 index 上的一个，即拿到Class 'reply_content'的第一个</span></div><div class="line">            comment1: $(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim(),</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'final:'</span>);</div><div class="line">    <span class="built_in">console</span>.log(topics);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 全部代码中先执行以下代码，并发请求对应 url 并返回数组</span></div><div class="line">topicUrls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">topicUrl</span>) </span>&#123;</div><div class="line">    supergent.get(topicUrls)</div><div class="line">        .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fetch'</span> + topicUrl + <span class="string">' successfully'</span>);</div><div class="line">            ep.emit(<span class="string">'topic_html'</span>, [topicUrl, res.text]);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>用 cheerio 和 superagent 配合写爬虫</p>
</blockquote>
<p>取每个对应标签的属性值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&apos;ClassName&apos;).each(function (idx, element) &#123;</div><div class="line">    var $element = $(element);</div><div class="line">    var href = $element.attr(&apos;href&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>爬知乎日报实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> titles = [];</div><div class="line"><span class="keyword">const</span> url = <span class="string">'daily.zhihu.com'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</div><div class="line">    superagent.get(url)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(res.text);</div><div class="line">        $(<span class="string">'.title'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $element = $(element);</div><div class="line">            <span class="comment">// $element.attr('href')</span></div><div class="line">            <span class="keyword">var</span> title = $element.text();</div><div class="line">            titles.push(title);</div><div class="line">        &#125;);</div><div class="line">        resolve();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(titles);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> modules </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 语法]]></title>
      <url>/2017/07/22/js-%E5%9B%9E%E8%B0%83%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>JS 语法相关问题</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>变量</p>
</blockquote>
<p>函数内部变量不用 <code>var</code> 声明就默认视为 <code>全局变量</code></p>
<blockquote>
<p>回调</p>
</blockquote>
<p>1、如果一个函数的参数有回调函数，那么会 <code>先执行完</code> 这个函数再执行回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span> (<span class="params">callback</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> e = ...;</div><div class="line">    <span class="comment">// 执行一些操作</span></div><div class="line">    callback(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 传参方法1，用匿名函数传参</span></div><div class="line">fun1(<span class="function"><span class="keyword">function</span> (<span class="params">var</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">var</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 传参方法2，先定义函数后传参</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span> (<span class="params">var</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">var</span>);</div><div class="line">&#125;</div><div class="line">fun1(fun2);</div></pre></td></tr></table></figure></p>
<p>2、如果函数自带回调函数的参数，会先执行完这个函数的全部（包括延迟操作）才执行回调函数<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* collection.<span class="built_in">find</span>().toArray()是个有延迟操作的函数</div><div class="line">* 必须等到延迟操作完成，即查询完成才会把err，result两个参数返回给回调执行</div><div class="line">*/</div><div class="line">collection.<span class="built_in">find</span>(whereStr).toArray(<span class="function"><span class="keyword">function</span><span class="params">(err, result)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span>(err)</div><div class="line">    &#123;</div><div class="line">      console.<span class="built_in">log</span>(<span class="string">'Error:'</span>+ err);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;     </div><div class="line">    console.<span class="built_in">log</span>(result);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>3、一个函数最后返回的值对下一个函数有用，下一个函数可以加到上一个函数的一个参数（回调函数）内部<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">"mongodb"</span>).MongoClient;</div><div class="line"><span class="keyword">var</span> DB_CNN_STR = <span class="string">'mongodb://localhost:27017/test'</span>;  <span class="comment">//连接test数据库</span></div><div class="line"></div><div class="line">Mogoclient.connect(DB_CNN_STR, <span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>)</span>&#123;</div><div class="line">    <span class="comment">// 连接 site 表</span></div><div class="line">    <span class="keyword">var</span> collection = db.collection(<span class="string">'site'</span>);</div><div class="line"></div><div class="line">    collection.find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(err);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 因为上面返回的 collection 要用作后面的查询</div><div class="line">* 可以改写为以下</div><div class="line">*/</div><div class="line">db.collection(<span class="string">'site'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> error;</div><div class="line">    collection.find().toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>异步</p>
</blockquote>
<p><code>js</code> 为单线程异步处理，所以有延迟操作的都会被放入 <code>任务队列</code> 中，异步操作完成后会在 <code>任务队列</code> 放置一个事件，当 <code>主进程完成时</code> 才会去执行 <code>任务队列</code> 中 <code>已完成</code> 并在 <code>等待</code> 的 <code>异步事件</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 因为函数内容有回调函数，所以会在等数据库查询操作完成时才会去执行回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>)</span></div><div class="line">&#123;</div><div class="line">    asyncFn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = 数据库查询操作;</div><div class="line">        callback(result);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 错误例子</div><div class="line">* asyncFn为一个查询数据库的异步函数，此函数还没执行完就直接执行return</div><div class="line">* 所以 result 还没被查询出来就被return了</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span></div><div class="line">&#123;</div><div class="line">    asyncFn(<span class="function"><span class="keyword">function</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = 数据库查询操作;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Promise</p>
</blockquote>
<p>1、用 <code>Promise</code> 解决异步问题，<code>Promise</code> 的三个状态 <code>Pending(等待)</code>， <code>fulfilled(完成)</code>， <code>rejected(失败)</code><br>帮助更好地执行异步</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* fs.readFile为异步读取文件函数</div><div class="line">* 如果不用 promise，在fs.readFile函数外直接调用他返回的data，此时data还未被完全读出</div><div class="line">* 使用 promise，在 promise 回调函数里异步函数在未完成前，promise都处于 "pending" 状态，不会进行下一步操作</div><div class="line">* 只有当异步完成，成功时调用resolve()，将 Promise状态设为 fulfilled；失败时调用reject()，将 Promise状态设为 rejected</div><div class="line">* 当状态为 fulfilled 时执行 result.then() 回调函数的内容，函数参数就是 resolve() 的内部参数</div><div class="line">* 当状态为 rejected 时执行 result.catch() 回调函数的内容，函数参数就是 reject() 的内部参数</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    fs.readFile(<span class="string">'filename'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        resolve(data.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>2、<code>Promise</code> 写法有两种：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3、在 <code>Promise</code> then 中使用 <code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在第一个Promise执行成功后执行他对应的then</div><div class="line">* fun1 是个 Promise对象（在外部定义），执行成功后返回的 e 传给后面的 then 作为参数</div><div class="line">* message 是值就是 e 的值</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    ...;</div><div class="line">    resolve(d);</div><div class="line">&#125;);</div><div class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">    fun1(var1, var2).then(<span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(message);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">var1, var2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> e = var1 + var2;</div><div class="line">        resolve(e);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>闭包</p>
</blockquote>
<p>主要作用：从外部读取函数内部 <code>局部变量</code></p>
<p><code>1</code> 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
<p><code>2</code> 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">　　alert(object.getNameFunc()());</div><div class="line"></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// 外部变量改变了内部属性值，所以 this 指向的原来对象改变，找不到原来对象</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line">　　<span class="keyword">var</span> object = &#123;</div><div class="line">　　　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　　　<span class="keyword">return</span> that.name;</div><div class="line">　　　　　　&#125;;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">　　alert(object.getNameFunc()());</div><div class="line"><span class="comment">// My object</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> callback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mongodb]]></title>
      <url>/2017/07/21/Mongodb/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Mongodb相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>启动 Mongodb</p>
</blockquote>
<p>root用户启动<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo mongod </span></div><div class="line">mongo</div></pre></td></tr></table></figure></p>
<p>普通用户启动<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo mongod <span class="comment">--auth</span></div><div class="line">mongo</div><div class="line"></div><div class="line">#交互界面</div><div class="line"><span class="keyword">use</span> admin</div><div class="line">db.auth(<span class="symbol">'username</span>', <span class="symbol">'password</span>')</div></pre></td></tr></table></figure></p>
<blockquote>
<p>创建用户</p>
</blockquote>
<p>账号权限只针对数据库，在相应数据库下创建用户，在 <code>test</code> 数据库下创建一个用户<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">use</span> <span class="keyword">test</span></div><div class="line">switched to <span class="keyword">db</span> <span class="keyword">test</span></div><div class="line">&gt; <span class="keyword">db</span>.createUser(</div><div class="line">...&#123;</div><div class="line">...user:<span class="string">"username"</span>,</div><div class="line">...<span class="keyword">pwd</span>:<span class="string">"password"</span>,</div><div class="line">...roles:[&#123;role:<span class="string">"userAdminAnyDatabase"</span>, <span class="keyword">db</span>:<span class="string">"test"</span>&#125;] </div><div class="line">...&#125;</div><div class="line">...)</div></pre></td></tr></table></figure></p>
<p>角色：</p>
<blockquote>
<p>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> database </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js Express]]></title>
      <url>/2017/07/19/Node-js-Express/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Express 框架应用</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>路由</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"主页 GET 请求"</span>);</div><div class="line">    res.send(<span class="string">'Hello GET'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</div><div class="line">    res.send(<span class="string">'Hello POST'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>静态文件</p>
</blockquote>
<p>服务器文件必须跟 <code>public</code> 文件夹在 <code>同一个目录下</code></p>
<p>设置静态路径方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"> </div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"> </div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">   res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> host = server.address().address</div><div class="line">  <span class="keyword">var</span> port = server.address().port</div><div class="line"> </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>浏览器访问 <code>http://127.0.0.1:8081/images/logo.png</code></p>
<blockquote>
<p>GET 方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, functino(req, res) &#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">"index.htm"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/process_get'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> response = [</div><div class="line">        <span class="string">"first_name"</span> : req.query.first_name,</div><div class="line">        <span class="string">"last_name"</span> : req.query.last_name</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> host = server.address().address</div><div class="line">    <span class="keyword">var</span> port = server.address().port</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>POST 方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'.'</span> + <span class="string">'index.htm'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// 输出 JSON 格式</span></div><div class="line">    <span class="keyword">var</span> response = &#123;</div><div class="line">        <span class="string">"first_name"</span> : req.body.first_name,</div><div class="line">        <span class="string">"last_name"</span> : req.body.last_name</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> host = server.address().address</div><div class="line">    <span class="keyword">var</span> port = server.address().port</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>文件上传</p>
</blockquote>
<p>上传到本地<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>);</div><div class="line"></div><div class="line">app.use(multer(&#123;<span class="attr">dest</span>: <span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.sendFile(__dirname + <span class="string">'/'</span> + <span class="string">'index.htm'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);  <span class="comment">//上传文件信息</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> des_file = __dirname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</div><div class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">            fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(err) &#123;</div><div class="line">                        <span class="built_in">console</span>.log(err);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        response = &#123;</div><div class="line">                            <span class="attr">message</span> : <span class="string">'File uploaded successfully'</span>,</div><div class="line">                            <span class="attr">filename</span>: req.files[<span class="number">0</span>].originalname</div><div class="line">                        &#125;;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">console</span>.log(response);</div><div class="line">                    res.end(<span class="built_in">JSON</span>.stringify(response));</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Express </category>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js Request]]></title>
      <url>/2017/07/19/Node-js-Request/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Node.js GET and POST</p>
</blockquote>
<a id="more"></a>
<p>参考 <code>http://www.runoob.com/nodejs/node-js-get-post.html</code></p>
<blockquote>
<p>GET</p>
</blockquote>
<p>1、引入 <code>util</code> 、<code>url</code> 模块<br>2、用 <code>url.parse()</code> 解析 <code>url参数</code><br>3、<code>url.inspect()</code> 将对象转换为字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></div><div class="line">    &#125;);</div><div class="line">    res.end(util.inspect(url.parse(req.url, <span class="literal">true</span>)));</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>获取URL的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset = UTF-8'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 解析 url 参数</span></div><div class="line">    <span class="keyword">var</span> params = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">    res.write(<span class="string">"网站名: "</span> + params.name);</div><div class="line">    res.write(<span class="string">"\n"</span>);</div><div class="line">    res.write(<span class="string">"网站URL: "</span> + params.url);</div><div class="line">    res.end();</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>POST</p>
</blockquote>
<p>1、先用 <code>data</code> 事件监听函数，接收请求体的数据，并累加到变量中<br>2、引入 <code>querystring</code> 模块解析请求体信息<br>3、通过 <code>res.write(变量名.字段名)</code> 引用信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line">var querystring = require(&quot;querystring&quot;);</div><div class="line"></div><div class="line">var postHTML =</div><div class="line">    &apos;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程 Node.js 实例&lt;/title&gt;&lt;/head&gt;&apos; +</div><div class="line">    &apos;&lt;body&gt;&apos; +</div><div class="line">    &apos;&lt;form method=&quot;post&quot;&gt;&apos; +</div><div class="line">    &apos;网站名： &lt;input name=&quot;name&quot;&gt;&lt;br&gt;&apos; +</div><div class="line">    &apos;网站 URL： &lt;input name=&quot;url&quot;&gt;&lt;br&gt;&apos; +</div><div class="line">    &apos;&lt;input type=&quot;submit&quot;&gt;&apos; +</div><div class="line">    &apos;&lt;/form&gt;&apos; +</div><div class="line">    &apos;&lt;/body&gt;&lt;/html&gt;&apos;;</div><div class="line"></div><div class="line">http.createServer(function(req, res)&#123;</div><div class="line">    var body = &quot;&quot;;</div><div class="line">    req.on(&quot;data&quot;, function(chunk) &#123;</div><div class="line">        body += chunk;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    req.on(&quot;end&quot;, function() &#123;</div><div class="line">        body = querystring.parse(body);</div><div class="line">        if(body.name &amp;&amp; body.url)</div><div class="line">        &#123;</div><div class="line">            res.write(&quot;网站名:&quot; + body.name);</div><div class="line">            res.write(&quot;URL:&quot; + body.url);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            res.write(postHTML);</div><div class="line">        &#125;</div><div class="line">        res.end();</div><div class="line">    &#125;);</div><div class="line">&#125;).listen(3000);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Request </category>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Request </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel-admin]]></title>
      <url>/2017/07/17/laravel-admin/</url>
      <content type="html"><![CDATA[<blockquote>
<p>laravel-admin 脚手架相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>添加路由</p>
</blockquote>
<p>命令会创建路由器文件app/Admin/Controllers/UserController.php<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan admin:make UserController <span class="comment">--model=App\\User</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>添加路由配置</p>
</blockquote>
<p>在laravel-admin的路由配置文件app/Admin/routes.php里添加一行<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$router-&gt;resource(<span class="string">'users'</span>, UserController::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>添加菜单链接</p>
</blockquote>
<p>打开<a href="http://localhost:8000/admin/auth/menu,添加对应的menu" target="_blank" rel="external">http://localhost:8000/admin/auth/menu,添加对应的menu</a></p>
<blockquote>
<p>控制展示图片大小</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="function"><span class="title">grid</span>-&gt;</span><span class="function"><span class="title">picture</span>()-&gt;</span>image(<span class="string">'http://localhost:8000/upload'</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>展示关联模型</p>
</blockquote>
<p><code>http://z-song.github.io/laravel-admin/#/zh/model-grid?id=%e5%85%b3%e8%81%94%e6%a8%a1%e5%9e%8b</code></p>
<blockquote>
<p>form建立一对多</p>
</blockquote>
<p><code>http://z-song.github.io/laravel-admin/#/zh/model-form-fields?id=%e4%b8%80%e5%af%b9%e5%a4%9a</code></p>
<blockquote>
<p>上传图片</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意创建文件夹</div></pre></td></tr></table></figure>
<p>1、创建存储配置，<code>config/filesystems.php</code> 添加一项 <code>disk</code>，设置上传的路径为<code>public/upload</code>：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'admin'</span> =&gt; [</div><div class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'local'</span>,</div><div class="line">        <span class="string">'root'</span> =&gt; public_path(<span class="string">'upload'</span>),</div><div class="line">        <span class="string">'visibility'</span> =&gt; <span class="string">'public'</span>,</div><div class="line">    ],</div><div class="line">``` </div><div class="line"><span class="number">2</span>、选择上传的`disk`，修改`config/admin.php`</div></pre></td></tr></table></figure></p>
<p>‘upload’  =&gt; [</p>
<pre><code>&apos;disk&apos; =&gt; &apos;admin&apos;,

&apos;directory&apos;  =&gt; [
    &apos;image&apos;  =&gt; &apos;image&apos;,
    &apos;file&apos;   =&gt; &apos;file&apos;,
],

&apos;host&apos; =&gt; &apos;http://localhost:8000/upload/&apos;,
</code></pre><p>],<br>```</p>
]]></content>
      
        <categories>
            
            <category> admin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> admin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 语法]]></title>
      <url>/2017/07/06/Python-%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python 语法相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>格式化输出</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></div><div class="line"><span class="string">'Hello, world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</div><div class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>lists(列表)</p>
</blockquote>
<p>1、lists中有lists可以看为<code>二维数组</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>][<span class="number">0</span>]</div><div class="line"><span class="string">'asp'</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>tuple(元组)</p>
</blockquote>
<p><strong>一旦初始化不能修改(tuple的每个元素指向不变)</strong><br>1、如果要定义一个元素的 <em><code>tuple</code></em>，要用<code>,</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">1</span>,)</div></pre></td></tr></table></figure></p>
<p>2、<em><code>tuple</code></em> 中的 <em><code>lists</code></em> 可变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>])</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>dict（字典）</p>
</blockquote>
<p>1、关联数组<br>2、<em><code>key</code></em>必须是不可变的对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure>
<p>判断 <em><code>key</code></em> 是否存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>set</p>
</blockquote>
<p>1、是一组key的集合，但是不存储values（key不能重复，重复元素在set中被自动过滤）<br>2、创建一个<em><code>set</code></em>，提供一个<em><code>list</code></em>作为集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>3、可以对两个set进行交集，并集等操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>判断语句</p>
</blockquote>
<p><strong>不要忘记加’：’</strong><br>1、常规 <code>if else</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'your age is'</span>, age)</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'your age is'</span>, age)</div><div class="line">    print(<span class="string">'teenager'</span>)</div></pre></td></tr></table></figure></p>
<p>2、<code>elif</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</div><div class="line">    print(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>循环</p>
</blockquote>
<h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a><code>for in</code></h3><p>依次把 <em><code>list</code></em> 或 <em><code>tuple</code></em> 中的每个元素迭代出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">    print(name)</div></pre></td></tr></table></figure></p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">    sum = sum + n</div><div class="line">    n = n - <span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="for循环引用两个变量"><a href="#for循环引用两个变量" class="headerlink" title="for循环引用两个变量"></a>for循环引用两个变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line"><span class="meta">... </span>    print(x, y)</div><div class="line">...</div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">2</span> <span class="number">4</span></div><div class="line"><span class="number">3</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>函数</p>
</blockquote>
<p>1、函数名可以赋值给变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) </div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>2、从其他文件导入函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> fileName <span class="keyword">import</span> functionName</div></pre></td></tr></table></figure></p>
<p>3、函数名也是变量</p>
<p>如果将函数名指向其他对象，函数将不能被正常调用，要恢复要重启交互环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-10</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</div></pre></td></tr></table></figure></p>
<p>由于 <code>abs</code> 函数实际上是定义在 <code>import builtins</code> 模块中的，所以要让修改 <code>abs</code> 变量的指向在其它模块也生效，要用 <code>import builtins; builtins.abs = 10</code></p>
<p>4、空函数<br><em><code>pass</code></em> 用作占位符，没有 <em><code>pass</code></em> 代码会运行错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p><em><code>pass</code></em> 用在其他语句中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>5、函数返回多个值<br><code>5.1</code> <strong>允许对左边两个变量赋值</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x, y = func(para)   <span class="comment">#函数返回两个值</span></div></pre></td></tr></table></figure></p>
<p><code>5.2</code> <strong>函数返回多个值返回的其实是一个<code>tuple</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y + step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(x,y)</div><div class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(r)</div><div class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</div></pre></td></tr></table></figure></p>
<p>6、函数执行完毕也没有 <em><code>return</code></em> 语句时，自动 <em><code>return None</code></em><br>7、函数参数的默认值<br><code>7.1</code> 基本使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y, n=<span class="number">1</span>, m=<span class="string">'string'</span>)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment">#如果不按顺序传默认值参数要把参数名写上</span></div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>, m=<span class="string">'guangZhou'</span>)</div></pre></td></tr></table></figure></p>
<p><code>7.2</code> 默认参数必须指向不变对象（以下示例默认参数的坑）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</div><div class="line"><span class="comment">#默认参数变量L指向一个list，但是list是可变的，每次调用函数都改变了变量L指向的list，所以下次调用的时候默认参数已经改变</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure>
<p>8、可变参数（参数为tuple\list）<br><strong><code>*nums</code> 表示把 <code>nums</code> 这个 <code>list</code> 的所有元素作为可变参数传进去</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在参数前加一个*号，在函数内部参数接收到的是一个tuple</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</div><div class="line"><span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">#在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure></p>
<p>9、关键字参数（参数为dict）<br><strong>关键字参数允许传入0个或任意个 <code>含参数名</code> 的参数，这些关键字参数在函数内部自动组装为一个 <code>dict</code></strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">def person(name, age, **kw):</div><div class="line">    print('name:', name, 'age:', age, 'other:', kw)</div><div class="line"></div><div class="line"># 1、只传入必选参数</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18)</div><div class="line">name: Nancelglap age: 30 other: &#123;&#125;  </div><div class="line"></div><div class="line"># 2、传入任意个数的 关键字参数</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, city='huizhou', sex='Male')</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 3、先定义一个dict，把dict转换为 关键字参数 传进去</div><div class="line">&gt;&gt;&gt; extra = &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, city=extra['city'], sex=extra['sex'])</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 4、简化3的调用</div><div class="line"># **extra 表示把 extra 这个 dict 的所有 key-value 用关键字参数传入到函数的 **kw参数，kw将获得一个dict</div><div class="line"># kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</div><div class="line">&gt;&gt;&gt; extra = &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line">&gt;&gt;&gt; person('Nancelglap', 18, **extra)</div><div class="line">name: Nancelglap age: 18 other: &#123;'city': 'Huizhou', 'sex': 'Male'&#125;</div><div class="line"></div><div class="line"># 5、限制关键字参数的名字（命名关键字参数）</div><div class="line"># 命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数</div><div class="line"># 只接收city和job作为关键字参数</div><div class="line">def person(name, age, *, city, job):</div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line"># 6、可变参数 + 命名关键字参数</div><div class="line"># 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*</div><div class="line"># 调用时不加参数名会被视为位置参数报错</div><div class="line">def person(name, age, *args, city, job)</div><div class="line">    print(name, age, args, city, job)</div><div class="line"></div><div class="line">&gt;&gt;&gt; person('Jack', 24, 'Beijing', 'Engineer')</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">TypeError: person() takes 2 positional arguments but 4 were given</div><div class="line"></div><div class="line"># 7、命名关键字参数缺省值</div><div class="line"># 命名关键字参数有默认值，调用时可不传入参数</div><div class="line">def person(name, age, *, city='Beijing', job):</div><div class="line">    print(name, age, city, job)</div><div class="line"></div><div class="line">&gt;&gt;&gt; person('Jack', 24, job='Engineer')</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<p><strong>使用命名关键字参数，如果没有可变参数，必须加一个’*’，否则会被认为位置参数</strong></p>
<p>10、参数组合<br>参数定义顺序：<code>必选参数</code>,<code>默认参数</code>,<code>可变参数</code>,<code>命名关键字参数</code>,<code>关键字参数</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># a、b：必选参数 c：默认参数 args：可变参数 kw：关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="comment"># a、b：必选参数 c：默认参数 d：命名关键字参数 kw：关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="keyword">None</span>)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="keyword">None</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 通过 tuple 和 dict 调用上述函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</div><div class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">'x'</span>: <span class="string">'#'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>对于任意函数，都可以通过类似func(<em>args, *</em>kw)的形式调用它，无论它的参数是如何定义的。</p>
<hr>
<blockquote>
<p>高阶函数</p>
</blockquote>
<p>一个函数就可以<code>接收另一个函数</code>作为<code>参数</code>，这种函数就称之为高阶函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="comment"># 交互</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">-5</span>, <span class="number">6</span>, abs)</div><div class="line"><span class="number">11</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>函数作为返回值</p>
</blockquote>
<p>1、<code>闭包（Closure）</code><br>-&gt; 在函数 <code>lazy_sum</code> 中又定义了函数 <code>sum</code><br>-&gt; 内部函数 <code>sum</code> 可以引用外部函数<code>lazy_sum</code> 的参数和局部变量<br>-&gt; 当 <code>lazy_sum</code> 返回函数 <code>sum</code> 时，相关参数和变量都保存在返回的函数中</p>
<p>2、当我们调用 <code>lazy_sum()时</code>，每次调用都会返回一个 <code>新的函数</code>，即使传入相同的参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">        ax = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            ax = ax + n</div><div class="line">        <span class="keyword">return</span> ax</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line"><span class="comment"># 交互</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class="number">0x101c6ed90</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1==f2</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>闭包</p>
</blockquote>
<p>1、当一个函数返回一个函数后，其内部变量还被新函数引用<br>2、返回的函数没有立刻执行，直到调用 <code>f()</code> 才执行<br>3、返回的函数内部不要引用局部变量，当最后调用 <code>f()</code> 的时候 <code>局部变量</code>可能已经不是当初定义函数时候的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):   <span class="comment"># 每次循环创建一个新的函数</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="comment"># f1(), f2(), f3()调用的结果并不是当时定义时返回的1、4、9</span></div><div class="line"><span class="comment"># 返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>4、如果一定要引用循环变量，再创建一个函数，用该函数的参数绑定循环变量当前值<br>5、闭包可以理解为两个过程 <code>传值调用</code> 和 <code>启动</code>，当有参数传进外部函数时，第一个过程完成，当用 <code>f()</code> 时为启动这个闭包，会接着执行内部函数的内容<br>6、闭包必须先 <code>传值调用</code> 后赋给另一个变量，然后在启动变量调用内部函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i))     <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">    <span class="keyword">return</span> fs</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>切片</p>
</blockquote>
<p><strong>切片可以对 <code>lists</code>、<code>tuple</code>、<code>string</code> 进行操作</strong></p>
<p>1、传统取 <code>list</code> 或 <code>tuple</code> 的部分元素操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(n);</div><div class="line"><span class="meta">... </span>   r.append(L[i])</div><div class="line">...</div><div class="line">&gt;&gt;&gt;&gt; r</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure></p>
<p>2、基本切片<br>（1）<em><code>[n ,m]</code></em>：从索引 <code>n</code> 开始，知道索引 <code>m</code> ，但不包括索引 <code>m</code><br>（2）如果第一个索引是 <code>0</code>，可以省略：<code>[:3]</code></p>
<p>3、倒数切片<br>（1）<code>L[-2:-1]</code>取倒数第二个元素<br>（2）<code>L[-2:]</code>取倒数两个元素</p>
<p>4、间隔切片<br>（1）<code>L[::5]</code>：所有数每5个取一个<br>（2）<code>L[:10:2]</code>：前10个数每两个取一个</p>
<hr>
<blockquote>
<p>迭代</p>
</blockquote>
<p>1、迭代 <em><code>dict</code></em> 的 <em><code>key</code></em>（取出所有<em><code>key</code></em>）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span>    L.append(key)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[a, b, c]</div></pre></td></tr></table></figure></p>
<p>2、迭代 <em><code>dict</code></em> 的 <em><code>value</code></em><br><code>for value in d.values()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</div><div class="line"><span class="meta">... </span>    values.append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>3、同时迭代 <em><code>key</code></em> 和 <em><code>value</code></em><br><code>for k, v in d.items()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span>    keys.append(k)</div><div class="line"><span class="meta">... </span>    values.append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>keys</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>4、判断一个对象是否为可迭代对象<br><strong>通过collections模块的Iterable类型判断</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>列表生成式</p>
</blockquote>
<p>1、基本列表生成式<br><em><code>[操作式 for x in 可迭代对象]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>2、加判断的列表生成式<br><em><code>[操作式 for x in 可迭代对象 if 判断条件]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>3、两层循环，生成全排列<br><em><code>[操作式 for n in 可迭代对象1 for m in 可迭代对象2]</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[n + m <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p>
<p>4、运用示例（列出当前目录下的所有文件和目录名）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)]</div></pre></td></tr></table></figure></p>
<p>5、优化迭代 <code>dict</code> 的 <code>key</code> 和 <code>value</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.iterms()]</div><div class="line">[<span class="string">'y=B'</span>, <span class="string">'x=A'</span>, <span class="string">'z=C'</span>]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>生成器（generator）</p>
</blockquote>
<p>1、作用：节省列表中没必要的空间<br>2、创建一个有很多元素的列表会占用很大的存储空间，如果列表元素可以按某种算法推算出来，就可以在循环中不断推出后面的元素<br>3、<code>generator</code> 保存的是算法<br>4、每次调用 <code>next(g)</code>，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出 <code>StopIteration</code> 的错误<br>5、生成方法：把一个列表生成式的 <code>[]</code> 改成 <code>()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># 一般调用</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>6、循环调用(用 <code>for</code> 循环)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">49</span></div><div class="line"><span class="number">64</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure></p>
<p>7、函数变 <code>generator</code><br>（1）如果一个函数定义中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，而是一个 <code>generator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure></p>
<p>（2）函数内部遇到 <code>yield</code> 语句的时候返回，再次执行从上次返回的 <code>yield</code> 处继续执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step 1'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step 2'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">    print(<span class="string">'step 3'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>(3)当用 <code>for</code> 循环迭代的时候，<code>yield</code> 可以看做将内容存在待用列表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</div><div class="line"><span class="meta">... </span>    print(n)</div><div class="line">...</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span>q</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>（4）<code>for</code> 循环调用 <code>generator</code> 时，拿不到 <code>generator</code> 的 <code>return</code> 语句的返回值，如果想要拿到返回值，要捕获 <code>StopIteration</code> 错误，返回值包含在 <code>StopIteration</code> 的 <code>value</code> 中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = fib(<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>        x = next(g)</div><div class="line"><span class="meta">... </span>        print(<span class="string">'g:'</span>, x)</div><div class="line"><span class="meta">... </span>    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</div><div class="line"><span class="meta">... </span>        print(<span class="string">'Generator return value:'</span>, e.value)</div><div class="line"><span class="meta">... </span>        <span class="keyword">break</span></div><div class="line">...</div><div class="line">g: <span class="number">1</span></div><div class="line">g: <span class="number">1</span></div><div class="line">g: <span class="number">2</span></div><div class="line">g: <span class="number">3</span></div><div class="line">g: <span class="number">5</span></div><div class="line">g: <span class="number">8</span></div><div class="line">Generator <span class="keyword">return</span> value: done</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>迭代器</p>
</blockquote>
<p><strong>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator</strong></p>
<p>一、可以直接作用于 <code>for</code> 循环的对象统称为可迭代对象： <code>Iterable</code><br>1、一类是集合数据类型，如 <code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等<br>2、一类是 <code>generator</code>，包括生成器和带 <code>yield</code> 的 <code>generator function</code></p>
<p>二、<code>generator</code> 都是 <code>Iterator</code> 对象，但 <code>list</code>、<code>dict</code>、<code>str</code> 虽然是 <code>Iterable</code>，却不是 <code>Iterator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterator)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>三、可以通过 <code>iter()</code> 函数将 <code>Iterable</code> 转换为 <code>Iterator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>四、<code>Iterable</code> 和 <code>Iterator</code> 小结<br>1、凡是可作用于 <code>for</code> 循环的对象都是 <code>Iterable</code> 类型<br>2、凡是可作用于 <code>next()</code> 函数的对象都是 <code>Iterator</code> 类型，它们表示一个惰性计算的序列（只有需要返回下一个数据时才会计算）</p>
<p>五、<code>for</code> 循环的本质通过不断调用 <code>next()</code> 函数实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</div><div class="line">    pss</div><div class="line"></div><div class="line"><span class="comment"># 上面等价于以下</span></div><div class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        x = next(it)</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>抛出错误</p>
</blockquote>
<p><em><code>raise TypeError(&#39;Error message&#39;)</code></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</div><div class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 相关]]></title>
      <url>/2017/07/06/Python-%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与 python 相关知识</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>一、保存文件</p>
</blockquote>
<p>当 <code>.py</code> 文件中包含中文，在文件开头加上两行<br>1、第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序<br>2、第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、序列</p>
</blockquote>
<p>python包含 6 中内建的序列，包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</p>
<blockquote>
<p>三、不变对象</p>
</blockquote>
<p>不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。</p>
<blockquote>
<p>四、计算机（Computer）和计算（Compute）</p>
</blockquote>
<p>1、在<code>计算机</code>的层次上，CPU执行的是<code>加减乘除</code>的指令代码，以及<code>各种条件判断和跳转指令</code>，所以，汇编语言是最贴近计算机的语言。<br>2、而<code>计算</code>则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。<br>3、对应到编程语言，就是越<code>低级</code>的语言，越贴近<code>计算机</code>，<code>抽象程度低</code>，<code>执行效率高</code>，比如C语言；越<code>高级</code>的语言，越贴近<code>计算</code>，<code>抽象程度高</code>，<code>执行效率低</code>，比如Lisp语言。</p>
<blockquote>
<p>五、函数式编程</p>
</blockquote>
<p>1、函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量。<br>2、任意一个函数，只要<code>输入</code>是<code>确定</code>的，<code>输出</code>就是<code>确定</code>的，这种纯函数我们称之为<code>没有副作用</code>。<br>3、允许使用变量的程序设计语言，由于函数内部的<code>变量状态不确定</code>，<code>同样的输入</code>，可能得到<code>不同的输出</code>，因此，这种函数是<code>有副作用</code>的。<br>4、函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 函数]]></title>
      <url>/2017/07/06/Python-%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python 函数</p>
</blockquote>
<a id="more"></a>
<h3 id="lists-函数"><a href="#lists-函数" class="headerlink" title="lists 函数"></a>lists 函数</h3><blockquote>
<p>list()</p>
</blockquote>
<p>1、将序列转换成 <em><code>list</code></em><br>2、将 <code>Iterator</code> 计算出整个序列并返回一个 <code>list</code></p>
<blockquote>
<p>name.append()</p>
</blockquote>
<p>往lists中追加元素到末尾<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">'Adam'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>name.pop()</p>
</blockquote>
<p>1、没加参数删除末尾元素，有参数删除索引位置的元素<br>2、<em><code>list</code></em> 不能传 <em><code>字符串</code></em> 参数，<em><code>dict</code></em> 可以</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="string">'Jack'</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>name.insert()</p>
</blockquote>
<p>把元素插到指定位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>name.sort()</p>
</blockquote>
<p>对序列内容排序</p>
<hr>
<blockquote>
<p>enumerate()</p>
</blockquote>
<p>把一个 <code>list</code> 变成 <code>索引-元素对</code> ，可以在 <code>for</code> 循环中同时迭代索引和元素本身<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div><div class="line"><span class="number">2</span> C</div></pre></td></tr></table></figure></p>
<blockquote>
<p>len()</p>
</blockquote>
<p>计算列表元素个数</p>
<h3 id="dict函数"><a href="#dict函数" class="headerlink" title="dict函数"></a>dict函数</h3><blockquote>
<p>get()</p>
</blockquote>
<p>如果 <em><code>key</code></em> 不存在，可以返回自定义的内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>, <span class="string">'not found'</span>)</div><div class="line"><span class="string">'not found'</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>pop()</p>
</blockquote>
<p>删除一个 <em><code>key</code></em></p>
<hr>
<h3 id="set函数"><a href="#set函数" class="headerlink" title="set函数"></a>set函数</h3><blockquote>
<p>add(key)</p>
</blockquote>
<p>添加元素到 <em><code>set</code></em> 中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>remove(key)</p>
</blockquote>
<p>删除元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><blockquote>
<p>ord()</p>
</blockquote>
<p>获取字符的整数表示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</div><div class="line"><span class="number">65</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'中'</span>)</div><div class="line"><span class="number">20013</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>chr()</p>
</blockquote>
<p>把编码转换为对应的字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">66</span>)</div><div class="line"><span class="string">'B'</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>int()</p>
</blockquote>
<p>将数字字符串转换为整数（’123’）</p>
<hr>
<blockquote>
<p>range()</p>
</blockquote>
<p>生成一个从零开始到参数的序列（不包括参数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>str.replace(‘被替代的内容’, ‘要替代的内容’)</p>
</blockquote>
<p>1、替代字符串的内容，但是不改变原有的字符串<br>2、其实是创建一个新的字符串返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'Abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="string">'abc'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>count()</p>
</blockquote>
<p>统计字符串里某个字符串出现的次数，可指定参数在字符串中的开始和结束位置<br><em><code>str.count(sub, start, end)</code></em></p>
<blockquote>
<p>iter()</p>
</blockquote>
<p>把 <code>list</code>、<code>dict</code>、<code>str</code> 等 <code>Iterable</code> 变成 <code>Iterator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="数据类型相关"><a href="#数据类型相关" class="headerlink" title="数据类型相关"></a>数据类型相关</h3><blockquote>
<p>abs()</p>
</blockquote>
<p>求绝对值</p>
<hr>
<blockquote>
<p>int()</p>
<p>float()</p>
<p>str()</p>
<p>bool()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<blockquote>
<p>isinstance()</p>
</blockquote>
<p>数据类型检查<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(x, (int, float))</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote>
<p>map()</p>
</blockquote>
<p>1、<code>map()</code> 接收两个参数，一个是函数，一个是 <code>Iterable</code>，<code>map</code> 将传入的函数<code>依次作用到</code>序列的<code>每个元素</code>，并将结果作为新的 <code>Iterator</code> 返回<br>2、<code>map()</code> 函数返回的是一个 <code>Iterator</code>，是一个<code>惰性序列</code>，要用 <code>list()</code> 函数获得所有结果并返回 <code>list</code><br>3、参数函数接收一个参数，返回的是对这个参数操作后的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1、函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"></div><div class="line"><span class="comment"># 2、把 list 所有数字转为字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>reduce()</p>
</blockquote>
<p>1、<code>reduce()</code> 把一个<code>函数</code>作用在一个<code>序列</code>上，<code>reduce</code> 把结果继续和序列下一个元素做积累计算<br><code>2、</code><strong>函数必须接收两个参数，返回的是对两个参数的操作</strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(<span class="name">f</span>, [x1, x2, x3, x4]) = f(<span class="name">f</span>(<span class="name">f</span>(<span class="name">x1</span>, x2), x3), x4)</div></pre></td></tr></table></figure></p>
<p>结合 <code>map()</code> 和 <code>reduce()</code> 写把 <code>str</code> 转换成 <code>int</code> 的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line">    <span class="keyword">return</span> reduce(char2num, map(fn, s))</div></pre></td></tr></table></figure></p>
<blockquote>
<p>filter()</p>
</blockquote>
<p>1、接收<code>一个函数</code>和<code>一个序列</code>，<code>filter()</code> 把传入的函数依次作用于每个元素，然后根据返回值是 <code>True</code> 还是 <code>False</code> 决定保留还是丢弃该元素<br>2、参数函数 <code>返回值</code> 必须是 <code>bool值</code><br>3、<code>filter()</code> 函数返回的是一个 <code>Iterator</code>，也就是一个惰性序列，所以要强迫 <code>filter()</code> 完成计算结果，需要用 <code>list()</code>函数获得所有结果并返回 <code>list</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在一个list中只保留奇数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果：[1, 5, 9, 15]</span></div></pre></td></tr></table></figure>
<p>把一个序列中的空字符串删掉：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line"></div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'   '</span>])) <span class="comment">#多个空格为bool值为True</span></div><div class="line"><span class="comment"># 结果：['A', 'B', 'C']</span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>sorted()</p>
</blockquote>
<p>函数参数返回一个要排序的内容</p>
<p>1、普通排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</div><div class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure></p>
<p>2、接收一个 <code>key函数</code> 实现自定义排序（返回结果不做传入函数的处理）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure></p>
<p>3、字符串排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据`ASCII`大小比较，大写字母`小于`小写字母</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</div><div class="line">[<span class="string">'Credit'</span>, <span class="string">'Zoo'</span>, <span class="string">'about'</span>, <span class="string">'bob'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 忽略大小写的排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)</div><div class="line">[<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 反向排序，传入第三个参数reverse=True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 定时备份]]></title>
      <url>/2017/06/20/mysql-%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>实现mysql定时备份</p>
</blockquote>
<a id="more"></a>
<p>1、创建备份文件夹<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="built_in">name</span></div></pre></td></tr></table></figure></p>
<p>2、创建备份Shell脚本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vim filename.sh</span></div></pre></td></tr></table></figure></p>
<p>3、加入以下内容<br>（1）username 替换为实际的用户名(保留-u)<br>（2）password 替换为实际的密码（保留-p）<br>（3）DatabaseName 替换为实际的数据库名<br>（4）/home/back改为自己的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">mysqldump -uusername -ppassword DatabaseName &gt; /home/backup/DatabaseName_$(date +%Y%m%d_%H%M%S).sql</div></pre></td></tr></table></figure></p>
<p>4、添加可执行权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> chmod u+x bkDatabaseName.sh</span></div></pre></td></tr></table></figure></p>
<p>5、添加计划任务（改为自己创建的文件信息）<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>crontab -e</div><div class="line"></div><div class="line">*<span class="regexp">/1 * * * * /home</span><span class="regexp">/backup/bk</span>DatabaseName.sh</div></pre></td></tr></table></figure></p>
<p>6、执行时间<br>前面五个*号代表五个数字，数字的取值范围和含义如下：</p>
<p>分钟　（0-59）<br>小時　（0-23）<br>日期　（1-31）<br>月份　（1-12）<br>星期　（0-6）//0代表星期天</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> backup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号]]></title>
      <url>/2017/06/20/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>微信公众号开发相关</p>
</blockquote>
<a id="more"></a>
<p>参考资料：<br><em><code>https://easywechat.org/</code></em><br><em><code>https://github.com/overtrue/laravel-wechat</code></em></p>
<blockquote>
<p>配置</p>
</blockquote>
<p>1、注册相应路由和创建 <em><code>Controller</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $wechat = app(<span class="string">'wechat'</span>);</div><div class="line">        $wechat-&gt;server-&gt;setMessageHandler(<span class="function"><span class="keyword">function</span><span class="params">($message)</span></span>&#123;</div><div class="line">             <span class="keyword">return</span> <span class="string">"您好！欢迎关注我!"</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $wechat-&gt;server-&gt;serve();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、改 <em><code>接口授权</code></em> -&gt; <em><code>网页授权获取用户基本信息</code></em> url 为服务器的域名</p>
<blockquote>
<p>返回信息类</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理微信的请求消息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $wechat = app(<span class="string">'wechat'</span>);</div><div class="line">        $userApi = $wechat-&gt;user;</div><div class="line">        $wechat-&gt;server-&gt;setMessageHandler(<span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($userApi)</span></span>&#123;</div><div class="line">            <span class="keyword">switch</span> ($message-&gt;MsgType) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'event'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到事件消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'text'</span>:</div><div class="line">            <span class="keyword">return</span> $userApi-&gt;get($message-&gt;FromUserName)-&gt;nickname;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'image'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到图片消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'voice'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到语音消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'video'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到视频消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'location'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到坐标消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'link'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到链接消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// ... 其它消息</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'收到其它消息'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> $wechat-&gt;server-&gt;serve();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>操作用户信息</p>
</blockquote>
<p>1、自行完成路由注册，<em><code>Controller</code></em> 创建等操作<br>2、更多用户操作见文档 <em><code>https://easywechat.org/zh-cn/docs/user.html</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">EasyWeChat</span>\<span class="title">Foundation</span>\<span class="title">Applications</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerName</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $wechat;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Applications $wechat)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-wechat = $wechat;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 返回所有关注用户的openId</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">users</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $users = <span class="keyword">$this</span>-&gt;wechat-&gt;user-&gt;lists();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 返回单个已关注用户的信息</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">($openId)</span></span></div><div class="line">    &#123;</div><div class="line">        $user = <span class="keyword">$this</span>-&gt;wechat-&gt;user-&gt;get($openId);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 修改用户备注 （remark方法）</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remark</span><span class="params">($openId)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;wechat-&gt;remark($openId, <span class="string">'备注信息'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">'OK'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>管理公众号素材</p>
</blockquote>
<p>1、自行注册路由和创建 <em><code>Controller</code></em><br>2、参考文档内容<em><code>https://easywechat.org/zh-cn/docs/material.html</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">EasyWeChat</span>\<span class="title">Foundation</span>\<span class="title">Applications</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerName</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $material;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Applications $material)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-material = $material-&gt;material;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 上传public目录下的图片</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">image</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $image = <span class="keyword">$this</span>-&gt;material-&gt;uploadImage(public_path(). <span class="string">'/images/imageName.jpg'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 上传public目录下的音频</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">audio</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $audio = <span class="keyword">$this</span>-&gt;material-&gt;uploadVoice(public_path. <span class="string">'/images/audioName.mp3'</span>);    <span class="comment">//注意支持的格式</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> $audio;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 查看所有上传了的图片信息</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">materials</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $materials = <span class="keyword">$this</span>-&gt;material-&gt;lists(<span class="string">'image'</span>);   <span class="comment">//返回其他素材看文档</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> $materials;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 拿到特定素材信息</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">media</span><span class="params">($mediaId)</span></span></div><div class="line">    &#123;</div><div class="line">        $media = <span class="keyword">$this</span>-&gt;material-&gt;get($mediaId);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $media;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、当用户发音频信息，以客服身份返回信息（其他类型的信息类似）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理微信的请求消息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $wechat = app(<span class="string">'wechat'</span>);</div><div class="line">        $userApi = $wechat-&gt;user;</div><div class="line">        $wechat-&gt;server-&gt;setMessageHandler(<span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($userApi, $wechat)</span></span>&#123;</div><div class="line">            <span class="keyword">switch</span> ($message-&gt;MsgType) &#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="string">'voice'</span>:</div><div class="line">            $message = <span class="keyword">new</span> Voice([<span class="string">'media_id'</span>] =&gt; <span class="string">'要返回的mediaId值'</span>);</div><div class="line"></div><div class="line">            <span class="comment">//$message-&gt;FromUserName拿到用户的openId</span></div><div class="line">            $wechat-&gt;staff-&gt;message($message)-&gt;to($message-&gt;FromUserName)-&gt;send();</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> <span class="string">'string'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> $wechat-&gt;server-&gt;serve();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Wechat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel ACL]]></title>
      <url>/2017/06/16/Laravel-ACL/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Laravel 实现 Access Control Lists</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>ACL权限</p>
</blockquote>
<p>1、生成测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* modelFactory，生成用户自己的文章</div><div class="line">*/</div><div class="line"><span class="string">'user_id'</span> =&gt; factory(App\User::class)-&gt;create()-&gt;id,</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>AuthServiceProvider</code></em> 中的 <em><code>boot</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Gate</span> <span class="title">as</span> <span class="title">GateContract</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line"></div><div class="line">    $gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">            <span class="comment">//登录来的用户id必须等于文章的user_id才有权限查看</span></div><div class="line">            <span class="keyword">return</span> $user-&gt;id === $post-&gt;user_id;  <span class="comment">//$user为登录进来的用户，laravel自动检测</span></div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 对上述代码进行优化</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//AuthServiceProvider.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line"></div><div class="line">    $gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> $user-&gt;owns($post);</div><div class="line">        &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//User.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">owns</span><span class="params">($post)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id == $post-&gt;user_id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>controller</code></em> 中应用认证<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Gate</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $post = Post::findOrFail($id);</div><div class="line">    Auth::loginUsingId(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(Gate::denies(<span class="string">'show-post'</span>, $post))&#123;   <span class="comment">//show-post为在AuthServiceProvider中定义的名称</span></div><div class="line">        abort(<span class="number">403</span>, <span class="string">'Sorry'</span>);       <span class="comment">//如果认证失败就返回403页面</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果不用上面if方法，可以用以下  </span></div><div class="line">    <span class="keyword">$this</span>-&gt;authorize(<span class="string">'show-post'</span>, $post);   </div><div class="line">    <span class="keyword">return</span> $post-&gt;title;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>blade</code></em> 中应用认证（<em><code>@can()标签</code></em>）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 定义了 'show-post' 后只有传进来的$post符合验证规则才会显示标签内内容 --&gt;</span></div><div class="line">@can('show-post', $post)</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">@endcan</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现多个ACL权限</p>
</blockquote>
<p>1、创建一个 与相应 <em><code>model</code></em> 对应的 <em><code>policy</code></em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:policy</span> <span class="selector-tag">policyName</span></div></pre></td></tr></table></figure></p>
<p>2、编写 <em><code>app\Policies\policyName</code></em>，在里面增加函数完成权限操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">(User $user, Post $post)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $user-&gt;owns($post);      <span class="comment">//owns在User的model中定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、启用 <em><code>policy</code></em>：在<em><code>AuthServiceProvider</code></em> 中的 <em><code>$policies</code></em> 数组中注册<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $policies = [</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在Controller中用Gate::denies('method', $post)</div><div class="line">    * 根据第二个参数的类决定用哪个policy验证</div><div class="line">    * 再根据第一个参数用相应policy的method方法验证</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="string">'App\Post'</span> =&gt; <span class="string">'App\Policies\PolicyName'</span>,</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>4、运用 <em><code>policy</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 去掉AuthServiceProvider中的以下部分</div><div class="line">*/</div><div class="line">$gate-&gt;define(<span class="string">'show-post'</span>, <span class="function"><span class="keyword">function</span><span class="params">($user, $post)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> $user-&gt;owns($post);</div><div class="line">    &#125;)；</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 修改Controller中的方法</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $post = Post::findOrFail($id);</div><div class="line">    Auth::loginUsingId(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//method为$post类对应的policyName中的验证函数</span></div><div class="line">    <span class="keyword">if</span>(Gate::denies(<span class="string">'method'</span>, $post))&#123;   </div><div class="line">        abort(<span class="number">403</span>, <span class="string">'Sorry'</span>);       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 如果blade中有<span class="doctag">@can</span>标签，将参数改为验证函数名</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<blockquote>
<p>创建model和表</p>
</blockquote>
<p>1、创建 <em><code>Permission</code></em> 和 <em><code>Role</code></em> model<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//权限</span></div><div class="line">php artisan make:model Permission</div><div class="line"></div><div class="line"><span class="comment">//角色（规定某种权限）</span></div><div class="line">php artisan make:model Role</div></pre></td></tr></table></figure></p>
<p>2、创建相应的表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:migration create_roles_table --create=roles</div></pre></td></tr></table></figure></p>
<p>3、编写 <em><code>migration</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Schema::create(<span class="string">'roles'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">        $table-&gt;string(<span class="string">'name'</span>);     <span class="comment">//admin, member</span></div><div class="line">        $table-&gt;string(<span class="string">'label'</span>)-&gt;nullable();    <span class="comment">//desription of name</span></div><div class="line">        $table-&gt;timestamps();  </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Schema::create(<span class="string">'permissions'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">        $table-&gt;string(<span class="string">'name'</span>);     <span class="comment">//admin, member</span></div><div class="line">        $table-&gt;string(<span class="string">'label'</span>)-&gt;nullable();    <span class="comment">//desription of name</span></div><div class="line">        $table-&gt;timestamps();  </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 关联 roles 和 permissions 表</div><div class="line">    */</div><div class="line">    Schema::create(<span class="string">'permissions_role'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;integer(<span class="string">'permission_id'</span>)-&gt;unsigned();</div><div class="line">        $table-&gt;integer(<span class="string">'role_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">        <span class="comment">//创建外键</span></div><div class="line">        $table-&gt;foreign(<span class="string">'permission_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'permissions'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">        $table-&gt;foreign(<span class="string">'role_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'roles'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line"></div><div class="line">        $table-&gt;primary([<span class="string">'permission_id'</span>, <span class="string">'role_id'</span>]);  <span class="comment">//联合主键，只要两条数据两个字段不一样就行</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 关联 roles 和 users 表</div><div class="line">    */</div><div class="line">    Schema::create(<span class="string">'role_user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</div><div class="line">        $table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">        $table-&gt;integer(<span class="string">'role_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">        <span class="comment">//创建外键</span></div><div class="line">        $table-&gt;foreign(<span class="string">'user_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'users'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">        $table-&gt;foreign(<span class="string">'role_id'</span>)</div><div class="line">              -&gt;references(<span class="string">'id'</span>) </div><div class="line">              -&gt;on(<span class="string">'roles'</span>)</div><div class="line">              -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line"></div><div class="line">        $table-&gt;primary([<span class="string">'user_id'</span>, <span class="string">'role_id'</span>]);    <span class="comment">//联合主键，只要两条数据两个字段不一样就行</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、执行 <em><code>php artisan migrate</code></em></p>
<blockquote>
<p>创建表之间的多对多关系</p>
</blockquote>
<ul>
<li>user: 用户，用户自己注册的账户，通过与role表的联系赋予用户角色（角色表与permission联系赋予用户权限）</li>
<li>role：角色（admin, user等），用来描述user在该项目中的角色</li>
<li>permissions: 权限，用来描述一个角色拥有的权限，比如edit_form</li>
</ul>
<p>1、修改 <em><code>model</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Permission</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">roles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Role::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Role</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">permissions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Permission::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">givePermission</span><span class="params">(Permission $permission)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;permissions()-&gt;save($permission);</div><div class="line">    <span class="comment">//通过 $role-&gt;givePermission($permission) 给角色权限</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* User</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">roles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Role::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、进入 <em><code>tinker</code></em> 创建一个 <em><code>role</code></em> 角色和一个 <em><code>permission</code></em> 权限<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">php artisan tinker</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建 role 为 admin</div><div class="line">*/</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">$role=<span class="keyword">new</span> Role;</div><div class="line">$role-&gt;name=<span class="string">"admin"</span>;    <span class="comment">//角色名</span></div><div class="line">$role-&gt;label=<span class="string">"Admin"</span>;   <span class="comment">//角色描述</span></div><div class="line">$role-&gt;save();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建 permission 为 edit_form</div><div class="line">*/</div><div class="line">$permssion = <span class="keyword">new</span> Permission;</div><div class="line">$permission-&gt;name = <span class="string">"edit_form"</span>;    <span class="comment">//权限名</span></div><div class="line">$permission-&gt;label = <span class="string">"Edit the form"</span>;       <span class="comment">//权限解释</span></div><div class="line">$permission-&gt;save();</div></pre></td></tr></table></figure></p>
<p>创建 <code>权限</code> 和 <code>角色</code> 后在 <em><code>permission_role</code></em> 中并没有将两个相关联</p>
<p>3、关联 <code>权限</code> 和 <code>角色</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接着上面的tinker界面</span></div><div class="line">$role-&gt;givePermission($permission);     <span class="comment">//关系表中会生成自动关联数据</span></div></pre></td></tr></table></figure></p>
<p>4、定义 <em><code>权限</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* AuthServiceProvider</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(GateContract $gate)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;registerPolicies($gate);</div><div class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;getPermissions() <span class="keyword">as</span> $permission) &#123;</div><div class="line">        $gate-&gt;define($permissions-&gt;name, <span class="function"><span class="keyword">function</span><span class="params">(User $user)</span> <span class="title">use</span> <span class="params">($permission)</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> $user-&gt;hasRole($permission-&gt;roles);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getPermissions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> Permission::with(<span class="string">'roles'</span>)-&gt;get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasRole</span><span class="params">($role)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在其他地方使用，如果传hasRole('admin')，既传进来的是字符串</div><div class="line">    */</div><div class="line">    <span class="keyword">if</span>(is_string($role)) &#123;</div><div class="line">        <span class="comment">//判断user的所有role中是否存在name为$role的</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;roles-&gt;contains(<span class="string">'name'</span>, $role);     </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 本例中使用，传进来的是roles的Collection</div><div class="line">    */</div><div class="line"></div><div class="line">    <span class="comment">// 1、判断user的role是否有与permission的role相同的</span></div><div class="line">    <span class="comment">// 2、count返回 &gt;0 表明有用户有这个权限，取反再取反返回真</span></div><div class="line">    <span class="comment">// 3、count返回 0 表明用户没有这个权限，取反再取反返回假</span></div><div class="line">    <span class="comment">// 4、注意roles不要加括号，intersect方法处理的是Collection</span></div><div class="line">    <span class="keyword">return</span> !! $role-&gt;intersect(<span class="keyword">$this</span>-&gt;roles)-&gt;count();   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、<em><code>blade</code></em> 应用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 AuthServiceProvider 中已经foreach注册了权限--&gt;</span></div><div class="line">@can('权限名')</div><div class="line">...</div><div class="line">@endcan</div></pre></td></tr></table></figure></p>
<p><strong>6、示例：赋予用户一个角色，让他拥有一定权限</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">php artisan tinker</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">$user = User::find(<span class="number">1</span>);</div><div class="line">$role = Role::find(<span class="number">1</span>);</div><div class="line"></div><div class="line">$user-&gt;roles()-&gt;save($role);</div></pre></td></tr></table></figure></p>
<p><strong>7、应用实例：当用户注册时候自动赋予某个角色（角色和权限已经先在数据库定义好关系）</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在 Controller 中</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(RegisterRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    $user = User::create($data);</div><div class="line">    $role = Role::where(<span class="string">'name'</span>, <span class="string">'ordinary_user'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 给注册用户 ordinary_user 这个角色</span></div><div class="line">    <span class="comment">// 他的权限就是 ordinary_user 拥有的权限（在数据库预先定义好）</span></div><div class="line">    $user-&gt;roles()-&gt;save($role);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用 Middleware 实现后台管理</p>
</blockquote>
<p><strong>部分实现条件参考上面内容</strong></p>
<p>1、创建 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:middleware NameOfMiddleware</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>middleware</code></em> 的 <em><code>handle</code></em> 方法中实现代码逻辑<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//$request-&gt;user()就是Auth::user()作用</span></div><div class="line">    <span class="keyword">if</span>($request-&gt;user() &amp;&amp; $request-&gt;user()-&gt;isAdmin()) &#123;</div><div class="line">        <span class="keyword">return</span> $next($request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//没通过认证就重定向回首页</span></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 到 User model 中声明 isAdmin()方法</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAdmin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasRole(<span class="string">'admin'</span>);     <span class="comment">//hasRole参考上面内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、注册 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* app\Http\Kernel.php</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $routeMiddleware = [</div><div class="line">    ...</div><div class="line">    <span class="string">'name'</span> =&gt; \App\Http\Middleware\NameOfMiddleware::class,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>4、使用 <em><code>middleware</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 方法一：在 Route 中使用</div><div class="line">* name 是在注册时规定的名称</div><div class="line">*/</div><div class="line">Route::get(<span class="string">'/'</span>, [<span class="string">'middleware'</span> =&gt; <span class="string">'name'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 方法二：在 Controller 中使用</div><div class="line">* 在 __construct() 中使用</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//name 是在注册时规定的名称</span></div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'name'</span>);  </div><div class="line"></div><div class="line">    <span class="comment">//指定只有几个方法运用middleware</span></div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'name'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'store'</span>, <span class="string">'update'</span>]]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> ACL </tag>
            
            <tag> authorize </tag>
            
            <tag> Middleware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 项目实战相关]]></title>
      <url>/2017/06/12/Laravel-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与 Laravel 实际项目相关内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>在Controller中重定向Controller中的方法</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> redirect()-&gt;action(<span class="string">'NameController@method'</span>, [<span class="string">'param'</span> =&gt; <span class="string">'value'</span>]);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>在 Controller 中使用 middleware </p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'create'</span>, <span class="string">'store'</span>, <span class="string">'edit'</span>, <span class="string">'update'</span>]]);   <span class="comment">//只用在四种方法上</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* app\Http\Middleware\Authenticate.php</div><div class="line">*/</div><div class="line"><span class="keyword">return</span> redirect()-&gt;guest(<span class="string">'返回的路由'</span>);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>更新数据内容</p>
</blockquote>
<h3 id="将原来的内容填入编辑表单中（使用Form-model）"><a href="#将原来的内容填入编辑表单中（使用Form-model）" class="headerlink" title="将原来的内容填入编辑表单中（使用Form::model）"></a>将原来的内容填入编辑表单中（使用Form::model）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* edit.blade.php</div><div class="line">*/</div><div class="line">&#123;&#123; Form::model($comment, [<span class="string">'method'</span> =&gt; <span class="string">'post'</span>, <span class="string">'url'</span> =&gt; <span class="string">'/comment/'</span>.$comment-&gt;id]) &#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 点击更改的url'/comment/edit/$comment-&gt;id'，</div><div class="line">* Route::post('/comment/edit/&#123;id&#125;')</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="更新数据方法"><a href="#更新数据方法" class="headerlink" title="更新数据方法"></a>更新数据方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$comment = comment::findOrFail($id);</div><div class="line">$comment-&gt;update($request-&gt;all());</div></pre></td></tr></table></figure>
<h3 id="设置只有发表评论的人才能更新"><a href="#设置只有发表评论的人才能更新" class="headerlink" title="设置只有发表评论的人才能更新"></a>设置只有发表评论的人才能更新</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    $comment = comment::findOrFail($id);</div><div class="line">    <span class="keyword">if</span>(Auth::user()-&gt;id !== $comment-&gt;user_id)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Blade</div><div class="line">*/</div><div class="line">@<span class="keyword">if</span>(Auth::check() &amp;&amp; Auth::user() -&gt; id == $comment-&gt;user_id)</div><div class="line">    ...</div><div class="line">@<span class="keyword">endif</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>实现评论一：创建表以及完成之间的联系</p>
</blockquote>
<p>1、<em><code>migration</code></em> 文件的设置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* comment表</div><div class="line">*/</div><div class="line">$table-&gt;increments(<span class="string">'id'</span>);</div><div class="line">$table-&gt;text(<span class="string">'body'</span>);</div><div class="line">$table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'discussion_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line"><span class="comment">//创建外键</span></div><div class="line">$table-&gt;foreign(<span class="string">'user_id'</span>)</div><div class="line">     -&gt;references(<span class="string">'id'</span>)     <span class="comment">//连接的主键字段为id</span></div><div class="line">     -&gt;on(<span class="string">'users'</span>)      <span class="comment">//连接的表为users</span></div><div class="line">     -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;foreign(<span class="string">'discussion_id'</span>)</div><div class="line">     -&gt;references(<span class="string">'id'</span>)</div><div class="line">     -&gt;on(<span class="string">'discussions'</span>)</div><div class="line">     -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;timestamps();</div></pre></td></tr></table></figure></p>
<p>2、 <em><code>model</code></em> 文件建立联系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discussions</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Discussion::class);   <span class="comment">//$user-&gt;disscussions拿到所有发布</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Comment::class);        <span class="comment">//$user-&gt;comments拿到所有评论</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Comment model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">disscussion</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Discussion model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Comment::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现评论二、存储评论 并 限制展示评论框</p>
</blockquote>
<p>1、评论存储要带上<strong>依附内容</strong>的 <em><code>id</code></em> 存入数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 1、评论提交的时候就要带上文章内容的id，可以用隐藏表单（数据库中要有这个字段）</div><div class="line">* 2、存入数据库带上评论用户的id</div><div class="line">*/</div><div class="line">&#123;!! Form::hidden(<span class="string">'id'</span>, $article-&gt;id) !!&#125;</div><div class="line"></div><div class="line">Comment::create(array_merge($request-&gt;all(), [<span class="string">'user_id'</span> =&gt; Auth::user()-&gt;id]));</div></pre></td></tr></table></figure></p>
<p>2、如果用户没有登录不展示评论框<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* blade </div><div class="line">*/</div><div class="line">@if(Auth::check())</div><div class="line">    ...     //展示评论框</div><div class="line">@else</div><div class="line">    &lt;a href="/user/login" class="btn btn-block btn-success"&gt;登录&lt;/a&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现下拉菜单</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--app.blade.php--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/bootstrap.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/style.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"dLabel"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"ture"</span>&gt;</span></div><div class="line">        &#123;&#123; Auth::user()-&gt;name &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dLabel"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 更换头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 更换密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 特别感谢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-sign-out"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/3.0.0-alpha1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>集成 markdown 编辑器</p>
</blockquote>
<p>1、在 <em><code>composer.json</code></em> 的require里加入，执行<em><code>composer update</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"yuanchao/laravel-5-markdown-editor"</span>: <span class="string">"dev-master"</span></div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>config/app.php</code></em> 的 <em><code>providers</code></em> 数组加入一条<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'YuanChao\Editor\EndaEditorServiceProvider'</span></div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>config/app.php</code></em> 的 <em><code>aliases</code></em> 数组加入一条<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'EndaEditor'</span> =&gt; <span class="string">'YuanChao\Editor\Facade\EndaEditorFacade'</span></div></pre></td></tr></table></figure></p>
<p>4、执行 <em><code>php artisan vendor:publish --tag=EndaEditor</code></em></p>
<p>5、修改需要编辑器的页面<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//引入编辑器代码，必须在引入头文件前引入jquery文件！！！！</div><div class="line">&lt;script src="//cdn.bootcss.com/jquery/3.0.0-alpha1/jquery.min.js"&gt;&lt;/script&gt; </div><div class="line">@include('editor::head')</div><div class="line"></div><div class="line">//创建一个 class 为 editor 的容器</div><div class="line">&lt;div class="editor"&gt;</div><div class="line">    &#123;!! Form::textarea('content', '', ['class' =&gt; 'form-control','id'=&gt;'myEditor']) !!&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="以下为配置图片上传"><a href="#以下为配置图片上传" class="headerlink" title="以下为配置图片上传"></a>以下为配置图片上传</h3><p>6、修改 <em><code>\config\editor.php</code></em>，并注册路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改config\editor.php配置</span></div><div class="line"><span class="string">'uploadUrl'</span> =&gt; <span class="string">'post/upload'</span>       <span class="comment">//放到PostsController中</span></div><div class="line"></div><div class="line"><span class="comment">//注册路由</span></div><div class="line">Route::post(<span class="string">'/post/upload'</span>, <span class="string">'PostsController@upload'</span>);</div></pre></td></tr></table></figure></p>
<p>7、在 <em><code>PostsController</code></em> 中创建 <em>upload</em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">EndaEditor</span>;     <span class="comment">//在头部加上</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span>&#123;</div><div class="line">    $data = EndaEditor::uploadImgFile(<span class="string">'uploads'</span>);   <span class="comment">//上传目录为\public\uploads</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> json_encode($data);            </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、如果出现上传图片时候黑屏，删掉 <em><code>resource\views\vendor\editor\head.blade.php</code></em> 中的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"....bootstrap.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>引用 Markdown 和第三方库</p>
</blockquote>
<p>1、复制<em><code>https://github.com/SegmentFault/HyperDown</code></em> <em><code>Parser.php</code></em> 文件<br>2、创建一个 <strong>Class</strong> <em><code>app\Markdown\Parser.php</code></em>，将复制的代码粘贴进去，声明命名空间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Markdown</span>;</div></pre></td></tr></table></figure></p>
<p>3、创建一个 <strong>Class</strong> <em><code>app\Markdown\Markdown.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Markdown</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $parser;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Parser $parser)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;parser = $parser;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">markdown</span><span class="params">($text)</span></span></div><div class="line">    &#123;</div><div class="line">        $html = <span class="keyword">$this</span>-&gt;parser-&gt;makeHtml($text);</div><div class="line">        <span class="keyword">return</span> $html;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将新文件加载到autoload文件里面</span></div><div class="line">composer dump-autoload</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>Controller</code></em> 中引入 <em><code>Markdowwn</code></em> 类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Markdown</span>\<span class="title">Markdown</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $markdown;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Markdown $markdown)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;markdown = $markdown;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 在某个展示方法中使用</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></div><div class="line">    &#123;</div><div class="line">        $comment = comment::findOrFail($id);</div><div class="line">        $html = <span class="keyword">$this</span>-&gt;markdown-&gt;markdown($comment-&gt;content);</div><div class="line">        <span class="keyword">return</span> view(<span class="string">'show'</span>, compact(<span class="string">'comment'</span>, <span class="string">'html'</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>blade</code></em> 文件中输出内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; $html &#125;&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现收藏内容功能</p>
</blockquote>
<p>1、创建关系表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">php artisan make:model Favorite -m</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* migration</div><div class="line">*/</div><div class="line">$table-&gt;integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'article_id'</span>)-&gt;unsigned();</div></pre></td></tr></table></figure></p>
<p>2、建立多对多关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* User model</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">favorites</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//第二个参数为关系表名，如果不传默认找article_user表</span></div><div class="line">    $thie-&gt;belongsToMany(Article::class, <span class="string">'favorites'</span>)-&gt;withTimestamps();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、展示内容（可以在 <em><code>Route</code></em> 完成，也可以在 <em><code>Controller</code></em> 中完成）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'/article'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    $articles = Article::latest();</div><div class="line">    <span class="keyword">if</span>(Auth::check())</div><div class="line">    &#123;</div><div class="line">        $favorites = Favorites::where(<span class="string">'user_id'</span>, Auth::user()-&gt;id)</div><div class="line">                    -&gt;lists(<span class="string">'article_id'</span>)-&gt;toArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view(<span class="string">'index'</span>, compact(<span class="string">'articles'</span>, <span class="string">'favorites'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>4、在视图文件创建收藏模块<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@if(Auth::check())</div><div class="line">    @if(in_array($article_id, $favorites))</div><div class="line">        <span class="comment">&lt;!--取消收藏--&gt;</span></div><div class="line">        &#123;!! Form::open(['url' =&gt; '/path2']) !!&#125;</div><div class="line">        &#123;!! Form::hidden('article_id', $article-&gt;id) !!&#125;</div><div class="line">    @else</div><div class="line">        <span class="comment">&lt;!--收藏--&gt;</span></div><div class="line">        &#123;!! Form::open(['url' =&gt; '/path1']) !!&#125;</div><div class="line">        &#123;!! Form::hidden('article_id', $article-&gt;id) !!&#125;</div><div class="line">    @endif</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart &#123;&#123; in_array($article-&gt;id, $favorites? 'favorited' : 'not-favorited') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        &#123;!! Form::close() !!&#125;</div><div class="line">@endif</div><div class="line">    <span class="comment">&lt;!--展示内容--&gt;</span></div></pre></td></tr></table></figure></p>
<p>增加css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.favorited</span>, <span class="selector-tag">not-favorited</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.not-favorited</span>, <span class="selector-class">.favorited</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、完成 <strong>收藏内容</strong> 和 <strong>取消收藏</strong> 内容方法以及 <strong>登录保护</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);      <span class="comment">//只有用户登录才可以完成收藏和取消收藏</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    Auth::user()-&gt;favorites()-&gt;attach($request-&gt;get(<span class="string">'article_id'</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect()-&gt;back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancel_store</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    Auth::user()-&gt;favorites()-&gt;detach($request-&gt;get(<span class="string">'article_id'</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect()-&gt;back();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>对上传图片进行裁剪</p>
</blockquote>
<p>引用<em><code>intervention image</code></em><br>1、安装<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ php composer.phar <span class="keyword">require</span> intervention/image</div></pre></td></tr></table></figure></p>
<p>2、配置<br>在 <code>config\app.php</code> 中的 <code>provider</code> 数组中加入<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Intervention\Image\ImageServiceProvider::<span class="class"><span class="keyword">class</span></span></div></pre></td></tr></table></figure></p>
<p>在 <code>config\app.php</code> 中的 <code>aliases</code> 数组中加入<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'Image'</span> =&gt; Intervention\Image\Facades\Image::<span class="class"><span class="keyword">class</span></span></div></pre></td></tr></table></figure></p>
<p>3、生成配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> php artisan vendor:publish --provider=<span class="string">"Intervention\Image\ImageServiceProviderLaravel5"</span></span></div></pre></td></tr></table></figure></p>
<p>4、使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 此操作会将指定的图片 resize 后覆盖原图</div><div class="line">*/</div><div class="line">$img = Image::make(<span class="string">'./upload/images/name.jpg'</span>)-&gt;resize(<span class="number">200</span>, <span class="number">300</span>)-&gt;save(<span class="string">'./upload/images/name.jpg'</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> project </tag>
            
            <tag> mixture </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 用户注册登录相关]]></title>
      <url>/2017/06/11/laravel-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>laravel实现用户注册和登录以及用户信息相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>实现密码自动加密</p>
</blockquote>
<p>在 <em><code>user</code></em> 表中使用 <em><code>attribute</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span><span class="params">($password)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;attributes[<span class="string">'password'</span>] = Hash::make($password);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>登录</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* controller文件</div><div class="line">*/</div><div class="line"><span class="keyword">if</span>(Auth::attempt([</div><div class="line">    <span class="string">'email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),</div><div class="line">    <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>),        <span class="comment">//在model中定义了Attribute用Hash加密，所以不用在此不用加密</span></div><div class="line">    <span class="string">'is_confirmed'</span> =&gt; <span class="number">1</span></div><div class="line">]))</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>登出</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Auth::logout();</div><div class="line">JWToken::refresh();</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>提示登录错误信息</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Controller文件</div><div class="line">*/</div><div class="line">Session::flash('id', '错误信息');</div><div class="line"></div><div class="line">/**</div><div class="line">* blade文件</div><div class="line">*/</div><div class="line">@if(Session::has('id'))</div><div class="line">&lt;div class="alert alert-danger" role="alert"&gt;</div><div class="line">    &#123;&#123; Session::get('id') &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">@endif</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>信息错误后将用户填写的信息返回给原来的页面</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> redirect(<span class="string">'/user/login'</span>)-&gt;withInput();</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>修改错误提示</p>
</blockquote>
<p>打开 <em><code>resources\lang\en\validation.php</code></em> 修改 <em><code>custom</code></em> 数组<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下为当name为id的字段为空时提示“用户名不能为空”</span></div><div class="line"><span class="string">'custom'</span> =&gt; [</div><div class="line">    <span class="string">'name'</span> =&gt; [</div><div class="line">        <span class="string">'required'</span> =&gt; <span class="string">'用户名不能为空'</span></div><div class="line">    ]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>登录后blade显示用户信息</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span>(Auth::check())</div><div class="line">    &#123;&#123; Auth::user()-&gt;name &#125;&#125;</div><div class="line">@<span class="keyword">else</span></div><div class="line">    ...</div><div class="line">@<span class="keyword">endif</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>传统修改头像</p>
</blockquote>
<p>1、引用 <em><code>intervention/image</code></em> package<br><em><code>https://github.com/Intervention/image</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer <span class="keyword">require</span> intervention/image</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>config\app.php</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* $providers数组</div><div class="line">*/</div><div class="line">Intervention\Image\ImageServiceProvider::class</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* $aliases数组</div><div class="line">*/</div><div class="line"><span class="string">'Image'</span> =&gt; Intervention\Image\Facades\Image::class</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成文件</div><div class="line">*/</div><div class="line">php artisan vendor:publish --provider=<span class="string">"Intervention\Image\ImageServiceProviderLaravel5"</span></div></pre></td></tr></table></figure></p>
<p>3、表单<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;!! Form::open([<span class="string">'url'</span> =&gt; <span class="string">'/avatar'</span>, <span class="string">'files'</span>=&gt;<span class="keyword">true</span>]) !!&#125;</div><div class="line">&#123;!! Form::file(<span class="string">'avatar'</span>) !!&#125;</div><div class="line">&#123;!! Form::submit(<span class="string">'上传头像'</span>, [<span class="string">'class'</span> =&gt; <span class="string">'btn btn-primary pull-right'</span>])!!&#125;</div><div class="line">&#123;!! Form::close() !!&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>controller</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Image</span>;      <span class="comment">//引用上面引入的package</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeAvatar</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $file = $requet-&gt;file(<span class="string">'avatar'</span>);</div><div class="line">    $path = <span class="string">'uploads/'</span>;     <span class="comment">//在public目录下创建一个uploads目录</span></div><div class="line">    $filename = time().$file-&gt;getClientOriginalName();</div><div class="line">    $file-&gt;move($path, $filename);</div><div class="line">    Image::make($path.$filename)-&gt;fit(<span class="number">200</span>)-&gt;save();     <span class="comment">//将图片修改为200 x 200大小的图片   </span></div><div class="line">    $user = User::find(Auth::user()-&gt;id);</div><div class="line">    $user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'path'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、给目录权限<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R <span class="number">777</span> uploads/</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>用 Ajax 完成修改头像 </p>
</blockquote>
<p><strong>实现上传头像过程按钮变化并在上传后自动更换头像</strong></p>
<p>1、在 <em><code>app.blade.php</code></em> 中引入文件，将文件放到 <em><code>public\js</code></em> 中<br><em><code>https://github.com/JellyBool/laravel-app</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"/js/jquery-2.1.4.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"/js/bootstrap.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"/js/jquery.form.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>2、修改头像的 <em><code>blade</code></em> 文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;div class="text-center"&gt;</div><div class="line">        &lt;div id="validation-errors"&gt;&lt;/div&gt;</div><div class="line">        &lt;img src="&#123;&#123;Auth::user()-&gt;avatar&#125;&#125;" width="120" class="img-circle" id="user-avatar" alt=""&gt;</div><div class="line">        &#123;!! Form::open(['url'=&gt;'/avatar','files'=&gt;true,'id'=&gt;'avatar']) !!&#125;</div><div class="line">        &lt;div class="text-center"&gt;</div><div class="line">            &lt;button type="button" class="btn btn-success avatar-button" id="upload-avatar"&gt;上传新的头像&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &#123;!! Form::file('avatar',['class'=&gt;'avatar','id'=&gt;'image']) !!&#125;</div><div class="line">        &#123;!! Form::close() !!&#125;</div><div class="line">        &lt;div class="span5"&gt;</div><div class="line">            &lt;div id="output" style="display:none"&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">$(document).ready(function() &#123;</div><div class="line">            var options = &#123;</div><div class="line">                beforeSubmit:  showRequest,</div><div class="line">                success:       showResponse,</div><div class="line">                dataType: 'json'</div><div class="line">            &#125;;</div><div class="line">            $('#image').on('change', function()&#123;</div><div class="line">                $('#upload-avatar').html('正在上传...');</div><div class="line">                $('#upload').ajaxForm(options).submit();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    function showRequest() &#123;</div><div class="line">        $("#validation-errors").hide().empty();</div><div class="line">        $("#output").css('display','none');</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function showResponse(response)  &#123;</div><div class="line">        if(response.success == false)</div><div class="line">        &#123;</div><div class="line">            var responseErrors = response.errors;</div><div class="line">            $.each(responseErrors, function(index, value)</div><div class="line">            &#123;</div><div class="line">                if (value.length != 0)</div><div class="line">                &#123;</div><div class="line">                    $("#validation-errors").append('&lt;div class="alert alert-error"&gt;&lt;strong&gt;'+ value +'&lt;/strong&gt;&lt;div&gt;');</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            $("#validation-errors").show();</div><div class="line">        &#125; else &#123;</div><div class="line"></div><div class="line">          $('#user-avatar').attr('src',response.avatar);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>controller</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Image</span>;      <span class="comment">//引用上面引入的package</span></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Response</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Validator</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeAvatar</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $file = $requet-&gt;file(<span class="string">'avatar'</span>);</div><div class="line"></div><div class="line">    $input = <span class="keyword">array</span>(<span class="string">'image'</span> =&gt; $file);</div><div class="line">    $rules = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'image'</span> =&gt; <span class="string">'image'</span></div><div class="line">    );</div><div class="line">    $validator = Validator::make($input, $rules);</div><div class="line">    <span class="keyword">if</span> ( $validator-&gt;fails() ) &#123;</div><div class="line">        <span class="keyword">return</span> Response::json([</div><div class="line">            <span class="string">'success'</span> =&gt; <span class="keyword">false</span>,</div><div class="line">            <span class="string">'errors'</span> =&gt; $validator-&gt;getMessageBag()-&gt;toArray()</div><div class="line">        ]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $path = <span class="string">'uploads/'</span>;     <span class="comment">//在public目录下创建一个uploads目录</span></div><div class="line">    $filename = time().$file-&gt;getClientOriginalName();</div><div class="line">    $file-&gt;move($path, $filename);</div><div class="line">    Image::make($path.$filename)-&gt;fit(<span class="number">200</span>)-&gt;save();     <span class="comment">//将图片修改为200 x 200大小的图片   </span></div><div class="line">    $user = User::find(Auth::user()-&gt;id);</div><div class="line">    $user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Response::json([</div><div class="line">            <span class="string">'success'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">            <span class="string">'avatar'</span> =&gt; asset($path.$filename),</div><div class="line">        ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现上传头像的裁剪</p>
</blockquote>
<p>1、引入 <em><code>Jcrop</code></em> 文件（<em><code>\public\css\jquery.Jcrop.css</code></em> 和 <em><code>\public\js\jquery.Jcrop.min.js</code></em>）<br><em><code>https://github.com/JellyBool/laravel-app</code></em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/jquery.Jcrop.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery.Jcrop.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>blade</code></em> 中引入一个bootstrap的 <em><code>model</code></em>（注意创建路由指向方法为cropAvatar）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line">                    &#123;!! Form::open( [ 'url' =&gt; ['/crop/api'], 'method' =&gt; 'POST', 'onsubmit'=&gt;'return checkCoords();','files' =&gt; true ] ) !!&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"color: #ffffff"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>裁剪头像<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crop-image-wrapper"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">img</span></span></div><div class="line">                                        <span class="attr">src</span>=<span class="string">"/images/default-avatar.png"</span></div><div class="line">                                        <span class="attr">class</span>=<span class="string">"ui centered image"</span> <span class="attr">id</span>=<span class="string">"cropbox"</span> &gt;</div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"photo"</span> <span class="attr">name</span>=<span class="string">"photo"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"x"</span> <span class="attr">name</span>=<span class="string">"x"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"y"</span> <span class="attr">name</span>=<span class="string">"y"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"w"</span> <span class="attr">name</span>=<span class="string">"w"</span> /&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"h"</span> <span class="attr">name</span>=<span class="string">"h"</span> /&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>裁剪头像<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    &#123;!! Form::close() !!&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、实现 <em><code>controller</code></em> 中的函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 为了实现裁剪后才将图片保存，去掉传统头像上传的 *`changeAvatar`* 方法中的三行</div><div class="line">* 修改 Response::json</div><div class="line">*/</div><div class="line">$user = User::find(Auth::user()-&gt;id);</div><div class="line">$user-&gt;avatar = <span class="string">'/'</span>.$path.$filename;</div><div class="line">$user-&gt;save();</div><div class="line"></div><div class="line"><span class="keyword">return</span> Response::json([</div><div class="line">        <span class="string">'success'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">        <span class="string">'avatar'</span> =&gt; asset($path.$filename),</div><div class="line">        <span class="string">'image'</span> =&gt; $path.$filename      <span class="comment">//让js中的photo变量为图片路径</span></div><div class="line">    ]);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 增加 cropAvatar函数</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> fuction cropAvatar(Request $request)</div><div class="line">&#123;</div><div class="line">    $photo = $request-&gt;get(<span class="string">'photo'</span>);     <span class="comment">//在js文件中photo变量已经设为图片路径</span></div><div class="line">    $width = (int) $request-&gt;get(<span class="string">'w'</span>);</div><div class="line">    $heigth = (int) $request-&gt;get(<span class="string">'h'</span>);</div><div class="line">    $xAlign = (int) $request-&gt;get(<span class="string">'x'</span>);</div><div class="line">    $yAlign = (int) $request-&gt;get(<span class="string">'y'</span>);</div><div class="line"></div><div class="line">    Image::make($photo)-&gt;crop($width, $height, $xAlign, $yAlign)-&gt;save();</div><div class="line"></div><div class="line">    $user = Auth::user();</div><div class="line"></div><div class="line">    <span class="comment">//给 blade &lt;img src&gt; 处理路径最前面要带上斜杠，所以要使用asset方法，用http方式补全</span></div><div class="line">    $user-&gt;avatar = asset($photo);     </div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'user/avatar'</span>);     <span class="comment">//用户更换头像页面</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>blade</code></em> 文件（前部分代码看传统上传中的blade文件）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 修改blade文件中的ShowResponse方法，将else部分换为以下部分，并加入两个函数</div><div class="line">*/</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> cropBox = $(<span class="string">"#cropbox"</span>);</div><div class="line">    cropBox.attr(<span class="string">'src'</span>,response.avatar);</div><div class="line">    $(<span class="string">'#photo'</span>).val(response.image);        <span class="comment">//让blade提交表单时候photo变量为图片路径</span></div><div class="line">    $(<span class="string">'#upload-avatar'</span>).html(<span class="string">'更换新头像'</span>);</div><div class="line">    $(<span class="string">'#exampleModal'</span>).modal(<span class="string">'show'</span>);</div><div class="line">    cropBox.Jcrop(&#123;</div><div class="line">        aspectRatio: <span class="number">1</span>,</div><div class="line">        onSelect: updateCoords,</div><div class="line">        setSelect: [<span class="number">120</span>,<span class="number">120</span>,<span class="number">10</span>,<span class="number">10</span>]</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">'.jcrop-holder img'</span>).attr(<span class="string">'src'</span>,response.avatar);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span><span class="params">(c)</span></span></div><div class="line">&#123;</div><div class="line">    $(<span class="string">'#x'</span>).val(c.x);</div><div class="line">    $(<span class="string">'#y'</span>).val(c.y);</div><div class="line">    $(<span class="string">'#w'</span>).val(c.w);</div><div class="line">    $(<span class="string">'#h'</span>).val(c.h);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCoords</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (parseInt($(<span class="string">'#w'</span>).val())) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    alert(<span class="string">'请选择图片.'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>实现第三方登录</p>
</blockquote>
<p><em><code>https://github.com/overtrue/socialite</code></em></p>
<p><strong>示例github</strong><br>1、到github注册一个Application <em><code>setting -&gt; Applications -&gt; Register new application</code></em><br>2、填写信息：<code>callback url</code>为请求成功后跳转的地址<br>3、引用package<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer <span class="keyword">require</span> <span class="string">"overtrue/socialite:~1.0"</span></div></pre></td></tr></table></figure></p>
<p>4、注册路由<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'/login'</span>, <span class="string">'LoginController@github'</span>);     <span class="comment">//认证</span></div><div class="line">Route::get(<span class="string">'/github/login'</span>, <span class="string">'LoginController@githubLogin'</span>);     <span class="comment">//获取信息</span></div></pre></td></tr></table></figure></p>
<p>5、完成认证和获取信息方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $config = [</div><div class="line">    <span class="string">'github'</span> =&gt; [</div><div class="line">        <span class="string">'client_id'</span>     =&gt; <span class="string">'your-app-id'</span>,</div><div class="line">        <span class="string">'client_secret'</span> =&gt; <span class="string">'your-app-secret'</span>,</div><div class="line">        <span class="string">'redirect'</span>      =&gt; <span class="string">'github注册的callback url'</span>,</div><div class="line">    ],</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">github</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 该方法检查client_id和client_secret是否一致</div><div class="line">    * 一致就返回授权用户的信息给callback url</div><div class="line">    */</div><div class="line">    $socialite = <span class="keyword">new</span> SocialiteManager(<span class="keyword">$this</span>-&gt;config);</div><div class="line">    <span class="keyword">return</span> $socialite-&gt;driver(<span class="string">'github'</span>)-&gt;redirect();    <span class="comment">//跳转到github验证页面</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">githubLogin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $socialite = <span class="keyword">new</span> SocialiteManager(<span class="keyword">$this</span>-&gt;config);</div><div class="line">    $githubUser = $socialite-&gt;driver(<span class="string">'gtihub'</span>)-&gt;user();</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * $githubUser为授权用户的信息</div><div class="line">    * $githubUser-&gt;getId();</div><div class="line">    * $githubUser-&gt;getNickname();</div><div class="line">    * $githubUser-&gt;getName();</div><div class="line">    * $githubUser-&gt;getEmail();</div><div class="line">    */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>实现用户名或邮箱登录</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1、login为要验证的表单id</span></div><div class="line">    <span class="comment">// 2、验证是邮箱还是用户名</span></div><div class="line">    $option = filter_var($request-&gt;get(<span class="string">'login'</span>), FILTER_VALIDATE_EMAIL) ? <span class="string">'email'</span>:<span class="string">'name'</span>;</div><div class="line">    $request-&gt;merge([$option =&gt; $request-&gt;get(<span class="string">'login'</span>)]);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(Auth::attempt($request-&gt;only($option, <span class="string">'password'</span>)))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//验证通过后的代码...</span></div><div class="line">        <span class="keyword">return</span> ...;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//验证不通过的处理</span></div><div class="line">    ...;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> user </tag>
            
            <tag> register </tag>
            
            <tag> login </tag>
            
            <tag> profile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel Request常用规则]]></title>
      <url>/2017/06/11/laravel-Request%E5%B8%B8%E7%94%A8%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<p><code>&#39;name&#39; =&gt; &#39;required|min:3&#39;</code><br><code>&#39;email&#39; =&gt; &#39;required|email|unique:users,email&#39;</code>  规定 <em><code>users</code></em> 表的 <em><code>email</code></em> 字段必须为唯一<br><code>password =&gt; &#39;required|min:6|confirmed&#39;</code></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> request </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 表的联系]]></title>
      <url>/2017/06/11/laravel-%E8%A1%A8%E7%9A%84%E8%81%94%E7%B3%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>设置laravel 数据表之间的联系</p>
</blockquote>
<a id="more"></a>
<p>1、创建一个跟用户联系的表，用 <em><code>user_id</code></em> ， <em><code>last_user_id</code></em> 作为外键<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Comment表</div><div class="line">*/</div><div class="line">$table -&gt; increments(<span class="string">'id'</span>);</div><div class="line">$table -&gt; string(<span class="string">'title'</span>);</div><div class="line">$table -&gt; text(<span class="string">'body'</span>);</div><div class="line">$table -&gt; integer(<span class="string">'user_id'</span>)-&gt;unsigned();</div><div class="line">$table -&gt; integer(<span class="string">'last_user_id'</span>)-&gt;unsigned();</div><div class="line">$table -&gt; foreign(<span class="string">'user_id'</span>)-&gt;references(<span class="string">'id'</span>)-&gt;on(<span class="string">'users'</span>)-&gt;onDelete(<span class="string">'cascade'</span>);   <span class="comment">//规定user_id为users表id字段的连接</span></div><div class="line">$table -&gt; timestamps();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* users表</div><div class="line">*/</div><div class="line">$table -&gt; increments(<span class="string">'id'</span>);</div><div class="line">$table -&gt; string(<span class="string">'name'</span>);</div><div class="line">$table -&gt; string(<span class="string">'avatar'</span>);     <span class="comment">//用户头像url</span></div><div class="line">$table -&gt; string(<span class="string">'email'</span>)-&gt;unique();</div><div class="line">$table -&gt; string(<span class="string">'password'</span>, <span class="number">60</span>);</div><div class="line">$table -&gt; remremberToken();</div><div class="line">$table -&gt; timestamps();</div></pre></td></tr></table></figure></p>
<p>2、创建 <em><code>users</code></em> 表测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\User::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> $password;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'name'</span> =&gt; $faker-&gt;name,</div><div class="line">        <span class="string">'email'</span> =&gt; $faker-&gt;unique()-&gt;safeEmail,</div><div class="line">        <span class="string">'avatar'</span> =&gt; $faker-&gt;imageUrl(<span class="number">256</span>, <span class="number">256</span>),</div><div class="line">        <span class="string">'password'</span> =&gt; $password ?: $password = bcrypt(<span class="string">'secret'</span>),</div><div class="line">        <span class="string">'remember_token'</span> =&gt; str_random(<span class="number">10</span>),</div><div class="line">    ];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(user::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<p>3、创建 <em><code>comments</code></em> 表测试数据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\comment::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    $user_ids = \App\User::pluck(<span class="string">'id'</span>)-&gt;toArray();      <span class="comment">//将users表中的id拿出来作为数组</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'title'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'body'</span> =&gt; $faker-&gt;paragraph,</div><div class="line">        <span class="string">'user_id'</span> =&gt; $faker-&gt;randomElement($user_ids),</div><div class="line">        <span class="string">'last_user_id'</span> =&gt; ($faker-&gt;randomElement($user_ids))[<span class="number">0</span>],</div><div class="line">    ];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(comment::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在model中建立关系</p>
</blockquote>
<p>1、修改 <em><code>users</code></em> 表model文件，使用Eloquent Relationship<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(comment::class);      <span class="comment">//使用$user-&gt;comments()获取用户所有评论</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、修改 <em><code>comment</code></em> 表model文件，使用Eloquent Relationship<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//默认外键为user_id，如果有自定义外键作为第二个参数传入</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);       <span class="comment">//使用$comment-&gt;user()获取评论的用户</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>多对多关系</p>
</blockquote>
<p><strong>belongsToMany()第二个参数为两个表关系的表名，如果没有三四个参数，关系表的两个字段为model1_id, model2_id（小写），model1为belongsToMany所在的model</strong></p>
<p>1、创建第三方关联表<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$table-&gt;integer(<span class="string">'article_id'</span>)-&gt;unsigned();</div><div class="line">$table-&gt;integer(<span class="string">'tag_id'</span>)-&gt;unsigned();</div><div class="line"></div><div class="line">$table-&gt;foreign(<span class="string">'article_id'</span>)</div><div class="line">      -&gt;references(<span class="string">'id'</span>) </div><div class="line">      -&gt;on(<span class="string">'articless'</span>)</div><div class="line">      -&gt;onDelete(<span class="string">'cascade'</span>);</div><div class="line">$table-&gt;foreign(<span class="string">'tag_id'</span>)</div><div class="line">      -&gt;references(<span class="string">'id'</span>) </div><div class="line">      -&gt;on(<span class="string">'tags'</span>)</div><div class="line">      -&gt;onDelete(<span class="string">'cascade'</span>);</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>model</code></em> 文件中声明多对多关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Article</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Tag</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">articles</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Article::class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、建立关系<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 比如在Controller中</div><div class="line">* 以下操作都会在第三方表中自动生成数据</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//将 articles 表 id 为3的与 tags 表 id 为2的绑定</span></div><div class="line">$article = App\Article::find(<span class="number">3</span>);</div><div class="line">$article-&gt;tags()-&gt;attach(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//将 articles 表 id 为3的与 tags 表 id 为2的解除绑定</span></div><div class="line">$article = App\Article::find(<span class="number">3</span>);</div><div class="line">$article-&gt;tags()-&gt;detach(<span class="number">2</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> database </tag>
            
            <tag> table </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[laravel 用户确认邮箱]]></title>
      <url>/2017/06/10/laravel-%E7%94%A8%E6%88%B7%E7%A1%AE%E8%AE%A4%E9%82%AE%E7%AE%B1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用laravel完成用户确认邮箱完成认证</p>
</blockquote>
<a id="more"></a>
<p>1、在 <em><code>composer.json</code></em> 中加入以下内容并执行 <em><code>composer update</code></em><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"require"</span>: &#123;</div><div class="line">    ... ,</div><div class="line">    <span class="string">"guzzlehttp/guzzle"</span>: <span class="string">"~5.3|~6.0"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、用 <em><code>MandDrill</code></em> driver来发送邮件，在mandrill注册后拿到 <em><code>secret_key</code></em>（也可以用sendcloud）<br>3、配置 <em><code>.env</code></em> 文件<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">MAIL_DRIVER</span>=mandrill</div><div class="line"><span class="attr">MANDRILL_SECRET</span>=拿到的secret key</div></pre></td></tr></table></figure></p>
<p>4、配置 <em><code>mail.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'from'</span> =&gt; [<span class="string">'address'</span> =&gt; <span class="string">'发送email的邮箱'</span>, <span class="string">'name'</span> =&gt; <span class="string">'名字'</span>]</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>migration</code></em> 文件中给表增加两个字段，并在 <em><code>model</code></em> 文件中将字段加入 <em><code>$fillable</code></em> 数组中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* migration文件</div><div class="line">*/</div><div class="line">$table-&gt;string(<span class="string">'confirm_code'</span>, <span class="number">64</span>);</div><div class="line">$table-&gt;integer(<span class="string">'is_confirmed'</span>)-&gt;default(<span class="number">0</span>);    <span class="comment">//0代表没激活，1代表已激活</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* model文件</div><div class="line">*/</div><div class="line"><span class="keyword">protected</span> $fillable = [... , <span class="string">'confirm_code'</span>];</div></pre></td></tr></table></figure></p>
<p>6、用 <em><code>ModelFactory</code></em> 添加测试信息（测试用，可跳过）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在ModelFactory文件中加入</div><div class="line">*/</div><div class="line"><span class="string">'confirm_code'</span> =&gt; str_random(<span class="number">48</span>),</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 用php artisan tinker生成数据</div><div class="line">*/</div><div class="line">php artisan tinker</div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(modelName::class, <span class="number">30</span>)-&gt;create();</div></pre></td></tr></table></figure></p>
<p>7、编写 <em><code>Controller</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(yourRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    $data = [</div><div class="line">        <span class="string">'confirm_code'</span> =&gt; str_random(<span class="number">48</span>),</div><div class="line">    ]</div><div class="line"></div><div class="line">    $user = modelName::create(array_merge($request-&gt;all(), $data));</div><div class="line"></div><div class="line">    $subject = <span class="string">'内容'</span>;</div><div class="line">    $view = <span class="string">'email.register'</span>;       <span class="comment">//传views\email\register.blade.php</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendTo($user, $subject, $view, $data);       <span class="comment">//在后面生成sendTo方法</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data = [])</span></span></div><div class="line">&#123;</div><div class="line">    Mail::queue($view, $data, <span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($user, $subject)</span></span>&#123;</div><div class="line">        $message-&gt;to($user-&gt;email)-&gt;subject($subject);      <span class="comment">//$user-&gt;email为用户注册填写的email</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>8、编写 <em><code>Controller</code></em> ：文件当用户点击链接时的处理函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">confirmEmail</span><span class="params">($confirm_code)</span></span></div><div class="line">&#123;</div><div class="line">    $user = User::where(<span class="string">'confirm_code'</span>, $confirm_code)-&gt;first();</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(is_null($user)) &#123;</div><div class="line">        <span class="keyword">return</span> redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果有查找到用户将认证设置为1，并再生成一个confirm_code确保下次点击url时无效</span></div><div class="line">    $user-&gt;is_confirmed = <span class="number">1</span>;</div><div class="line">    $user-&gt;confirm_code = str_random(<span class="number">48</span>);</div><div class="line">    $user-&gt;save();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redirect(<span class="string">'user/login'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>9、<em><code>生成发送给用户的url</code></em> 和 <em><code>设置路由</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在视图中生成url</div><div class="line">*/</div><div class="line">&lt;a href=<span class="string">"&#123;&#123; url('verify/'. $confirm_code) &#125;&#125;"</span>&gt;Click To Confirm&lt;/a&gt;  <span class="comment">//sendTo函数包含$confirm_code参数</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成路由</div><div class="line">*/</div><div class="line">Route::get(<span class="string">'verify/&#123;confirm_code&#125;'</span>, <span class="string">'nameController@confirmEmail'</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>重构邮件发送类(用event)并集成 SendCloud 邮件服务</p>
</blockquote>
<h3 id="一、重构邮件发送类"><a href="#一、重构邮件发送类" class="headerlink" title="一、重构邮件发送类"></a>一、重构邮件发送类</h3><p>1、在 <em><code>model</code></em> 中定义方法取代 <em><code>modelName::create()</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(array $array)</span>       //<span class="title">array</span>为用户数据构成的数组</span></div><div class="line">&#123;</div><div class="line">    $user = <span class="keyword">static</span>::create($array);</div><div class="line"></div><div class="line">    event(<span class="keyword">new</span> EventName($user));    <span class="comment">//触发事件完成listener中handle方法内容</span></div><div class="line">    <span class="keyword">return</span> $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>event</code></em> 文件中修改 <em><code>__construct</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $user;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>listener</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendWelcomeEmail</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $mailer;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserMailer $mailer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;mailer = $mailer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;mailer-&gt;welcome($event-&gt;user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、在 <em><code>App</code></em> 下创建 <em><code>Mailer\Mailer.php</code></em> （注意namespace是 <em><code>App\Mailer</code></em> ）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data=[])</span></span></div><div class="line">&#123;</div><div class="line">    Mail::queue($view, $data, <span class="function"><span class="keyword">function</span><span class="params">($message)</span> <span class="title">use</span> <span class="params">($user, $subject)</span></span>&#123;</div><div class="line">        $message-&gt;to($user-&gt;email)-&gt;subject($subject);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、因为所有邮件发送都会调用到源生的 <em><code>Mail</code></em>，所以将 <em><code>Mailer</code></em> 作为父类继承：创建一个 <em><code>Mailer\UserMailer</code></em>（namespace为 <em><code>App\UserMailer</code></em>）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMailer</span> <span class="keyword">extends</span> <span class="title">Mailer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($user)</span></span></div><div class="line">    &#123;</div><div class="line">        $subject = <span class="string">"Welcome to xxx"</span>;</div><div class="line">        $view = <span class="string">"emails.welcome"</span>;       <span class="comment">//创建views\emails\welcome.blade.php</span></div><div class="line">        $data = [<span class="string">'name'</span> =&gt; $user-&gt;name, <span class="string">'toekn'</span> =&gt; $user-&gt;token];       <span class="comment">//token为confirmed_code</span></div><div class="line"></div><div class="line">        <span class="keyword">$this</span> -&gt; sendTo($user, $subject, $view, $data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="集成-SendCloud-服务"><a href="#集成-SendCloud-服务" class="headerlink" title="集成 SendCloud 服务"></a>集成 SendCloud 服务</h3><p>1、配置 <em><code>mail.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'from'</span> =&gt; [<span class="string">'address'</span> =&gt; <span class="string">'发送email的邮箱'</span>, <span class="string">'name'</span> =&gt; <span class="string">'名字'</span>]</div></pre></td></tr></table></figure></p>
<p>2、配置 <em><code>.env</code></em><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SENDCLOUD_API_USER</span>= SendCloud 上的 API_USER</div><div class="line"><span class="attr">SENDCLOUD_API_KEY</span>= SendCloud 上的 API_KEY</div></pre></td></tr></table></figure></p>
<p>3、修改 <em><code>Mailer\Mailer.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $url = <span class="string">'http://api.sendcloud.net/apiv2/mail/sendtemplate'</span>;    <span class="comment">//一定要加这一行</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTo</span><span class="params">($user, $subject, $view, $data=[])</span></span></div><div class="line">&#123;</div><div class="line">    $vars = json_encode([<span class="string">'to'</span> =&gt; [$user-&gt;email], <span class="string">'sub'</span> =&gt; $data]);</div><div class="line">    $param = [</div><div class="line">        <span class="string">'apiUser'</span>            =&gt; env(<span class="string">'SENDCLOUD_API_USER'</span>), <span class="comment"># 使用api_user和api_key进行验证</span></div><div class="line">        <span class="string">'apiKey'</span>             =&gt; env(<span class="string">'SENDCLOUD_API_KEY'</span>),</div><div class="line">        <span class="string">'from'</span>               =&gt; config(<span class="string">'mail'</span>)[<span class="string">'from'</span>][<span class="string">'address'</span>], <span class="comment"># 发信人，用正确邮件地址替代</span></div><div class="line">        <span class="string">'fromName'</span>           =&gt; config(<span class="string">'mail'</span>)[<span class="string">'from'</span>][<span class="string">'name'</span>],</div><div class="line">        <span class="string">'xsmtpapi'</span>           =&gt; $vars,</div><div class="line">        <span class="string">'subject'</span>            =&gt; $subject,</div><div class="line">        <span class="string">'templateInvokeName'</span> =&gt; $view,</div><div class="line">        <span class="string">'respEmailId'</span>        =&gt; <span class="string">'true'</span></div><div class="line">    ];</div><div class="line">    $sendData = http_build_query($param);</div><div class="line">    $options = [</div><div class="line">        <span class="string">'http'</span> =&gt; [</div><div class="line">            <span class="string">'method'</span>  =&gt; <span class="string">'POST'</span>,</div><div class="line">            <span class="string">'header'</span>  =&gt; <span class="string">'Content-Type: application/x-www-form-urlencoded'</span>,</div><div class="line">            <span class="string">'content'</span> =&gt; $sendData</div><div class="line">        ]];</div><div class="line">    $context = stream_context_create($options);</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;url, FILE_TEXT, $context);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、修改 <em><code>Mailer\UserMailer.php</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcome</span><span class="params">($user)</span></span></div><div class="line">&#123;</div><div class="line">    $subject = <span class="string">'邮箱确认'</span>;      <span class="comment">//必须跟SendCloud上的邮件标题一样</span></div><div class="line">    $view = <span class="string">'welcome'</span>;         <span class="comment">//必须跟SendCloud上的调用名称一样</span></div><div class="line">    $data = [<span class="string">'%name%'</span> =&gt; [$user-&gt;name],<span class="string">'%token%'</span> =&gt; [str_random(<span class="number">40</span>)]];      <span class="comment">//SendCloud将%var%作为参数</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendTo($user, $subject, $view, $data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> mail </tag>
            
            <tag> SendCloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP单元测试]]></title>
      <url>/2017/06/09/PHP%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与php单元测试相关内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>laravel下创建一个简单的单元测试</p>
</blockquote>
<p>1、在 <em><code>tests\Unit</code></em> 目录下创建一个如 <em><code>NameTest</code></em> 的文件<br>2、让类继承于 <em><code>phpUnit</code></em> 类，<strong>引用被测试的类</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用于用于测试App\Product.php中的Product类中的name()方法是否返回'Mac'</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassName</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> <span class="keyword">extends</span> \<span class="title">PHPUnit_Framework_TestCase</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/** <span class="doctag">@test</span> */</span>		<span class="comment">//一定要声明为test，并且按照此行格式写</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a_product_has_a_name</span> <span class="params">()</span>		//声明函数名用`<span class="title">_</span>`分开	</span></div><div class="line">	&#123;</div><div class="line">		$product = <span class="keyword">new</span> Product(<span class="string">'Mac'</span>);</div><div class="line"></div><div class="line">		<span class="keyword">$this</span>-&gt;assertEquals(<span class="string">'Mac'</span>, $product-&gt;name());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、运行测试 <em><code>vendor/bin/phpunit</code></em> 或 <em><code>phpunit</code></em>，如果只运行单个测试文件<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit <span class="comment">--filter=NameTest</span></div></pre></td></tr></table></figure></p>
<p>4、解决单元测试代码重用问题：加入 <em><code>setUp</code></em> 函数（在每个函数执行之前都会先执行 <em><code>setUp</code></em> 函数内的内容）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	...;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Laravel测试Eloquent Model</p>
</blockquote>
<p>1、在 <em><code>tests/Unit</code></em> 下创建文件，并继承laravel的测试类<em><code>TestCase</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;		<span class="comment">//防止每次测试都产生数据</span></div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_method</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		factory(Article::class, <span class="number">3</span>)-&gt;create();		<span class="comment">//先在ModelFactory加入生成数据代码</span></div><div class="line">		factory(Article::class)-&gt;create([<span class="string">'reads'</span> =&gt; <span class="number">10</span>]);		<span class="comment">//增加一条信息，read字段为10</span></div><div class="line">		$mostPopular = factory(Article::class)-&gt;create([<span class="string">'reads'</span> =&gt; <span class="string">'20'</span>]);</div><div class="line"></div><div class="line">		$articles = Article::trending();	<span class="comment">//该方法按reads大小降序排列文章</span></div><div class="line">		</div><div class="line">		<span class="keyword">$this</span>-&gt;assertEquals($mostPopular-&gt;id, $articles-&gt;first()-&gt;id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>model</code></em> 中编写相应方法（用到 <em><code>queryScope</code></em> ）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeTrending</span><span class="params">($query)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> $query-&gt;orderBy(<span class="string">'reads'</span>, <span class="string">'desc'</span>)-&gt;get();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> phpunit </tag>
            
            <tag> test </tag>
            
            <tag> debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php命名空间和自动加载]]></title>
      <url>/2017/06/08/php%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>解决包含 <em><code>Class</code></em> 要用多个 <em><code>require</code></em> 问题</p>
</blockquote>
<a id="more"></a>
<h3 id="1、在项目目录下创建-composer-json-文件，加入以下内容"><a href="#1、在项目目录下创建-composer-json-文件，加入以下内容" class="headerlink" title="1、在项目目录下创建 composer.json 文件，加入以下内容"></a>1、在项目目录下创建 <em><code>composer.json</code></em> 文件，加入以下内容</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"autoload"</span>:&#123;</div><div class="line">		<span class="string">"psr-4"</span>:&#123;</div><div class="line">			<span class="string">"namespace的名\\"</span>:<span class="string">"实际路径名/"</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、在要被加载的文件加入"><a href="#2、在要被加载的文件加入" class="headerlink" title="2、在要被加载的文件加入"></a>2、在要被加载的文件加入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">namespace</span>的名;</div></pre></td></tr></table></figure>
<h3 id="3、生成-autoload-文件并加载"><a href="#3、生成-autoload-文件并加载" class="headerlink" title="3、生成 autoload 文件并加载"></a>3、生成 <em><code>autoload</code></em> 文件并加载</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">composer dump-autoload</span></div></pre></td></tr></table></figure>
<h3 id="4、在加载其他文件的文件中加入"><a href="#4、在加载其他文件的文件中加入" class="headerlink" title="4、在加载其他文件的文件中加入"></a>4、在加载其他文件的文件中加入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">namespace</span>的名\<span class="title">Class</span>文件名;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> namespace </tag>
            
            <tag> require </tag>
            
            <tag> autoload </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim常用操作]]></title>
      <url>/2017/06/07/vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>插入</p>
</blockquote>
<p>在当前位置前插入：<em>i</em><br>在当前行首插入：<em>I</em><br>在当前位置后插入：<em>a</em><br>在当前行尾插入：<em>A</em><br>在当前行之后插入一行：<em>o</em><br>在当前行之前插入一行：<em>O</em></p>
<blockquote>
<p>跳转</p>
</blockquote>
<p>跳到到行尾：<em>$</em><br>跳到到行首：<em>0</em><br>跳到n行：<em>nG</em><br>跳到文本末尾：<em>G</em><br>向下翻页：<em>Control + f</em><br>向上翻页：<em>Control + b</em><br>下一个单词：<em>w</em><br>上一个单词：<em>b</em><br>下一行行首：<em>+</em><br>上一行行首：<em>-</em></p>
<blockquote>
<p>删除</p>
</blockquote>
<p>删除到行首：<em>d$</em><br>删除到行尾：<em>D</em><br>删除光标字符：<em>x</em><br>删除光标后的单词：<em>de</em> </p>
<blockquote>
<p>复制粘贴</p>
</blockquote>
<p>复制当前行：<em>yy</em><br>复制从光标到行尾的内容：<em>y$</em><br>复制从光标到行首的内容：<em>y^</em><br>粘贴到光标右侧：<em>p</em><br>粘贴到光标左侧：<em>P</em></p>
<blockquote>
<p>查找</p>
</blockquote>
<p>查找：<em>/content</em>（ <em>n</em> 跳到下一个内容 ）</p>
]]></content>
      
        <categories>
            
            <category> vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Model Factory]]></title>
      <url>/2017/06/06/Model-Factory/</url>
      <content type="html"><![CDATA[<blockquote>
<p>运用 <em><code>Model Factory</code></em> 本地化并且创建数据库数据</p>
</blockquote>
<p><strong>可生成的字段：<code>https://github.com/fzaninotto/Faker</code></strong></p>
<hr>
<blockquote>
<p>一、用tinker生成 </p>
</blockquote>
<p>1、在 <code>database\factories</code> 中创建或使用文件，根据上述网址添加字段<br>2、本地化（使用中文创建数据）：修改 <em><code>App\Providers\AppServiceProvider.php</code></em> 的 <em><code>boot</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Generator</span> <span class="title">as</span> <span class="title">FakerGenerator</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">FakerFacotry</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//singleton方法：启动laravel项目的时候，该方法将写在里面的类返回单例模式给Laravel全局使用</span></div><div class="line">   <span class="keyword">$this</span>-&gt;app-&gt;singleton(FakerGenerator::class, <span class="function"><span class="keyword">Function</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> FakerFacotry::create(<span class="string">'zh_CN'</span>);</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">php artisan tinker      <span class="comment">//进入tinker</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line">factory(ModelName::class, num)-&gt;make()      <span class="comment">//num为要生成的数据个数，make方法只生成数据不加入数据库</span></div><div class="line">factory(ModelName::class, num)-&gt;create()    <span class="comment">//num为要生成的数据个数，create方法将生成的数据加入数据库</span></div></pre></td></tr></table></figure></p>
<p>4、根据另一个表的 <code>id</code> 生成随机 <code>id</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\Post::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    $user_ids = App\User::pluck(<span class="string">'id'</span>)-&gt;toArray();</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'content'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'user_id'</span> =&gt; $faker-&gt;randomElement($user_ids),</div><div class="line">    ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、用DB Seed生成</p>
</blockquote>
<p>1、生成 <em><code>seeder</code></em> 文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">php</span> <span class="selector-tag">artisan</span> <span class="selector-tag">make</span><span class="selector-pseudo">:seeder</span> <span class="selector-tag">FileName</span></div></pre></td></tr></table></figure></p>
<p>2、改 <em><code>database\seeds\FileName</code></em> 中的 <em><code>run</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    factory(\App\ModelName::class, num)-&gt;create();  <span class="comment">//num为要创建的数据条数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、因为执行 <em><code>php artisan db:seed</code></em> 默认执行 <em><code>DatabaseSeeder</code></em> 文件，故要在该文件加入以下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;call(FileName::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
<p>4、执行<em><code>php artisan db:seed</code></em></p>
<h3 id="如果要生成一个另一个表的数据"><a href="#如果要生成一个另一个表的数据" class="headerlink" title="如果要生成一个另一个表的数据"></a>如果要生成一个另一个表的数据</h3><p>1、在ModelFactory中增加<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$factory-&gt;define(App\ModelName::class, <span class="function"><span class="keyword">function</span> <span class="params">(Faker\Generator $faker)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> $password;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="comment">//'name' =&gt; $faker-&gt;name,</span></div><div class="line">        <span class="comment">//'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,</span></div><div class="line">        <span class="comment">//'password' =&gt; $password ?: $password = bcrypt('secret'),</span></div><div class="line">        <span class="comment">//'remember_token' =&gt; str_random(10),</span></div><div class="line">        <span class="string">'title'</span> =&gt; $faker-&gt;sentence,</div><div class="line">        <span class="string">'intro'</span> =&gt; $faker-&gt;paragraph,</div><div class="line">        <span class="string">'time'</span> =&gt; $faker-&gt;dateTime,</div><div class="line">        <span class="string">'image'</span> =&gt; $faker-&gt;imageUrl,</div><div class="line">    ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>2、在<em><code>DatabaseSeeder</code></em> 文件加入以下内容<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$this-&gt;call(FileName::<span class="class"><span class="keyword">class</span>);</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> database </tag>
            
            <tag> data </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel Event]]></title>
      <url>/2017/06/04/Laravel-Event/</url>
      <content type="html"><![CDATA[<blockquote>
<p>当触发某个事件时自动完成一系列的操作</p>
</blockquote>
<a id="more"></a>
<p>1、如果要修改新 <em><code>Event</code></em> 的名称，修改 <em><code>EventProvider.php</code></em> 中的 <em><code>listen</code></em> 数组<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $listen = [</div><div class="line">    <span class="string">'App\Events\NewEventName1'</span> =&gt; [</div><div class="line">        <span class="string">'App\Listeners1\ListenersName1'</span>,</div><div class="line">        <span class="string">'App\Listeners1\ListenersName2'</span>,</div><div class="line">        ...</div><div class="line">    ],</div><div class="line">    <span class="string">'App\Events\NewEventName2'</span> =&gt; [</div><div class="line">        <span class="string">'App\Listeners2\ListenersName1'</span>,</div><div class="line">        <span class="string">'App\Listeners2\ListenersName2'</span>,</div><div class="line">        ...</div><div class="line">    ],</div><div class="line">    ...</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>2、到 <em><code>listener</code></em> <strong>监听</strong>文件中的 <em><code>handle</code></em> 函数编写当事件触发时要执行的操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、触发事件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event(<span class="keyword">new</span> \App\Events\EventName());</div></pre></td></tr></table></figure></p>
<blockquote>
<p>引用功能模块</p>
</blockquote>
<p>1、<strong>引入模块功能</strong>，修改 <em><code>__construct()</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListenerName</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Filesystem $filesystem)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;filesystem = $filesystem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、<strong>编写处理操作</strong>，修改 <em><code>handle</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;filesystem-&gt;method();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>示例：触发用户事件</p>
</blockquote>
<p>1、更改 <em><code>Event</code></em> 文件中的 <em><code>__construct()</code></em> 函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventName</span> <span class="keyword">extends</span> <span class="title">Event</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">public</span> $user;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span>     //接收事件发生时传来的用户数据参数</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、更改 <em><code>listener</code></em> 文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    $event-&gt;user-&gt;name;     <span class="comment">//由Event文件传来的数据，引用用户名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>Route</code></em> 触发事件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$user = \App\User::find(<span class="number">1</span>);     </div><div class="line">event(<span class="keyword">new</span> \App\Events\EventName($user));    <span class="comment">//在Event文件编写了__construct()，所以传用户数据进去能进行以后操作</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>用event优化用户注册</p>
</blockquote>
<p>1、在 <em><code>model</code></em> 中定义方法取代 <em><code>modelName::create()</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(array $array)</span>       //<span class="title">array</span>为用户数据构成的数组</span></div><div class="line">&#123;</div><div class="line">    $user = <span class="keyword">static</span>::create($array);</div><div class="line"></div><div class="line">    event(<span class="keyword">new</span> EventName($user));    <span class="comment">//触发事件完成listener中handle方法内容</span></div><div class="line">    <span class="keyword">return</span> $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、在 <em><code>event</code></em> 文件中修改 <em><code>__construct</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> $user;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在 <em><code>listener</code></em> 文件中修改 <em><code>handle</code></em> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(EventName $event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> $event-&gt;user-&gt;email;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> Event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 向 Container 添加自定义类]]></title>
      <url>/2017/06/03/Laravel-%E5%90%91-Container-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>1、通过 <em><code>php artisan make:provider ProviderName</code></em> 创建一个 <em><code>provider</code></em></p>
<p>2、在 <em><code>app</code></em> 创建一个新的目录，目录创建新的<strong>类文件</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace App\directoryName</div><div class="line"></div><div class="line">class className &#123;</div><div class="line">    public function fname () </div><div class="line">    &#123;</div><div class="line">        ...;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、在新建的 <em><code>provider</code></em> 中的 <em><code>register</code></em> 函数绑定全局自己自定义的类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassName();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、（放入IOC中，可以在任何地方使用 <em><code>app(&#39;name&#39;)</code></em>实现 <code>3</code> 中的类）在 <em><code>config\app.php</code></em> 的 <em><code>provider</code></em> 数组中增加新建的 <em><code>provider</code></em><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span> =&gt; [</div><div class="line">    ...</div><div class="line">    App\Providers\NewServiceProvider::class;        <span class="comment">//NewServiceProvider为新建的provider文件名</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>5、在 <em><code>laravel</code></em> 的 <strong>任何地方</strong>可以调用类已经类里面的方法（<em><code>app</code></em> 内的参数名必须是在新 <em><code>provider</code></em> 的 <em><code>register</code></em> 函数中绑定的通过 <em><code>app</code></em> 绑定的名字）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在web.php中调用</span></div><div class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    $var = app(<span class="string">'name'</span>);     <span class="comment">//实例化了一个ClassName对象</span></div><div class="line">    $var-&gt;fname();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http状态码]]></title>
      <url>/2017/06/01/Http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Http常用状态码</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>2**：成功处理请求的状态代码 </p>
</blockquote>
<p><em><code>200</code></em>   （成功）        服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 </p>
<p><em><code>201</code></em>   （已创建）      请求成功并且服务器创建了新的资源。 </p>
<p><em><code>202</code></em>   （已接受）      服务器已接受请求，但尚未处理。 </p>
<p><em><code>203</code></em>   （非授权信息）   服务器已成功处理了请求，但返回的信息可能来自另一来源。 </p>
<p><em><code>204</code></em>   （无内容）      服务器成功处理了请求，但没有返回任何内容。 </p>
<p><em><code>206</code></em>   （部分内容）    服务器成功处理了部分 GET 请求。</p>
<blockquote>
<p>3**：要完成请求，需要进一步操作</p>
</blockquote>
<p><em><code>300</code></em>   （多种选择）      针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </p>
<p><em><code>301</code></em>   （永久移动）      请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p>
<p><em><code>303</code></em>   （查看其他位置）      请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p>
<p><em><code>304</code></em>   （未修改）      自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。 </p>
<p><em><code>305</code></em>   （使用代理）      请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。 </p>
<p><em><code>302</code></em>   （临时移动）      服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<p><em><code>307</code></em>   （临时重定向）      服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<blockquote>
<p>4**：请求错误</p>
</blockquote>
<p><em><code>400</code></em>   （错误请求）      服务器不理解请求的语法。 </p>
<p><em><code>401</code></em>   （未授权）      请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </p>
<p><em><code>403</code></em>   （禁止）      服务器拒绝请求。</p>
<p><em><code>404</code></em>   （未找到）      服务器找不到请求的网页。</p>
<p><em><code>405</code></em>   （方法禁用）      禁用请求中指定的方法。 </p>
<p><em><code>406</code></em>   （不接受）      无法使用请求的内容特性响应请求的网页。 </p>
<p><em><code>407</code></em>   （需要代理授权）      此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p>
<p><em><code>408</code></em>   （请求超时）      服务器等候请求时发生超时。 </p>
<p><em><code>409</code></em>   （冲突）      服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 </p>
<p><em><code>410</code></em>   （已删除）      如果请求的资源已永久删除，服务器就会返回此响应。</p>
<p><em><code>411</code></em>   （需要有效长度）      服务器不接受不含有效内容长度标头字段的请求。 </p>
<p><em><code>412</code></em>   （未满足前提条件）      服务器未满足请求者在请求中设置的其中一个前提条件。 </p>
<p><em><code>413</code></em>   （请求实体过大）      服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </p>
<p><em><code>414</code></em>   （请求的 URI 过长）      请求的 URI（通常为网址）过长，服务器无法处理。 </p>
<p><em><code>415</code></em>   （不支持的媒体类型）      请求的格式不受请求页面的支持。 </p>
<p><em><code>416</code></em>   （请求范围不符合要求）      如果页面无法提供请求的范围，则服务器会返回此状态代码。 </p>
<p><em><code>417</code></em>   （未满足期望值）      服务器未满足”期望”请求标头字段的要求。</p>
<blockquote>
<p>5**：服务器错误</p>
</blockquote>
<p><em><code>500</code></em>   （服务器内部错误）  服务器遇到错误，无法完成请求。 </p>
<p><em><code>501</code></em>   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。 </p>
<p><em><code>502</code></em>   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 </p>
<p><em><code>503</code></em>   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。 </p>
<p><em><code>504</code></em>   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </p>
<p><em><code>505</code></em>   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>
]]></content>
      
        <categories>
            
            <category> Http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Http </tag>
            
            <tag> project </tag>
            
            <tag> status code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/05/30/PhpStorm/</url>
      <content type="html"><![CDATA[<hr>
<p>title: PhpStorm<br>date: 2017-05-30 21:32:47<br>tags:</p>
<ul>
<li>ide</li>
<li>PhpStorm<br>categories: </li>
<li>phpstorm</li>
</ul>
<hr>
<blockquote>
<p>PhpStorm快捷键等</p>
</blockquote>
<a id="more"></a>
<p>一、通用类<br>1、*<code>Command + Shift + A</code>：搜索配置项（搜索<code>keymap</code>改快捷键）<br>2、<code>Command + P</code>：文件之间跳转<br>3、<code>Command + B</code>：查看类的关系<br>4、<code>Command + Control + S</code>：查看类里面的方法等</p>
<p>二、编辑类<br>1、<code>Command + Delete</code>：删除光标行<br>2、<code>Shift + Delete</code>：删除光标后面所有内容<br>3、<code>Control + Delete</code>：删除光标前面所有内容<br>4、<code>Control + Shift + Delete</code>：删除光标所在单词<br>5、<code>Command + Shift+ D</code>：复制当前行到下一行<br>6、<code>Command + D</code>：逐个选相同的词（多点编辑）<br>7、<code>Command + Control + D</code>：全选相同的词（多点编辑）<br>8、<code>Command + G</code>：选中下一个光标所在一样的词<br>9、<code>Command + Shift + G</code>：选中上一个光标所在一样的词</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序相关文档]]></title>
      <url>/2017/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与小程序相关网站</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>文档类</p>
</blockquote>
<p><strong>微信小程序官方文档：</strong><code>https://mp.weixin.qq.com/debug/wxadoc/dev/</code><br><strong>&lt;简书&gt;小程序开发专栏：</strong><code>http://www.jianshu.com/c/dfdc2bbd1315</code><br><strong>W3Cschool文档：</strong><code>http://www.w3cschool.cn/weixinapp/weixinapp-app.html</code></p>
<blockquote>
<p>各功能实现</p>
</blockquote>
<p><strong>功能合集：</strong><code>http://weixin1024.cn/forum.php?mod=viewthread&amp;tid=1027&amp;extra=page%3D1</code></p>
<blockquote>
<p>小程序账号申请</p>
</blockquote>
<p><strong>&lt;有道云笔记&gt;：</strong><code>http://note.youdao.com/share/?id=744b94b02c28321c8f930e1f495624e5&amp;type=note#/</code></p>
<blockquote>
<p>项目案例</p>
</blockquote>
<p><strong>项目列表：</strong><code>http://blog.csdn.net/qq137722697/article/details/52988719</code><br><strong>小黄车小程序：</strong><code>http://www.jianshu.com/p/68e3b8927a77</code><br><strong><github>项目：</github></strong><code>http://www.cnblogs.com/tuyile006/p/6268961.html</code></p>
<blockquote>
<p>登录注册实现</p>
</blockquote>
<h2 id="维护用户登录态可以用JWT完成"><a href="#维护用户登录态可以用JWT完成" class="headerlink" title="维护用户登录态可以用JWT完成"></a><strong>维护用户登录态可以用JWT完成</strong></h2><p>1、注意设置JWT过去时间<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$payload = [</div><div class="line">            <span class="string">'email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),</div><div class="line">            <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>)，</div><div class="line">            <span class="string">'exp'</span> =&gt; time()+<span class="number">60</span>*<span class="number">60</span>   <span class="comment">//设置token过期时间</span></div><div class="line">        ];</div><div class="line">$token = JWTAuth::attempt($payload)</div></pre></td></tr></table></figure></p>
<p><strong>&lt;简书&gt;后台登录文章：</strong><code>http://www.jianshu.com/p/6096e8522c4c</code><br><strong><csdn>注册登录实现：</csdn></strong><code>http://blog.csdn.net/qq_19558705/article/details/65935818?utm_source=gold_browser_extension</code></p>
<blockquote>
<p>http站点转https站点</p>
</blockquote>
<p><strong>在nginx服务器下配置和安装阿里云购买的SSL证书：</strong><code>http://sanwen.net/a/hmdfcoo.html</code></p>
<blockquote>
<p>request请求(前端后台数据交互)</p>
</blockquote>
<p><strong>request请求：</strong><code>http://blog.csdn.net/qq_19558705/article/details/60783448</code></p>
]]></content>
      
        <categories>
            
            <category> Wechat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mini Programes </tag>
            
            <tag> Wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 面向对象编程]]></title>
      <url>/2017/05/14/PHP-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PHP 面向对象相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>final关键字</p>
</blockquote>
<h2 id="final关键字只能用来标记类和方法"><a href="#final关键字只能用来标记类和方法" class="headerlink" title="final关键字只能用来标记类和方法"></a><strong>final关键字只能用来标记类和方法</strong></h2><p><strong>1、final标记的类不能被继承</strong><br><strong>2、final标记的方法不能被子类覆盖，是最终版本</strong></p>
<blockquote>
<p>__call()方法</p>
</blockquote>
<h2 id="当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来"><a href="#当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来" class="headerlink" title="当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来"></a><strong>当调用对象内部方法不存在时自动调用，第一个参数为不存在的函数名，第二个参数把这个方法里的参数作为数组形式传进来</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($function_name, $args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> $function_name;</div><div class="line">        print_r($args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> test();</div><div class="line">$test -&gt; hello(<span class="string">'you'</span>, <span class="string">'are'</span>, <span class="string">'sb'</span>);</div><div class="line"></div><div class="line"><span class="comment">//程序不会退出继续执行</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"11111"</span>;</div></pre></td></tr></table></figure>
<p>上述的输出结果为<code>hello Array([0] =&gt; you [1] =&gt; are [2] =&gt; sb)</code></p>
<blockquote>
<p>static 和 const</p>
</blockquote>
<h2 id="1、static"><a href="#1、static" class="headerlink" title="1、static"></a>1、static</h2><p>（1）<strong>static的成员在类第一次被加载的时候分配空间，被实例化的对象共用，属于类，无法用<code>$this</code>访问</strong><br>（2）在类内部访问<code>static成员</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>::$变量名      <span class="comment">//有'$'</span></div></pre></td></tr></table></figure></p>
<p>（3）在类外部访问<code>static成员</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName::$变量名     <span class="comment">//有'$'</span></div></pre></td></tr></table></figure></p>
<h2 id="2、const"><a href="#2、const" class="headerlink" title="2、const"></a>2、const</h2><p>（1）<strong>const为在类内部定义常量的方法</strong><br>（2）在类内部访问<code>const属性</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>::变量名       <span class="comment">//没有'$'</span></div></pre></td></tr></table></figure></p>
<p>（3）在类外部访问<code>const属性</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName::变量名      <span class="comment">//没有'$'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>trait</p>
</blockquote>
<p><strong>解决代码重用问题</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">trait</span> NameTrait &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="string">'something'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className1</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">NameTrait</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className2</span> </span>&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">NameTrait</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> ClassName1()-&gt;fun();</div><div class="line"><span class="keyword">new</span> ClassName2()-&gt;fun();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>public、protected、private</p>
</blockquote>
<p><strong>protected方法不能直接在继承的类的对象中访问，要在继承类中重新定义一个方法里面调用 <em><code>$this-&gt;method</code></em></strong><br>1、public声明的成员可以在<em>任何位置</em>调用<br>2、protected声明的成员只有在<em>类的内部</em>还有<em>子类</em>中可以调用<br>3、private声明的成员只有在<em>类的内部</em>可以调用<br>4、调用方法为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span> -&gt; name;      <span class="comment">//调用成员属性</span></div><div class="line"><span class="keyword">$this</span> -&gt; <span class="function"><span class="keyword">function</span><span class="params">()</span></span>;    <span class="comment">//调用成员方法</span></div></pre></td></tr></table></figure></p>
<h2 id="注：子类的权限只能大于等于父类"><a href="#注：子类的权限只能大于等于父类" class="headerlink" title="注：子类的权限只能大于等于父类"></a><strong>注：子类的权限只能大于等于父类</strong></h2><blockquote>
<p>接口（Interface）</p>
</blockquote>
<h2 id="定义：类里面所有的方法都为抽象方法的类称为接口"><a href="#定义：类里面所有的方法都为抽象方法的类称为接口" class="headerlink" title="定义：类里面所有的方法都为抽象方法的类称为接口"></a><strong>定义：类里面所有的方法都为抽象方法的类称为接口</strong></h2><p><strong>1、接口内不能声明变量，但可以声明常量constant</strong><br><strong>2、所有成员都是public权限</strong><br><strong>3、声明接口使用关键字<code>interface</code></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">One</span> </span>&#123;</div><div class="line">    <span class="comment">//定义一个常量</span></div><div class="line">    <span class="keyword">const</span> constant = <span class="string">'constant value'</span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个抽象方法"fun1"</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义了抽象方法"fun2"</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>4、定义接口的子类实现接口中全部抽象方法使用关键字<code>implements</code></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Three</span> <span class="keyword">implements</span> <span class="title">One</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>5、子类必须实现所有的抽象方法才能被实例化</strong><br><strong>6、一个类可以实现多个接口</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Four</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span>, ... </span>&#123;</div><div class="line">    <span class="comment">//必须把所有接口中的方法都实现才可以实例化对象</span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>7、在继承一个类的同时实现多个接口，先继承再实现</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Four</span> <span class="keyword">extends</span> <span class="title">ClassName1</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span>, ... </span>&#123;</div><div class="line">    <span class="comment">//所有接口中的方法都要实现才可以实例化对象</span></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>面向接口编程</p>
</blockquote>
<p>在需要用到<strong>类作为参数</strong>的方法中将<strong>接口</strong>作为参数，过后传参数只需要传一个<strong>实现的接口的对象</strong>就可以<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 创建一个接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">($message)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 实现接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">class1</span> <span class="keyword">implements</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 实现接口</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">class2</span> <span class="keyword">implements</span> <span class="title">hello</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($message)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $message;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建一个类</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> $hello;</div><div class="line"></div><div class="line">    <span class="comment">//参数为接口</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(hello $hello)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;hello = $hello;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $message = <span class="string">"Nancelglap"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;hello-&gt;show($message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当要切换类的时候就不用再更改construct方法中的hello接口，直接改实例化对象的类名</span></div><div class="line">$demo = <span class="keyword">new</span> Controller(<span class="keyword">new</span> class1);</div><div class="line">$demo -&gt; show();</div><div class="line"></div><div class="line">$demo = <span class="keyword">new</span> Controller(<span class="keyword">new</span> class2);</div><div class="line">$demo -&gt; show();</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> OOP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git相关]]></title>
      <url>/2017/05/13/git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>与git相关的内容</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>Git配置</p>
</blockquote>
<p>一、增加配置项<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span>/<span class="keyword">system</span> 配置名 <span class="string">"值"</span></div></pre></td></tr></table></figure></p>
<p>1、如果只在当前项目增加配置<br>    （1）切换到当前项目<br>    （2）<code>git config 配置名 &quot;值&quot;</code><br>1、<em><code>--global</code></em> 将配置放到home目录下<em>（<code>~/.gitconfig</code>）</em><br>2、<em><code>--system</code></em> 将配置放到<em><code>/etc/.gitconfig</code></em>中<br>3、<em><code>--local</code></em> 将配置放到每一个项目中<br>4、常用配置有<em><code>user.name</code></em>、<em><code>user.eamil</code></em>，<em><code>color.ui</code></em>，<em><code>core.editor</code></em></p>
<p>二、查看配置项<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">config</span> 配置名</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git基本工作流程</p>
</blockquote>
<p>1、查看修改状态<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git status</span></div></pre></td></tr></table></figure></p>
<p>2、初始化当前目录<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git init</span></div></pre></td></tr></table></figure></p>
<p>3、如果有文件修改，先加入 <em><code>staged area</code></em><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">add </span>文件名 / git <span class="keyword">add </span>.</div></pre></td></tr></table></figure></p>
<p>4、更新提交到 <em><code>staged area</code></em> 的内容（只修改没执行<code>git add</code>的不会更新）<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> commit -m <span class="string">"更新描述"</span></div></pre></td></tr></table></figure></p>
<p>5、查看 <em><code>commit</code></em> 的内容<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span>     <span class="comment">//按q退出</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>.gitignore</p>
</blockquote>
<p>将上传的文件内容加入此文件中，更新会忽略此文件<br>1、用PhpStorm编辑的，加入<em><code>.idea</code></em><br>2、用Mac系统的，加入<em><code>.DS_Store</code></em></p>
<blockquote>
<p>Git分支</p>
</blockquote>
<p><strong>想修改之前的bug，但是又不想将还没写完的新内容提交上去等</strong></p>
<p>1、查看分支<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch</span></div></pre></td></tr></table></figure></p>
<p>2、回到某个文件提交之前的内容<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git checkout -- app/Http/routes.php</span></div></pre></td></tr></table></figure></p>
<p>3、创建分支、切换到分支<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch BranchName</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout BranchName</span></div><div class="line"><span class="meta"></span></div><div class="line">$<span class="bash"> git checkout -b BranchName  //创建分支并切换到该分支</span></div></pre></td></tr></table></figure></p>
<p>4、合并分支（在<em><code>matser</code></em>下操作）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git merge BranchName</span></div></pre></td></tr></table></figure></p>
<p>5、删除分支<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> BranchName</span></div></pre></td></tr></table></figure></p>
<p>6、推送本地分支到远程分支<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> local_branch:remote_branch</div></pre></td></tr></table></figure></p>
<p>7、拉取远程分支<br>（拉取远程 <code>dev</code> 分支，在本地创建 <code>dev</code> 分支）<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b <span class="built_in">dev</span> origin/<span class="built_in">dev</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git分支merge冲突的修改</p>
</blockquote>
<p><strong>当<em><code>master</code></em>和分支中同个文件修改存在冲突，则需要处理</strong></p>
<h2 id="必须是两个分支的文件都已经git-add和git-commit-m-quot-content-quot-操作"><a href="#必须是两个分支的文件都已经git-add和git-commit-m-quot-content-quot-操作" class="headerlink" title="必须是两个分支的文件都已经git add和git commit -m&quot;content&quot;操作"></a>必须是两个分支的文件都已经<em><code>git add</code></em>和<em><code>git commit -m&quot;content&quot;</code></em>操作</h2><p>1、切换到<em><code>master</code></em>，执行 <em><code>git merge BranchName</code></em>，会报有冲突</p>
<p>2、进入冲突文件，删掉不要的冲突内容，然后执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git add fileName</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit</span></div><div class="line"></div><div class="line">//进入到vim后保存退出</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git设置快捷键</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.s</span> status  <span class="comment">//设置后用 git s 替代 git status</span></div></pre></td></tr></table></figure>
<p><strong>全局设置快捷键</strong><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> vim ~/.zshrc</div><div class="line"></div><div class="line"><span class="comment">//加入以下内容</span></div><div class="line"><span class="symbol">$</span> <span class="keyword">alias</span> gs=<span class="string">"git status"</span>   <span class="comment">//设置后用 gs 替代 git status</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Git stash</p>
</blockquote>
<p><strong>运用场景：如果在一个分支上开发一个模块同时，又要回到master中改bug，执行<em><code>git stash</code></em>可以将分支上的修改先放到一边，回到<em><code>master</code></em>中更新内容</strong></p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git stash list      <span class="comment">//查看之前拿开的内容</span></div><div class="line"><span class="symbol">$</span> git stash apply stash@&#123;num&#125;     <span class="comment">//恢复相应num的内容</span></div><div class="line"><span class="symbol">$</span> git stash pop       <span class="comment">//回复内容并删除，省略掉drop步骤</span></div><div class="line"><span class="symbol">$</span> git stash drop      <span class="comment">//删掉list中拿开的内容</span></div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>1、将在 <em><code>master</code></em> 中修改好的合并到<strong>未完成</strong>的分支上<br>2、<em><code>master</code></em> 未融合<strong>未完成</strong>的分支的内容</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><strong>一、修改 <em><code>master</code></em> 上的内容，合并到分支上，但分支内容不合并到 <em><code>master</code></em> 上</strong></p>
<p>1、修改分支的内容</p>
<p>2、在分支执行 <em><code>git stash</code></em></p>
<p>3、在 <em><code>master</code></em> 分支中更改内容，改完之后<em><code>gaa</code></em>、<em><code>gc</code> “content”</em></p>
<p>4、回到 <em><code>master</code></em> 分支，执行<em><code>git merge BranchName</code></em> 合并</p>
<p><strong>二、继续完成分支上的内容，完成后合并到 <em><code>master</code></em></strong></p>
<p>1、<em><code>git checkout BranchName</code></em>切换到分支</p>
<p>2、<em><code>git stash apply</code></em> 或 <em><code>git stash pop</code></em> 拿回原来拿开的问题</p>
<p>3、继续写分支内容，写完然后 <em><code>gaa</code></em>、<em><code>gc</code> “content”</em></p>
<p>4、回到 <em><code>master</code></em> 分支，执行<em><code>git merge BranchName</code></em> 合并</p>
<blockquote>
<p>本地更新代码后更新到github上</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"描述内容"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></div></pre></td></tr></table></figure>
<blockquote>
<p>本地更新到远程服务器上</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"描述内容"</span>     //只有更改文件的目录才会改描述内容</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push</span></div><div class="line"></div><div class="line">//切到服务器，进入项目目录</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/www/laravel/</span></div><div class="line"><span class="meta">$</span><span class="bash"> git pull</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VPS上配置和域名解析]]></title>
      <url>/2017/05/13/VPS%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%92%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1、更改-etc-nginx-sites-avaliable-default"><a href="#1、更改-etc-nginx-sites-avaliable-default" class="headerlink" title="1、更改/etc/nginx/sites-avaliable/default"></a><strong>1、更改<code>/etc/nginx/sites-avaliable/default</code></strong></h2><p>修改<code>server</code>中的<code>server_name</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">server_name</span> <span class="selector-tag">elective</span><span class="selector-class">.com</span> <span class="selector-tag">www</span><span class="selector-class">.elective</span><span class="selector-class">.com</span>;</div></pre></td></tr></table></figure></p>
<h2 id="2、重启nginx使配置文件生效"><a href="#2、重启nginx使配置文件生效" class="headerlink" title="2、重启nginx使配置文件生效"></a><strong>2、重启nginx使配置文件生效</strong></h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo service nginx restart</span></div></pre></td></tr></table></figure>
<h2 id="3、解析域名"><a href="#3、解析域名" class="headerlink" title="3、解析域名"></a><strong>3、解析域名</strong></h2><p>（1）复制IP地址<br>（2）打开dnspod进行域名解析<code>https://www.dnspod.cn/</code><br>（3）将记录类型为<code>A</code>的记录值修改为<code>IP地址</code><br>（4）复制上方的DNS修改内容，到<strong>godaddy</strong>网站<br><code>https://sg.godaddy.com/zh?isc=gennbacn29&amp;countrview=1&amp;currencytype=CNY&amp;mkwid=WFSMCUdy&amp;cvosrc=ppc.baidu</code><br>（5）到<code>mydomain</code>里修改<code>Nameservers</code>，<code>nameservers type</code>改为<code>Custom</code>，两个<code>Nameserver</code>内容粘贴刚才复制的两条内容</p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> VPS </tag>
            
            <tag> server </tag>
            
            <tag> Domain </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装LEMP环境]]></title>
      <url>/2017/05/12/%E5%AE%89%E8%A3%85LEMP%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在mac/linux上安装LEMP环境</p>
</blockquote>
<a id="more"></a>
<p>购买远程服务器VPS教程：<br><code>https://www.laravist.com/series/deploy-laravel-app-on-vps/episodes/1</code></p>
<h2 id="1、先登录远程服务器"><a href="#1、先登录远程服务器" class="headerlink" title="1、先登录远程服务器"></a><strong>1、先登录远程服务器</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@Ip</span> Address</div></pre></td></tr></table></figure>
<p>查看服务器（选择ubuntu14）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<h2 id="2、更新apt-get"><a href="#2、更新apt-get" class="headerlink" title="2、更新apt-get"></a><strong>2、更新apt-get</strong></h2><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>
<h2 id="3、安装语言包"><a href="#3、安装语言包" class="headerlink" title="3、安装语言包"></a><strong>3、安装语言包</strong></h2><p>避免系统语言引起的冲突问题<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> <span class="keyword">language</span>-pack-<span class="keyword">en</span>-base</div></pre></td></tr></table></figure></p>
<h2 id="4、设置语言"><a href="#4、设置语言" class="headerlink" title="4、设置语言"></a><strong>4、设置语言</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">locale-gen</span> <span class="selector-tag">en_US</span><span class="selector-class">.UTF-8</span></div></pre></td></tr></table></figure>
<h2 id="5、安装常用工具"><a href="#5、安装常用工具" class="headerlink" title="5、安装常用工具"></a><strong>5、安装常用工具</strong></h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install -y vim htop git    <span class="comment">//htop查看机器cup等用了多，git用于部署项目</span></div></pre></td></tr></table></figure>
<h2 id="6、安装php7（通过添加ppa方式安装）"><a href="#6、安装php7（通过添加ppa方式安装）" class="headerlink" title="6、安装php7（通过添加ppa方式安装）"></a><strong>6、安装php7（通过添加ppa方式安装）</strong></h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y software-properties-common</div><div class="line">sudo LC_ALL=en_US.UTF-8<span class="built_in"> add-apt-repository </span>ppa:ondrej/php</div><div class="line">sudo apt-get update</div><div class="line">apt-cache search php7.1    //查找php7.1包</div><div class="line"></div><div class="line">sudo apt-get install -y php7.1</div><div class="line">php -v      //查看版本</div><div class="line">sudo apt-get install -y php7.1-mysql</div><div class="line">sudo apt-get install -y php7.1-fpm</div><div class="line">sudo apt-get install -y php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</div></pre></td></tr></table></figure>
<h2 id="7、安装mysql"><a href="#7、安装mysql" class="headerlink" title="7、安装mysql"></a><strong>7、安装mysql</strong></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> mysql-<span class="keyword">server</span><span class="number">-5.6</span></div></pre></td></tr></table></figure>
<h2 id="8、安装nginx"><a href="#8、安装nginx" class="headerlink" title="8、安装nginx"></a><strong>8、安装nginx</strong></h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install nginx</div></pre></td></tr></table></figure>
<h2 id="9、阿里云服务器用ip地址访问"><a href="#9、阿里云服务器用ip地址访问" class="headerlink" title="9、阿里云服务器用ip地址访问"></a><strong>9、阿里云服务器用ip地址访问</strong></h2><p><code>http://blog.csdn.net/qq_27211105/article/details/55668997</code><br><strong>增加安全组配置规则</strong><br>1、网卡类型：<em>公网</em><br>2、规则方向：<em>入方向</em><br>3、授权策略：<em>允许</em><br>4、协议类型：<em>TCP</em><br>5、端口范围：<em>80/80</em><br>6、授权类型：<em>地址段访问</em><br>7、授权对象：<em>0.0.0.0/0</em><br>8、优先级：<em>1</em></p>
]]></content>
      
        <categories>
            
            <category> server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> mysql </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在购买的VPS上配置环境运行Laravel]]></title>
      <url>/2017/05/12/%E5%9C%A8%E8%B4%AD%E4%B9%B0%E7%9A%84VPS%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8CLaravel/</url>
      <content type="html"><![CDATA[<blockquote>
<p>php + nginx + mysql</p>
</blockquote>
<a id="more"></a>
<p>购买VPS服务器地址：<strong><code>https://www.vultr.com/</code></strong></p>
<h2 id="1、先登录远程服务器"><a href="#1、先登录远程服务器" class="headerlink" title="1、先登录远程服务器"></a><strong>1、先登录远程服务器</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@Ip</span> Address</div></pre></td></tr></table></figure>
<h2 id="2、配置php（修改php-ini）"><a href="#2、配置php（修改php-ini）" class="headerlink" title="2、配置php（修改php.ini）"></a><strong>2、配置php（修改<code>php.ini</code>）</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim <span class="regexp">/etc/</span>php<span class="regexp">/7.1/</span>fpm<span class="regexp">/php.ini</span></div></pre></td></tr></table></figure>
<p>将<code>cgi.fix_pathinfo=1</code>去掉注释，并改为<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">cgi.fix_pathinfo</span>=<span class="string">0</span></div></pre></td></tr></table></figure></p>
<h2 id="3、配置php-fpm（可以不改）"><a href="#3、配置php-fpm（可以不改）" class="headerlink" title="3、配置php-fpm（可以不改）"></a><strong>3、配置php-fpm（可以不改）</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="regexp">/etc/</span>php<span class="regexp">/7.1/</span>fpm<span class="regexp">/pool.d/</span>www.conf</div></pre></td></tr></table></figure>
<p>（可以不改）改<code>listen = /run/php/php7.1-fpm.sock</code>为<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">listen</span> = /var/<span class="built_in">run</span>/php7<span class="number">.1</span>-fpm.sock</div></pre></td></tr></table></figure></p>
<h2 id="4、配置nginx的default文件"><a href="#4、配置nginx的default文件" class="headerlink" title="4、配置nginx的default文件"></a><strong>4、配置nginx的default文件</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-avaliable/</span><span class="keyword">default</span></div></pre></td></tr></table></figure>
<p>改<code>server</code>内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    root /<span class="keyword">var</span>/www/laravel/<span class="keyword">public</span>;   <span class="comment">//自定义根目录，laravel为创建的项目</span></div><div class="line">    index index.php index.html index.htm;   <span class="comment">//服务器首先找public目录下的index.php</span></div><div class="line"></div><div class="line">    server_name localhost;  <span class="comment">//如果有注册域名就改为自己的域名</span></div><div class="line"></div><div class="line">    <span class="comment">//修改location里面的try_files</span></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>直接增加<code>location ~ \.php$</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ~ \.php$ &#123;</div><div class="line">    try_files $uri /index.php =<span class="number">404</span>;</div><div class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">    fastcgi_pass unix:/<span class="keyword">var</span>/run/php7<span class="number">.1</span>-fpm.sock;     <span class="comment">//如果php-fpm配置改了就要改成相应的listen值</span></div><div class="line">    fastcgi_index index.php;</div><div class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">    <span class="keyword">include</span> fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5、创建根目录"><a href="#5、创建根目录" class="headerlink" title="5、创建根目录"></a><strong>5、创建根目录</strong></h2><p>根据<code>/etc/nginx/sites-avaliable/default</code>中<code>server</code>内容中的<code>root</code>创建根目录<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> /<span class="keyword">var</span>/www      <span class="comment">//根据自定义的路径创建</span></div></pre></td></tr></table></figure></p>
<h2 id="6、改根目录拥有者"><a href="#6、改根目录拥有者" class="headerlink" title="6、改根目录拥有者"></a><strong>6、改根目录拥有者</strong></h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">sudo</span> chown -<span class="type">R</span> www-<span class="class"><span class="keyword">data</span>:www-<span class="keyword">data</span> /var/www   //www-<span class="keyword">data</span>默认为nginx的用户名和用户组</span></div></pre></td></tr></table></figure>
<h2 id="7、在服务器根目录下创建Laravel项目并上传到github"><a href="#7、在服务器根目录下创建Laravel项目并上传到github" class="headerlink" title="7、在服务器根目录下创建Laravel项目并上传到github"></a><strong>7、在服务器根目录下创建Laravel项目并上传到github</strong></h2><blockquote>
<p>通过git拉取实现</p>
</blockquote>
<p><strong>（1）回到本地创建Laravel项目</strong><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">laravel </span><span class="string">new </span><span class="string">ProjectName </span>    //如果没将<span class="string">laravel加</span>入全局变量就用<span class="string">composer</span></div><div class="line"><span class="string">composer </span><span class="built_in">create-project</span> <span class="string">laravel/</span><span class="string">laravel </span><span class="string">ProjectName</span></div></pre></td></tr></table></figure></p>
<p><strong>（2）在github创建新项目</strong></p>
<p><strong>（3）上传项目</strong><br><strong>先在服务器上创建ssh key，后加入到github的ssh key中</strong><br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C “github邮箱”</div></pre></td></tr></table></figure></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd ProjectName/</div><div class="line"></div><div class="line">git init</div><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"更改描述"</span></div><div class="line"></div><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:UserName/ProjectName.git   //UserName为自己的github用户名，ProjectName为在github创建的项目名</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p><strong>（4）刷新github就可看见代码</strong></p>
<h2 id="8、用git将github上的代码克隆到服务器"><a href="#8、用git将github上的代码克隆到服务器" class="headerlink" title="8、用git将github上的代码克隆到服务器"></a><strong>8、用git将github上的代码克隆到服务器</strong></h2><p><strong>开发的话如果有更新就先将代码推送到gtihub，再从服务器拉取代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git pull    <span class="comment">//更新github上的代码</span></div><div class="line"><span class="comment">//ssh登录远程服务器后，切到www目录</span></div><div class="line">git <span class="keyword">clone</span> git项目地址</div></pre></td></tr></table></figure></p>
<p><strong>更新项目</strong></p>
<blockquote>
<p>本地更新到服务器上</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"描述内容"</span>     <span class="comment">//只有更改文件的目录才会改描述内容</span></div><div class="line">git <span class="keyword">push</span></div><div class="line"></div><div class="line"><span class="comment">//切到服务器，进入项目目录</span></div><div class="line">cd <span class="regexp">/var/</span>www<span class="regexp">/laravel/</span></div><div class="line">git pull</div></pre></td></tr></table></figure>
<blockquote>
<p>本地更新到github上</p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"描述内容"</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h2 id="9、安装composer"><a href="#9、安装composer" class="headerlink" title="9、安装composer"></a><strong>9、安装composer</strong></h2><blockquote>
<p>地址<code>www.getcomposer.org/download/</code></p>
</blockquote>
<p><strong>（1）全局使用composer</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv composer.phar <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>composer</div></pre></td></tr></table></figure></p>
<p><strong>（2）进入到项目目录</strong><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/var/www/ProjectName/</span></div><div class="line"></div><div class="line">composer install <span class="params">--no-dev</span></div></pre></td></tr></table></figure></p>
<p>如果<em><code>composer install --no-dev</code></em>出现问题，因为没安装<em><code>zip</code></em>、和<em><code>unzip</code></em></p>
<h2 id="10、创建-env文件并修改权限"><a href="#10、创建-env文件并修改权限" class="headerlink" title="10、创建.env文件并修改权限"></a><strong>10、创建.env文件并修改权限</strong></h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/var/www/ProjectName/</span></div><div class="line"></div><div class="line">vim <span class="string">.env</span></div></pre></td></tr></table></figure>
<p><strong>（1）加入所有配置项，修改以下(未修改的未列出)</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">APP_ENV</span> = production</div><div class="line"><span class="attr">APP_DEBUG</span> = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="attr">DB_DATABASE</span> = 数据库名</div><div class="line"><span class="attr">DB_USERNAME</span> = 数据库用户名</div><div class="line"><span class="attr">DB_PASSWORD</span> = 数据库用户密码</div></pre></td></tr></table></figure></p>
<p><strong>（2）修改权限</strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R <span class="number">775</span> storage/</div></pre></td></tr></table></figure></p>
<h2 id="11、重载nginx，重启php-fpm，将项目目录给nginx用户"><a href="#11、重载nginx，重启php-fpm，将项目目录给nginx用户" class="headerlink" title="11、重载nginx，重启php-fpm，将项目目录给nginx用户"></a><strong>11、重载nginx，重启php-fpm，将项目目录给nginx用户</strong></h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service nginx reload</div><div class="line">sudo service php7<span class="number">.1</span>-fpm restart</div><div class="line">sudo chown -R www-<span class="string">data:</span>www-data <span class="regexp">/var/</span>www<span class="regexp">/ProjectName/</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> server </category>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> VPS </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用户认证（Auth）]]></title>
      <url>/2017/05/10/%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一、auth.php文件配置(修改auth验证的表)</p>
</blockquote>
<p>在<code>guards</code>数组中的每一项都是一个角色，默认的有<code>web</code>和<code>api</code>两种，这就表示了当前有这两种角色会使用到认证系统。<br><code>driver</code>就是表示这个认证要怎么去保存用户状态，一般是保存在<code>session</code>中，<strong><code>provider</code>就是告诉Laravel你的用户信息保存在哪一张表里面</strong>，driver就是告诉了要使用那种方式来操作数据库。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">'guards'</span> =&gt; [</div><div class="line">    <span class="string">'web'</span> =&gt; [</div><div class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</div><div class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="string">'api'</span> =&gt; [</div><div class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'token'</span>,</div><div class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</div><div class="line">    ],</div><div class="line">],</div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、具体运用</p>
</blockquote>
<h2 id="方法一：在Controller中增加middleware键值对"><a href="#方法一：在Controller中增加middleware键值对" class="headerlink" title="方法一：在Controller中增加middleware键值对"></a><strong>方法一：在Controller中增加<code>middleware</code>键值对</strong></h2><p>当路由中使用了保护路由：<code>&#39;middleware&#39; =&gt; &#39;auth&#39;</code>，此路由需先经过路由的路径名为’/login’执行后才跳转到此路由执行<br><strong>可以对路由组使用此中间件，以下组内所有路由的访问都需先经过路由路径为’/login’的认证</strong><br><strong>路由中的路径必须是根目录下的’/login’</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果路径前面再加任何的前缀就会出错'/admin/path'</span></div><div class="line">Route::get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> view(<span class="string">'auth.login'</span>);    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Route::group([<span class="string">'namespace'</span>=&gt;<span class="string">'Admin'</span>, <span class="string">'middleware'</span>=&gt;<span class="string">'auth'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Route::get(<span class="string">'admin/path1'</span>, <span class="string">'UploadController@method1'</span>);</div><div class="line">    Route::get(<span class="string">'admin/path2'</span>, <span class="string">'UploadController@method2'</span>);</div><div class="line">    Route::get(<span class="string">'admin/path3'</span>, <span class="string">'UploadController@method3'</span>);</div><div class="line">    Route::get(<span class="string">'admin/path4'</span>, <span class="string">'UploadController@method4'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法二：在控制器中增加构造方法-construct"><a href="#方法二：在控制器中增加构造方法-construct" class="headerlink" title="方法二：在控制器中增加构造方法__construct"></a><strong>方法二：在控制器中增加构造方法<code>__construct</code></strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h2><p>返回经过JWTAuth认证后的实例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Request $request)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $request-&gt;user();</div><div class="line">&#125;)-&gt;middleware(<span class="string">'jwt.api.auth'</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> middleware </tag>
            
            <tag> auth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JWT + dingo]]></title>
      <url>/2017/05/10/JWT-dingo/</url>
      <content type="html"><![CDATA[<blockquote>
<p>laravel 中JWT(Json Web Token)和dingo的使用</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>dingo</p>
</blockquote>
<h2 id="dingo的作用"><a href="#dingo的作用" class="headerlink" title="dingo的作用"></a><strong>dingo的作用</strong></h2><p>给前端提供数据接口，前后端分离，返回<code>JSON</code>数据</p>
<blockquote>
<p>一、安装</p>
</blockquote>
<h2 id="安装方法-1"><a href="#安装方法-1" class="headerlink" title="安装方法 1"></a><strong>安装方法 1</strong></h2><p>修改<code>composer.json</code>文件，执行<code>composer update</code>把最后一个版本的包加入项目中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"require"</span>: &#123;</div><div class="line">    <span class="string">"dingo/api"</span>: <span class="string">"1.0.*@dev"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="安装方法-2"><a href="#安装方法-2" class="headerlink" title="安装方法 2"></a><strong>安装方法 2</strong></h2><p>在命令行执行<code>composer require</code>命令<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer <span class="built_in">require</span> dingo/api:<span class="number">1.0</span>.x@dev</div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、配置</p>
</blockquote>
<p><strong>1、打开<code>config/app.php</code>，注册<code>service provider</code></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'provider'</span> =&gt; [</div><div class="line">    Dingo\Api\Provider\LaravelServiceProvider::class</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><strong>2、如果想在配置文件中改变配置，使用下面Artisan命令发布配置文件</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan vendor:publish --provider=<span class="string">"Dingo\Api\Provider\LaravelServiceProvider"</span></div></pre></td></tr></table></figure></p>
<p><strong>3、在<code>.env</code>中添加基础基础配置</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">API_STANDARDS_TREE = vnd</div><div class="line"></div><div class="line">API_PREFIX = api</div><div class="line"></div><div class="line">API_VERSION = v1</div><div class="line"></div><div class="line">API_DEBUG = <span class="keyword">true</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>三、使用</p>
</blockquote>
<h2 id="1、在routes-api-php中"><a href="#1、在routes-api-php中" class="headerlink" title="1、在routes\api.php中"></a><strong>1、在<code>routes\api.php</code>中</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$api = app(<span class="string">'Dingo\Api\Routing\Router'</span>);</div><div class="line"></div><div class="line">$api -&gt; group([<span class="string">'namespace'</span> =&gt; <span class="string">'App\Api\Controllers'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($api)</span> </span>&#123;</div><div class="line">        $api -&gt; get(<span class="string">'login'</span>, <span class="string">'Controllers@method'</span>);</div><div class="line">        ...;</div><div class="line">            <span class="comment">//只有在编辑信息，删除信息，创建信息的时候需要通过JWT验证客户端是否为登录的用户</span></div><div class="line">            $api -&gt; group([<span class="string">'middleware'</span> =&gt; <span class="string">'jwt.api.auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($api)</span> </span>&#123;</div><div class="line">                    $api -&gt; patch(<span class="string">'/path/&#123;id&#125;'</span>, <span class="string">'Controllers@update'</span>);</div><div class="line">                    $api -&gt; post(<span class="string">'/path/delete'</span>, <span class="string">'Controllers@destory'</span>);</div><div class="line">                    $api -&gt; post(<span class="string">'/path/create'</span>, <span class="string">'Controllers@store'</span>);</div><div class="line">                &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="2、创建Controller"><a href="#2、创建Controller" class="headerlink" title="2、创建Controller"></a><strong>2、创建Controller</strong></h2><p>在<code>\App\Api</code>下创建<code>Controller</code>和<code>Transformers</code>目录<br><strong>在Controllers下创建<code>BaseController.php</code>作为被继承的基础模块</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">  </div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Controllers</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Routing</span>\<span class="title">Helpers</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">use</span> <span class="title">Helpers</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/**** </span></div><div class="line">     * BaseController constructor. </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>JWTAuth</p>
</blockquote>
<h1 id="JWTAuth的作用"><a href="#JWTAuth的作用" class="headerlink" title="JWTAuth的作用"></a><strong>JWTAuth的作用</strong></h1><p>在用户登录的时候根据要求的登录信息，token签发时间(iat)，token过期时间(exp)等进行base64编码得到的字符串叫做<code>Payload（载荷）</code>。<br><em>之后用户的每次提交给服务器的行为都会带上token证明客户端用户身份</em></p>
<blockquote>
<p>一、安装</p>
</blockquote>
<h2 id="安装方法-1-1"><a href="#安装方法-1-1" class="headerlink" title="安装方法 1"></a><strong>安装方法 1</strong></h2><p>使用Composer安装JWT扩展包：<br><code>composer require tymon/jwt-auth 0.5.*</code></p>
<h2 id="安装方法-2-1"><a href="#安装方法-2-1" class="headerlink" title="安装方法 2"></a><strong>安装方法 2</strong></h2><p>修改<code>composer.json</code>文件，执行<code>composer update</code>把最后一个版本的包加入项目中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"required"</span>: &#123;</div><div class="line">    <span class="string">"tymon/jwt-auth"</span>:<span class="string">"0.5.*"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>二、配置</p>
</blockquote>
<h2 id="1、在config-app-php中注册相应的Service-Provider"><a href="#1、在config-app-php中注册相应的Service-Provider" class="headerlink" title="1、在config/app.php中注册相应的Service Provider"></a><strong>1、在<code>config/app.php</code>中注册相应的Service Provider</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span>=&gt;[</div><div class="line">        Tymon\JWTAuth\Providers\JWTAuthServiceProvider::class,</div><div class="line">    ]</div></pre></td></tr></table></figure>
<h2 id="2、注册jwt-Facades"><a href="#2、注册jwt-Facades" class="headerlink" title="2、注册jwt Facades"></a><strong>2、注册jwt Facades</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'aliases'</span>=&gt;[</div><div class="line">        <span class="string">'JWTAuth'</span>=&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</div><div class="line">        <span class="string">'JWTFactory'</span>=&gt; Tymon\JWTAuth\Facades\JWTFactory::class,</div><div class="line">    ]</div></pre></td></tr></table></figure>
<h2 id="3、更新配置文件"><a href="#3、更新配置文件" class="headerlink" title="3、更新配置文件"></a><strong>3、更新配置文件</strong></h2><p><code>php artisan vendor:publish --provider=&quot;Tymon\JWTAuth\Providers\JWTAuthServiceProvider&quot;</code></p>
<h2 id="4、生成jwt-php文件中数组的secret键成对应的值"><a href="#4、生成jwt-php文件中数组的secret键成对应的值" class="headerlink" title="4、生成jwt.php文件中数组的secret键成对应的值"></a><strong>4、生成jwt.php文件中数组的secret键成对应的值</strong></h2><p><code>php artisan jwt:generate</code></p>
<blockquote>
<p>关联dingo和JWT</p>
</blockquote>
<h2 id="修改config-api-php的auth"><a href="#修改config-api-php的auth" class="headerlink" title="修改config/api.php的auth"></a><strong>修改config/api.php的auth</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">'auth'</span> =&gt; [</div><div class="line">    <span class="string">'basic'</span> =&gt; <span class="function"><span class="keyword">function</span><span class="params">($app)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\Basic($app[<span class="string">'auth'</span>]);</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'jwt'</span> =&gt; <span class="function"><span class="keyword">function</span><span class="params">($app)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dingo\Api\Auth\Provider\JWT($app[<span class="string">'Tymon\JWTAuth\JWTAuth'</span>]);</div><div class="line">    &#125;</div><div class="line">],</div></pre></td></tr></table></figure>
<blockquote>
<p>具体运用</p>
</blockquote>
<h2 id="1、添加中间件身份验证"><a href="#1、添加中间件身份验证" class="headerlink" title="1、添加中间件身份验证"></a><strong>1、添加中间件身份验证</strong></h2><p>添加一个Middleware：<code>GetUserFromToken</code><br><code>php artisan make:middleware GetUserFromToken</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">JWTAuth</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetUserFromToken</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        $auth = JWTAuth::parseToken();</div><div class="line">        <span class="keyword">if</span> (! $token = $auth-&gt;setRequest($request)-&gt;getToken()) &#123;</div><div class="line">            <span class="keyword">return</span> response()-&gt;json([</div><div class="line">                <span class="string">'code'</span> =&gt; <span class="string">''</span>,</div><div class="line">                <span class="string">'message'</span> =&gt; <span class="string">'token_not_provided'</span>,</div><div class="line">                <span class="string">'data'</span> =&gt; <span class="string">''</span>,</div><div class="line">            ]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            $user = $auth-&gt;authenticate($token);</div><div class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException $e) &#123;</div><div class="line">            <span class="keyword">return</span> response()-&gt;json([</div><div class="line">                <span class="string">'code'</span> =&gt; <span class="string">''</span>,</div><div class="line">                <span class="string">'message'</span> =&gt; <span class="string">'token_expired'</span>,</div><div class="line">                <span class="string">'data'</span> =&gt; <span class="string">''</span>,</div><div class="line">            ]);</div><div class="line">        &#125; <span class="keyword">catch</span> (JWTException $e) &#123;</div><div class="line">            <span class="keyword">return</span> response()-&gt;json([</div><div class="line">                <span class="string">'code'</span> =&gt; <span class="string">''</span>,</div><div class="line">                <span class="string">'message'</span> =&gt; <span class="string">'token_invalid'</span>,</div><div class="line">                <span class="string">'data'</span> =&gt; <span class="string">''</span>,</div><div class="line">            ]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (! $user) &#123;</div><div class="line">            <span class="keyword">return</span> response()-&gt;json([</div><div class="line">                <span class="string">'code'</span> =&gt; <span class="string">''</span>,</div><div class="line">                <span class="string">'message'</span> =&gt; <span class="string">'user_not_found'</span>,</div><div class="line">                <span class="string">'data'</span> =&gt; <span class="string">''</span>,</div><div class="line">            ]);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//$this-&gt;events-&gt;fire('tymon.jwt.valid', $user);</span></div><div class="line">        <span class="keyword">return</span> $next($request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、在-app-hTTP-Kernel-php中routeMiddleware新增如下内容"><a href="#2、在-app-hTTP-Kernel-php中routeMiddleware新增如下内容" class="headerlink" title="2、在/app/hTTP/Kernel.php中routeMiddleware新增如下内容"></a><strong>2、在<code>/app/hTTP/Kernel.php</code>中<code>routeMiddleware</code>新增如下内容</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $routeMiddleware = [</div><div class="line">    ...</div><div class="line">    <span class="string">'jwt.api.auth'</span> =&gt; \App\Http\Middleware\GetUserFromToken::class, <span class="comment">//新增注册的中间件</span></div><div class="line">];</div></pre></td></tr></table></figure>
<h2 id="3、验证表格更改"><a href="#3、验证表格更改" class="headerlink" title="3、验证表格更改"></a><strong>3、验证表格更改</strong></h2><p>如果要修改验证的用户表名，修改<code>config/jwt.php</code><br><code>&#39;user&#39; =&gt; &#39;App\newName&#39;</code>,</p>
<h2 id="4、认证模块添加"><a href="#4、认证模块添加" class="headerlink" title="4、认证模块添加"></a><strong>4、认证模块添加</strong></h2><p><strong>关注一下logout和register</strong><br>在<code>AuthController</code>中添加相应模块<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Controllers</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Client</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">JWTAuth</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;  </div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">BaseController</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * The authentication guard that should be used. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@var</span> string </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">parent</span>::__construct();  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * <span class="doctag">@param</span> Request $request </div><div class="line">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">(Request $request)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        $payload = [  </div><div class="line">            <span class="string">'user_email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),  </div><div class="line">            <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>)  </div><div class="line">        ];  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (!$token = JWTAuth::attempt($payload)) &#123;  </div><div class="line">                <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'token_not_provided'</span>], <span class="number">401</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (JWTException $e) &#123;  </div><div class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'不能创建token'</span>], <span class="number">500</span>);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> response()-&gt;json(compact(<span class="string">'token'</span>));  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        JWTAuth::refresh();     <span class="comment">//刷新token，注意区别于middleware的auth</span></div><div class="line">        $arr = <span class="keyword">array</span> (<span class="string">'LOG OUT'</span>=&gt;<span class="string">"SUCCESSED"</span>);</div><div class="line">        <span class="keyword">return</span> response()-&gt;json(compact(<span class="string">'arr'</span>));</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * <span class="doctag">@param</span> Request $request </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(Request $request)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        $newUser = [  </div><div class="line">            <span class="string">'user_email'</span> =&gt; $request-&gt;get(<span class="string">'email'</span>),  </div><div class="line">            <span class="string">'user_name'</span> =&gt; $request-&gt;get(<span class="string">'name'</span>),  </div><div class="line">            <span class="string">'password'</span> =&gt; bcrypt($request-&gt;get(<span class="string">'password'</span>))  </div><div class="line">        ];  </div><div class="line">        $user = Client::create($newUser);  </div><div class="line">        $token = JWTAuth::fromUser($user);  </div><div class="line">        <span class="keyword">return</span> $token;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/**** </span></div><div class="line">     * 获取用户的信息 </div><div class="line">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">AuthenticatedUser</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">if</span> (!$user = JWTAuth::parseToken()-&gt;authenticate()) &#123;  </div><div class="line">                <span class="keyword">return</span> response()-&gt;json([<span class="string">'user_not_found'</span>], <span class="number">404</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException $e) &#123;  </div><div class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'token_expired'</span>], $e-&gt;getStatusCode());  </div><div class="line">        &#125; <span class="keyword">catch</span> (TokenInvalidException $e) &#123;  </div><div class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'token_invalid'</span>], $e-&gt;getStatusCode());  </div><div class="line">        &#125; <span class="keyword">catch</span> (JWTException $e) &#123;  </div><div class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'token_absent'</span>], $e-&gt;getStatusCode());  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">// the token is valid and we have found the user via the sub claim  </span></div><div class="line">        <span class="keyword">return</span> response()-&gt;json(compact(<span class="string">'user'</span>));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5、使用Transformers隐藏返回api的数据"><a href="#5、使用Transformers隐藏返回api的数据" class="headerlink" title="5、使用Transformers隐藏返回api的数据"></a><strong>5、使用Transformers隐藏返回api的数据</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* app\Api\Transformers\TestsTransformer.php</div><div class="line">*/</div><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">  </div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Transformers</span>;  </div><div class="line">  </div><div class="line"><span class="comment">/**该类为dingo api封装好**/</span>  </div><div class="line"><span class="keyword">use</span> <span class="title">League</span>\<span class="title">Fractal</span>\<span class="title">TransformerAbstract</span>;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestsTransformer</span> <span class="keyword">extends</span> <span class="title">TransformerAbstract</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transform</span><span class="params">($lesson)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="comment">//访问api的时候只会返回username, email, is_free 字段</span></div><div class="line">        <span class="keyword">return</span> [  </div><div class="line">            <span class="string">'username'</span> =&gt; $lesson[<span class="string">'user_name'</span>],  </div><div class="line">            <span class="string">'email'</span> =&gt; $lesson[<span class="string">'user_email'</span>],  </div><div class="line">            <span class="string">'is_free'</span> =&gt; (boolean) $lesson[<span class="string">'free'</span>]      <span class="comment">//将 0 1 转换为false 和 true</span></div><div class="line">        ];  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Controller</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $comments = Comment::all();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;collection($lessons, <span class="keyword">new</span> TestsTransformer());     <span class="comment">//new的类为Transformer的文件名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6、在路由中指定使用jwt-api-auth"><a href="#6、在路由中指定使用jwt-api-auth" class="headerlink" title="6、在路由中指定使用jwt.api.auth"></a><strong>6、在路由中指定使用<code>jwt.api.auth</code></strong></h2><p><code>[&#39;middleware&#39; =&gt; &#39;jwt.api.auth&#39;]</code></p>
]]></content>
      
        <categories>
            
            <category> JWT Dingo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> JWTAuth </tag>
            
            <tag> dingo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell脚本相关]]></title>
      <url>/2017/05/10/Shell%E8%84%9A%E6%9C%AC%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文内容为bash操作相关</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>参数</p>
</blockquote>
<p>1、echo <code>-e</code>：包含转义序列的字符串形式输出<br>2、echo <code>-n</code>：echo会将一个换行符追加到输出文本的尾部，可以使用<code>-n</code>忽略结尾换行符</p>
<blockquote>
<p>其他</p>
</blockquote>
<h2 id="1、要输出感叹号的时候不要放在双引号内，如果要的话要加“-”反斜杠"><a href="#1、要输出感叹号的时候不要放在双引号内，如果要的话要加“-”反斜杠" class="headerlink" title="1、要输出感叹号的时候不要放在双引号内，如果要的话要加“\”反斜杠"></a>1、要输出感叹号的时候不要放在双引号内，如果要的话要加<code>“\”</code>反斜杠</h2><h2 id="2、查看PATH变量"><a href="#2、查看PATH变量" class="headerlink" title="2、查看PATH变量"></a>2、查看<code>PATH</code>变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $PATH</div></pre></td></tr></table></figure>
<h2 id="3、添加环境变量"><a href="#3、添加环境变量" class="headerlink" title="3、添加环境变量"></a><strong>3、添加环境变量</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Users/..."</span></div></pre></td></tr></table></figure>
<h2 id="4、获取字符串长度"><a href="#4、获取字符串长度" class="headerlink" title="4、获取字符串长度"></a><strong>4、获取字符串长度</strong></h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">length</span>=<span class="variable">$&#123;#var&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JWT的使用（中间件的坑）]]></title>
      <url>/2017/05/06/%E5%88%9B%E5%BB%BAtoken/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关于JWT的坑</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>原理</p>
</blockquote>
<h2 id="验证机制（需用到-GetUserFromToken-中间件）"><a href="#验证机制（需用到-GetUserFromToken-中间件）" class="headerlink" title="验证机制（需用到 GetUserFromToken 中间件）"></a><strong>验证机制（需用到 <em><code>GetUserFromToken</code></em> 中间件）</strong></h2><p>1、根据用户信息，还有后面加入的信息创建token，并将token保存在后台的缓存，可加入 <em><code>$user[&#39;now&#39;]=time()</code></em> 等信息</p>
<p>2、将token发给客户端，存在客户端的缓存中</p>
<p>3、需要验证的操作或者请求使用jwt中间件验证（将存在客户端缓存中的token取出并放在 <em><code>header</code></em> 中发回给后台）</p>
<p>4、请求通过jwt中间件将 <em><code>header</code></em> 中的 <em><code>token</code></em> 值与后台缓存的token对比，确认一致后继续进行下一步操作</p>
<blockquote>
<p>使用注意事项</p>
</blockquote>
<h3 id="一、使用中间件jwt-api-auth"><a href="#一、使用中间件jwt-api-auth" class="headerlink" title="一、使用中间件jwt.api.auth"></a><strong>一、使用中间件jwt.api.auth</strong></h3><p><strong>参考资料：<code>http://blog.csdn.net/qq_28666081/article/details/52188549</code></strong></p>
<p><strong>1、改 <em><code>config/auth.php</code></em> 中的 <em><code>&#39;providers&#39;</code></em> 数组中的 <em><code>model</code></em> 为相应要验证的model名</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span> =&gt; [</div><div class="line">    <span class="string">'users'</span> =&gt; [</div><div class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'eloquent'</span>,</div><div class="line">        <span class="string">'model'</span> =&gt; App\Client::class,       <span class="comment">//Client为自己需要的model名</span></div><div class="line">    ],</div></pre></td></tr></table></figure></p>
<p><strong>2、model修改</strong><br>在创建的新 <em><code>model</code></em> 中加入以下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> Illuminate\Foundation\Auth\<span class="keyword">User</span> <span class="keyword">as</span> Authenticatable;</div></pre></td></tr></table></figure></p>
<p>修改新 <em><code>model</code></em> 继承的类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> </span>&#123;      <span class="comment">//Authenticatale替换原来的model</span></div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="二、其他"><a href="#二、其他" class="headerlink" title="二、其他"></a>二、其他</h3><p>2、修改 <em><code>config/jwt.php</code></em> 文件的 <em><code>&#39;user&#39;</code></em> 项，改为要验证的model<br>3、<em><code>config/jwt.php</code></em> 中的 <em><code>&#39;ttl&#39;</code></em> 属性为token的有效时间，根据需要设置</p>
<blockquote>
<p>创建Token</p>
</blockquote>
<h2 id="方法1：用户登录的时候返回"><a href="#方法1：用户登录的时候返回" class="headerlink" title="方法1：用户登录的时候返回"></a><strong>方法1：用户登录的时候返回</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">JWTAuth</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticateController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// grab credentials from the request</span></div><div class="line">        $credentials = $request-&gt;only(<span class="string">'email'</span>, <span class="string">'password'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// attempt to verify the credentials and create a token for the user</span></div><div class="line">            <span class="keyword">if</span> (! $token = JWTAuth::attempt($credentials)) &#123;</div><div class="line">                <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'invalid_credentials'</span>], <span class="number">401</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (JWTException $e) &#123;</div><div class="line">            <span class="comment">// something went wrong whilst attempting to encode the token</span></div><div class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'could_not_create_token'</span>], <span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// all good so return the token</span></div><div class="line">        <span class="keyword">return</span> response()-&gt;json(compact(<span class="string">'token'</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果验证的密码字段不是 ‘password’</strong>，在要验证表的 model 中加入以下函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user_password;    <span class="comment">//user_password为字段名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如果验证的用户字段字段不是 ‘email’ 是 ‘name’</strong>，在 <em>‘AuthController’</em> 中声明<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要这样验证</span></div><div class="line">$credentials = [</div><div class="line">            <span class="string">'name'</span> =&gt; $request-&gt;get(<span class="string">'name'</span>),</div><div class="line">            <span class="string">'password'</span> =&gt; $request-&gt;get(<span class="string">'password'</span>),</div><div class="line">        ];</div><div class="line"></div><div class="line"><span class="comment">//加声明</span></div><div class="line"><span class="keyword">public</span> $username = <span class="string">'name'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="（首选）方法2：通过用户对象实例创建token"><a href="#（首选）方法2：通过用户对象实例创建token" class="headerlink" title="（首选）方法2：通过用户对象实例创建token"></a><strong>（首选）方法2：通过用户对象实例创建token</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$user = User::first();  <span class="comment">//先获取用户</span></div><div class="line">$token = JWTAuth::fromUser($user);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> JWTAuth </tag>
            
            <tag> dingo </tag>
            
            <tag> api </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据的增删改]]></title>
      <url>/2017/05/02/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Controller中 store, destory, update方法</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>如果是在/public/upload下的文件， 路径用 ./upload</p>
</blockquote>
<h2 id="1、增–store"><a href="#1、增–store" class="headerlink" title="1、增–store"></a><strong>1、增–store</strong></h2><p><code>这里省去验证和文件上传步骤，详见laravel文件上传</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">modelName</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(newRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    $content = $request-&gt;except(<span class="string">'_token'</span>, <span class="string">'fileName'</span>);  <span class="comment">//不包括token和文件上传</span></div><div class="line">    $content[<span class="string">'filename'</span>] = <span class="string">'URL'</span> . <span class="string">'newFilename'</span> . $file-&gt;getClientOriginalExtension();</div><div class="line">    modelName::create($content);</div><div class="line"></div><div class="line">    redirect(<span class="string">'/path'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2、删–destory"><a href="#2、删–destory" class="headerlink" title="2、删–destory"></a><strong>2、删–destory</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">modelName</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">File</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destory</span><span class="params">($id)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//先通过用户验证，进入相应用户的删除操作界面</span></div><div class="line">    <span class="keyword">$this</span> -&gt; middleware(<span class="string">'auth'</span>);</div><div class="line"></div><div class="line">    $content = modelName::find($id);</div><div class="line"></div><div class="line">    <span class="comment">//要删除的文件，引入File Facade</span></div><div class="line">    File::delete(<span class="string">'/path/fileName'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//删除数据库数据</span></div><div class="line">    $content -&gt; delete();</div><div class="line">    redirect(<span class="string">'/path'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、改–update"><a href="#3、改–update" class="headerlink" title="3、改–update"></a><strong>3、改–update</strong></h2><p><strong>改有两种方法可用，一种为直接新内容覆盖旧内容，另一种为逐条信息更新再update</strong></p>
<blockquote>
<p>第一种：覆盖</p>
</blockquote>
<p><strong>先不取出上传文件，后面处理后再加入数组，以下省略文件验证代码，详见<a href="">larval文件上传</a></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">modelName</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">File</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(newRquest $request, $id)</span></span></div><div class="line">&#123;</div><div class="line">    $url = <span class="string">'url'</span>;  </div><div class="line">    $file = $request-&gt;file(<span class="string">'fileName'</span>);</div><div class="line">    $fileName = <span class="string">'newFileName'</span> . $file-&gt;getClientOriginalExtension();</div><div class="line">    $new_data = $request-&gt;all();</div><div class="line"></div><div class="line">    $file-&gt;move($url, $fileName);</div><div class="line">    $new_data[<span class="string">'filePath'</span>] = $url . $fileName;</div><div class="line"></div><div class="line">    $raw_data = modelName::findOrFail($id);</div><div class="line">    File::delete($raw_data[<span class="string">'filePath'</span>]);</div><div class="line"></div><div class="line">    $raw_data-&gt;update($new_data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>第二种：逐条更新</p>
</blockquote>
<p><strong>缺点：要先在Controller中写好包含每列名称的关联数组</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">modelName</span>;</div><div class="line"><span class="keyword">protected</span> $column_names = [</div><div class="line">    <span class="string">'column_name1'</span> =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'column_name2'</span> =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'column_name3'</span> =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'column_name4'</span> =&gt; <span class="string">''</span>,</div><div class="line"></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(newRequest $request, $id)</span></span></div><div class="line">&#123;</div><div class="line">    $raw_data = modelName::findOrFail($id);</div><div class="line"></div><div class="line">    <span class="comment">//取出键名</span></div><div class="line">    <span class="keyword">foreach</span>(array_keys(array_except(<span class="keyword">$this</span>-&gt;column_names, [<span class="string">'column_namex'</span>])) <span class="keyword">as</span> $key)</div><div class="line">    &#123;</div><div class="line">        $raw_data-&gt;$key = $request-&gt;get($key);</div><div class="line">    &#125;</div><div class="line">    $raw_data -&gt; save();</div><div class="line"></div><div class="line">    redirect(<span class="string">'/path'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> Controller </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eloquent 关系]]></title>
      <url>/2017/05/02/Eloquent-%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Eloquent 一对一等关系</p>
</blockquote>
<a id="more"></a>
<h1 id="1、设置外键（默认名称为user-id）"><a href="#1、设置外键（默认名称为user-id）" class="headerlink" title="1、设置外键（默认名称为user_id）"></a><strong>1、设置外键（默认名称为user_id）</strong></h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$table<span class="function"> -&gt;</span> integer<span class="function"><span class="params">(<span class="string">'user_id'</span>)</span> -&gt;</span> <span class="keyword">default</span>(<span class="number">1</span>);     <span class="regexp">//创建后第二个表中的所有数据都属于user表中id为1的用户</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在链关系中如果最后一项为函数的话可以不用加( )</p>
</blockquote>
<h1 id="2、创建关系"><a href="#2、创建关系" class="headerlink" title="2、创建关系"></a><strong>2、创建关系</strong></h1><blockquote>
<p>一对一关系</p>
</blockquote>
<p>如果一个<code>User</code>模型与另一个<code>model</code>模型对应，定义一个<code>method</code>方法在<code>User</code>模型中，<code>method</code>方法调用Eloquent模型基类上<code>hasOne</code>方法并返回结果<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\model'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>hasOne</code>方法的第一个参数为关联模型的名称。通过动态属性访问关联方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$new = User::find(<span class="number">1</span>)-&gt;method;   <span class="comment">//返回结果集，可以进一步调用属性</span></div><div class="line">$new = User::find(<span class="number">1</span>)-&gt;method-&gt;name;   <span class="comment">//返回在models表中user_id为1的信息的名字</span></div></pre></td></tr></table></figure></p>
<p><code>hasOne</code>方法默认关联外键为<code>user_id</code>，如果想让model的其他作为外键，传入第二个参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span> -&gt; hasOne(<span class="string">'App\model'</span>, <span class="string">'foreign_key'</span>);</div></pre></td></tr></table></figure></p>
<p><code>hasOne</code>方法默认通过<code>id</code>值去<code>models</code>表中查询<code>user_id</code>与之匹配的记录，如果想换主键匹配，传递第三个参数给<code>hasOne</code>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\model'</span>, <span class="string">'foreign_key'</span>, <span class="string">'local_key'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="定义相对的关联"><a href="#定义相对的关联" class="headerlink" title="定义相对的关联"></a>定义相对的关联</h2><p>也可以在model模型中定义关系关联<code>User</code>，使用<code>belongsTo</code>方法定义；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> <span class="title">Illuminat</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">model</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'App\User'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>如果model模型上的外键不是<code>user_id</code>，父模型不使用<code>id</code>作为主键：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'App\User'</span>, <span class="string">'foreign_key'</span>, <span class="string">'other_primarykey'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>用法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$new = App\model::find(<span class="number">1</span>)-&gt;user();      <span class="comment">//返回user表中id为1的信息</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>一对多关系</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">namespace</span> <span class="title">App</span>;</div><div class="line"></div><div class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</div><div class="line"></div><div class="line">    <span class="comment">//Posts表有id作为主键</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;       </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span> -&gt; hasMany(<span class="string">'App\Comment'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Eloquent自动判断<code>Comment模型</code>的外键，默认某列中名称有<code>_id</code>后缀为外键<br><strong>访问关联方法（用法）：</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</div><div class="line">$comments = App\Post::find(<span class="number">1</span>)-&gt;comments;    <span class="comment">//先用find找到一个用户，再调用函数</span></div><div class="line"></div><div class="line"><span class="keyword">foreach</span>($comments <span class="keyword">as</span> $comment)&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>增加约束条件</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$comments = App\Post::find(<span class="number">1</span>)-&gt;comments()-&gt;where()-&gt;first;</div></pre></td></tr></table></figure></p>
<p>通过第二个参数，第三个参数自定义外键和主键<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\Comment'</span>, <span class="string">'foreign_key'</span>, <span class="string">'local_key'</span>);</div></pre></td></tr></table></figure></p>
<p>更多详见 <code>laravelacademy.org/post/6996.html</code></p>
<blockquote>
<p>只获取指定的字段</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Permission::class)-&gt;select(<span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'description'</span>));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> Eloquent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 文件上传处理]]></title>
      <url>/2017/04/30/laravel%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Laravel文件上传操作</p>
</blockquote>
<a id="more"></a>
<h2 id="1-在blade文件中的表格指定文件上传的name"><a href="#1-在blade文件中的表格指定文件上传的name" class="headerlink" title="1.在blade文件中的表格指定文件上传的name"></a><strong>1.在blade文件中的表格指定文件上传的name</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"url"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_token"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;csrf_token()&#125;&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"newfile"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"sub"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-改配置文件"><a href="#2-改配置文件" class="headerlink" title="2.改配置文件"></a><strong>2.改配置文件</strong></h2><p>修改<code>config/filesystems.php</code>文件，加入以下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'uploads'</span> =&gt; [</div><div class="line">    <span class="string">'driver'</span> =&gt; <span class="string">'local'</span>,</div><div class="line">    <span class="comment">//文件上传到storage/app/uploads目录</span></div><div class="line">    <span class="string">'root'</span> =&gt; storage_path(<span class="string">'app/uploads'</span>),  </div><div class="line">    <span class="comment">//如果文件上传到public/uploads目录 则上一行代码换成下面一行</span></div><div class="line">    <span class="comment">//'root' =&gt; public_path('uploads'),</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="3-在Controller中获取文件信息并上传"><a href="#3-在Controller中获取文件信息并上传" class="headerlink" title="3.在Controller中获取文件信息并上传"></a><strong>3.在Controller中获取文件信息并上传</strong></h2><p><code>getClientOriginalName</code>方法获取文件原名<br><code>getRealPath( )</code>方法获取缓存在tmp文件夹下的文件绝对路径<br><code>getClientOriginalExtension( )</code>方法获取上传文件的后缀<br><code>getMimeType( )</code>方法返回类似<code>image/jpeg</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Storage</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 文件上传方法</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">(Request $request)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($request-&gt;isMethod(<span class="string">'post'</span>)) &#123;</div><div class="line">            $file = $request-&gt;file(<span class="string">'picture'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 验证文件是否上传成功并处理上传</span></div><div class="line">            <span class="keyword">if</span> ($file-&gt;isValid()) &#123;</div><div class="line">                <span class="comment">/*****获取文件相关信息*****/</span></div><div class="line">                $originalName = $file-&gt;getClientOriginalName(); <span class="comment">// 文件原名</span></div><div class="line">                $ext = $file-&gt;getClientOriginalExtension();     <span class="comment">// 扩展名</span></div><div class="line">                $realPath = $file-&gt;getRealPath();   <span class="comment">//临时文件的绝对路径</span></div><div class="line">                $type = $file-&gt;getClientMimeType();     <span class="comment">// image/jpeg</span></div><div class="line">                <span class="comment">/**********************/</span></div><div class="line"></div><div class="line">                <span class="comment">/*****上传文件*****/</span></div><div class="line">                $filename = date(<span class="string">'Y-m-d-H-i-s'</span>) . <span class="string">'-'</span> . uniqid() . <span class="string">'.'</span> . $ext;  </div><div class="line">                <span class="comment">// 使用新建的uploads本地存储空间（目录）</span></div><div class="line">                $bool = Storage::disk(<span class="string">'uploads'</span>)-&gt;put($filename, file_get_contents($realPath));</div><div class="line">                <span class="comment">/****************/</span></div><div class="line"></div><div class="line">                var_dump($bool);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view(<span class="string">'upload'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="4-注意-CSRF报错"><a href="#4-注意-CSRF报错" class="headerlink" title="4.注意(CSRF报错)"></a><strong>4.注意(CSRF报错)</strong></h2><blockquote>
<p>laravel默认开启<code>CSRF</code>验证，不是get请求的话需要验证CSRF</p>
</blockquote>
<p><strong>解决办法1：加隐藏表单</strong><br>如果表单中加了以下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_token"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;csrf_token()&#125;&#125;"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>仍然报以下错误，用解决办法2<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TokenMismatchException <span class="keyword">in</span> VerifyCsrfToken<span class="selector-class">.php</span> line <span class="number">68</span>:</div></pre></td></tr></table></figure></p>
<p><strong>解决办法2：禁用CSRF</strong><br>修改文件：<code>app\Http\Kernel.php</code>，注释掉以下代码<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">'App<span class="symbol">\H</span>ttp<span class="symbol">\M</span>iddleware<span class="symbol">\V</span>erifyCsrfToken'</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可以直接使用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$file = $request-&gt;file(<span class="string">'filename'</span>);</div><div class="line">$file -&gt; move(public_path(),<span class="string">'/path'</span>, <span class="string">'filename'</span>);   <span class="comment">//移动到public/path下</span></div></pre></td></tr></table></figure>
<h2 id="验证上传图片类型并上传"><a href="#验证上传图片类型并上传" class="headerlink" title="验证上传图片类型并上传"></a><strong>验证上传图片类型并上传</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(Request $request, $id)</span></span></div><div class="line">&#123;</div><div class="line">    $content = $request-&gt;except(<span class="string">'_token'</span>, <span class="string">'filename'</span>);</div><div class="line">    <span class="keyword">if</span>(!is_null($request-&gt;file(<span class="string">'filename'</span>)))&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;validate($request, [</div><div class="line">            <span class="string">'filename'</span> =&gt; <span class="string">'mimes:jpeg,png,gif'</span>      <span class="comment">//filename为表单中file的name值</span></div><div class="line">        ]);</div><div class="line">        $file = $request-&gt;file(<span class="string">'filename'</span>);</div><div class="line"></div><div class="line">        <span class="comment">//上传到指定文件夹</span></div><div class="line">        $file-&gt;move(public_path().<span class="string">'/path'</span>, <span class="string">'newFileName'</span>);  <span class="comment">//文件名最后补上后缀</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>validate</code>方法接收一个HTTP请求输入数据和验证规则，如果验证规则通过，代码将会继续往下执行；然而，如果验证失败，将会抛出一个异常，相应的错误响应也会自动发送给用户。</p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Route 相关]]></title>
      <url>/2017/04/30/Route%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Route相关知识</p>
</blockquote>
<a id="more"></a>
<h2 id="项目中一般不用Route-resource"><a href="#项目中一般不用Route-resource" class="headerlink" title="项目中一般不用Route::resource( )"></a><strong>项目中一般不用Route::resource( )</strong></h2><p>Http方法<code>patch</code>对应Controller的<code>update</code>函数<br>Http方法<code>delete</code>对应Controller的<code>destory</code>函数<br>Http方法<code>post</code>对应Controller的<code>store</code>函数<br>Http方法<code>get</code>且路径为<code>/path/create</code>对应Controller的<code>create</code>函数<br><em>特殊:get</em>路径为<code>/path/{参数}/edit</code>对应Controller的<code>edit</code>函数</p>
<hr>
<h2 id="部分资源路由（Resource）"><a href="#部分资源路由（Resource）" class="headerlink" title="部分资源路由（Resource）"></a><strong>部分资源路由（Resource）</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Route::resource(<span class="string">'new'</span>, <span class="string">'newController'</span>, [<span class="string">'only'</span>=&gt;[<span class="string">'index'</span>, <span class="string">'show'</span>]]);   <span class="comment">//只处理index和show方法</span></div><div class="line">Route::resource(<span class="string">'new'</span>, <span class="string">'newController'</span>, [<span class="string">'except'</span>=&gt;[<span class="string">'create'</span>, <span class="string">'store'</span>]]);   <span class="comment">//处理除了create和store的方法</span></div></pre></td></tr></table></figure>
<h2 id="重定向到Controller-Action"><a href="#重定向到Controller-Action" class="headerlink" title="重定向到Controller Action"></a><strong>重定向到Controller Action</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第二个参数为可选参数</span></div><div class="line"><span class="keyword">return</span> redirect() -&gt; action(<span class="string">'MyController@index'</span>, [<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> Route </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blade 相关]]></title>
      <url>/2017/04/29/Blade-Warning/</url>
      <content type="html"><![CDATA[<h2 id="一、blade实现编辑页面自动填充表单"><a href="#一、blade实现编辑页面自动填充表单" class="headerlink" title="一、blade实现编辑页面自动填充表单"></a><strong>一、blade实现编辑页面自动填充表单</strong></h2><h3 id="1-在Controller中"><a href="#1-在Controller中" class="headerlink" title="1. 在Controller中"></a>1. 在Controller中</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$content = model名::findOrFail($id);</div></pre></td></tr></table></figure>
<h3 id="2-在视图文件中使用Form-Model-Binding"><a href="#2-在视图文件中使用Form-Model-Binding" class="headerlink" title="2. 在视图文件中使用Form-Model-Binding"></a>2. 在视图文件中使用<code>Form-Model-Binding</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;!! Form::model($content, [&apos;method&apos;=&gt;&apos;PATCH&apos;, &apos;url&apos;=&gt;&apos;/path/&apos;.$content-&gt;id]) !!&#125;</div></pre></td></tr></table></figure>
<h2 id="二、Blade模板中的注意事项"><a href="#二、Blade模板中的注意事项" class="headerlink" title="二、Blade模板中的注意事项"></a><strong>二、Blade模板中的注意事项</strong></h2><ol>
<li>如果从Controller传过来的数组为一维关联数组，可以直接用数组中的键作为变量</li>
<li>重用的代码放到一个文件里，在需要用的视图文件用<code>@include(&#39;view&#39;s name&#39;)</code></li>
</ol>
<h2 id="三、视图绑定变量"><a href="#三、视图绑定变量" class="headerlink" title="三、视图绑定变量"></a><strong>三、视图绑定变量</strong></h2><p>1、一般在被其他视图文件包含的视图文件使用，不用额外再写代码<br>2、创建一个类文件，比如在<code>App\ClassName</code><br>3、在视图文件中用 <em><code>@inject(&#39;var&#39;, &#39;ClassFile_Path&#39;)</code></em> 绑定变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@inject(<span class="string">'var'</span>, <span class="string">'App\ClassName'</span>)</div><div class="line"></div><div class="line">$var-&gt;method();     <span class="comment">//调用ClassName类中的方法</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> blade </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 函数]]></title>
      <url>/2017/04/29/My-New-Post/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有关laravel的函数</p>
</blockquote>
<a id="more"></a>
<h2 id="old-函数"><a href="#old-函数" class="headerlink" title="old( )函数"></a><strong>old( )函数</strong></h2><p><code>old</code>函数获取一次性从Session获取的值，如果有第二个参数，则代表函数当第一个参数不存在时取第二个参数</p>
<blockquote>
<p>当表单被填充但是验证失败需要返回原始输入数据</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$fields为默认值的关联数组</span></div><div class="line">$data = [];</div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fields <span class="keyword">as</span> $field =&gt; $default)&#123;</div><div class="line">    $data[$field] = old($field, $default);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="array-except-函数"><a href="#array-except-函数" class="headerlink" title="array_except( )函数"></a><strong>array_except( )函数</strong></h2><p><code>array_except</code>方法从数组中移除给定键值对，第二个参数为<code>[&#39;键名&#39;]</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$array = array_except($array, [<span class="string">'price'</span>]);   <span class="comment">//移除array数组以`price`为键的键值对</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="array-keys-函数"><a href="#array-keys-函数" class="headerlink" title="array_keys( )函数"></a><strong>array_keys( )函数</strong></h2><p><code>array_keys</code>函数返回包含数组中所有<code>键名</code>的一个新数组<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$a = $array(<span class="string">"name"</span>=&gt;<span class="string">"lee"</span>, <span class="string">"sex"</span>=&gt;<span class="string">"male"</span>);</div><div class="line">$b = array_keys($a);    <span class="comment">//b为array([0]=&gt;name, [1]=&gt;sex)</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="withSuccess-函数"><a href="#withSuccess-函数" class="headerlink" title="withSuccess( )函数"></a><strong>withSuccess( )函数</strong></h2><p><code>withSuccess</code>函数参数为一个字符串语句，在重定向<code>redirect( )</code>后使用，在相应的视图文件中可用Session类获取<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在控制器中</span></div><div class="line">    redirect(<span class="string">'/path'</span>) -&gt; withSuccess(<span class="string">'Succeed.'</span>);</div><div class="line"><span class="comment">//在视图文件中</span></div><div class="line">    Session::has(<span class="string">'success'</span>);    <span class="comment">//判断是否存在</span></div><div class="line">    Session::get(<span class="string">'success'</span>);    <span class="comment">//获取控制器中withSuccess()中的字符串</span></div></pre></td></tr></table></figure></p>
<h2 id="strstr-函数"><a href="#strstr-函数" class="headerlink" title="strstr( )函数"></a><strong>strstr( )函数</strong></h2><p><code>strstr</code>函数查找第二个参数在第一个参数中第一次出现位置，并返回字符串剩余的部分<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> strstr(<span class="string">'I love China.'</span>, <span class="string">'love'</span>);</div><div class="line"><span class="comment">//输出'love China'</span></div></pre></td></tr></table></figure></p>
<h2 id="strtotime-函数"><a href="#strtotime-函数" class="headerlink" title="strtotime( )函数"></a><strong>strtotime( )函数</strong></h2><p><code>strtotime</code>返回Unix时间戳<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strtotime(date(<span class="string">'Y-m-d H:i:s'</span>, time()));</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> laravel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> blade </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
